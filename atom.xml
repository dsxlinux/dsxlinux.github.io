<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech2k18</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dsxlinux.github.io/"/>
  <updated>2018-06-22T10:25:55.000Z</updated>
  <id>https://dsxlinux.github.io/</id>
  
  <author>
    <name>Dong Shouxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python标准库03</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-stdmod04/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-stdmod04/</id>
    <published>2018-06-22T10:15:23.000Z</published>
    <updated>2018-06-22T10:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python标准库。<br><a id="more"></a></p><h4 id="1-subprocess模块"><a href="#1-subprocess模块" class="headerlink" title="1.subprocess模块"></a>1.subprocess模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>retcode = subprocess.call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</span><br><span class="line"><span class="comment">#和shell中命令ls -a显示结果一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> retcode</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>retcode = subprocess.call(<span class="string">"ls -l"</span>,shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child = subprocess.Popen([<span class="string">'ping'</span>,<span class="string">'-c'</span>,<span class="string">'4'</span>,<span class="string">'blog.linuxeye.com'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'parent process'</span></span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child = subprocess.Popen(<span class="string">'ping -c4 blog.linuxeye.com'</span>,shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child.wait()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'parent process'</span></span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child1 = subprocess.Popen([<span class="string">"ls"</span>,<span class="string">"-l"</span>], stdout=subprocess.PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> child1.stdout.read(),</span><br><span class="line"><span class="comment">#或者child1.communicate()</span></span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child1 = subprocess.Popen([<span class="string">"cat"</span>,<span class="string">"/etc/passwd"</span>], stdout=subprocess.PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child2 = subprocess.Popen([<span class="string">"grep"</span>,<span class="string">"0:0"</span>],stdin=child1.stdout, stdout=subprocess.PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out = child2.communicate()</span><br></pre></td></tr></table></figure><h4 id="2-pyinotify模块"><a href="#2-pyinotify模块" class="headerlink" title="2.pyinotify模块"></a>2.pyinotify模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyinotify <span class="keyword">import</span> WatchManager, Notifier,ProcessEvent,IN_DELETE, IN_CREATE,IN_MODIFY</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span><span class="params">(ProcessEvent)</span>:</span></span><br><span class="line"> <span class="string">"""事件处理"""</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">process_IN_CREATE</span><span class="params">(self, event)</span>:</span></span><br><span class="line">  <span class="keyword">print</span>  <span class="string">"Create file: %s "</span> %  os.path.join(event.path,event.name)</span><br><span class="line">   </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">process_IN_DELETE</span><span class="params">(self, event)</span>:</span></span><br><span class="line">  <span class="keyword">print</span>  <span class="string">"Delete file: %s "</span> %  os.path.join(event.path,event.name)</span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">process_IN_MODIFY</span><span class="params">(self, event)</span>:</span></span><br><span class="line">   <span class="keyword">print</span>  <span class="string">"Modify file: %s "</span> %  os.path.join(event.path,event.name)</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FSMonitor</span><span class="params">(path=<span class="string">'.'</span>)</span>:</span></span><br><span class="line">  wm = WatchManager()</span><br><span class="line">  mask = IN_DELETE | IN_CREATE |IN_MODIFY</span><br><span class="line">  notifier = Notifier(wm, EventHandler())</span><br><span class="line">  wm.add_watch(path, mask,auto_add=<span class="keyword">True</span>,rec=<span class="keyword">True</span>)</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'now starting monitor %s'</span>%(path)</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">     notifier.process_events()</span><br><span class="line">     <span class="keyword">if</span> notifier.check_events():</span><br><span class="line">       notifier.read_events()</span><br><span class="line">   <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">     notifier.stop()</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> FSMonitor(<span class="string">'/root/softpython/apk_url'</span>)</span><br></pre></td></tr></table></figure><h4 id="3-pwd和grp模块"><a href="#3-pwd和grp模块" class="headerlink" title="3.pwd和grp模块"></a>3.pwd和grp模块</h4><p>pwd模块：<br>pwd.getpwuid(uid):<br>返回对应uid的用户信息<br>pwd.getpwnam(name):<br>返回对应name的用户信息<br>pwd.getpwall():<br>返回所有用户信息<br>grp.getgrgid(gid):<br>返回对应gid的组信息<br>grp.getgrname(name):<br>返回对应group name的组信息<br>grp.getgrall():<br>返回所有组信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwd</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">()</span>:</span></span><br><span class="line">  all_user = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> user <span class="keyword">in</span> pwd.getpwall():</span><br><span class="line">    all_user[user[<span class="number">0</span>]] = all_user[user[<span class="number">2</span>]] = user</span><br><span class="line">  <span class="keyword">return</span> all_user</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userinfo</span><span class="params">(uid)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> get_user()[uid]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> userinfo(<span class="number">0</span>)</span><br><span class="line">pwd.struct_passwd(pw_name=<span class="string">'root'</span>, pw_passwd=<span class="string">'x'</span>, pw_uid=<span class="number">0</span>, pw_gid=<span class="number">0</span>, pw_gecos=<span class="string">'root'</span>, pw_dir=<span class="string">'/root'</span>, pw_shell=<span class="string">'/bin/bash'</span>)</span><br><span class="line"><span class="keyword">print</span> userinfo(<span class="string">'root'</span>)</span><br><span class="line">pwd.struct_passwd(pw_name=<span class="string">'root'</span>, pw_passwd=<span class="string">'x'</span>, pw_uid=<span class="number">0</span>, pw_gid=<span class="number">0</span>, pw_gecos=<span class="string">'root'</span>, pw_dir=<span class="string">'/root'</span>, pw_shell=<span class="string">'/bin/bash'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="4-pickle模块"><a href="#4-pickle模块" class="headerlink" title="4.pickle模块"></a>4.pickle模块</h4><ul><li><p>使用pickle模块将数据对象保存到文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">data1 = &#123;<span class="string">'a'</span>: [<span class="number">1</span>, <span class="number">2.0</span>, <span class="number">3</span>, <span class="number">4</span>+<span class="number">6j</span>],</span><br><span class="line">         <span class="string">'b'</span>: (<span class="string">'string'</span>, <span class="string">u'Unicode string'</span>),</span><br><span class="line">         <span class="string">'c'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">selfref_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">selfref_list.append(selfref_list)</span><br><span class="line"></span><br><span class="line">output = open(<span class="string">'data.pkl'</span>, <span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pickle.dump(obj, file, [,protocol])</span></span><br><span class="line"><span class="comment">#注解：将对象obj保存到文件file中去。</span></span><br><span class="line"><span class="comment">#protocol为序列化使用的协议版本</span></span><br><span class="line"><span class="comment">#0：ASCII协议</span></span><br><span class="line"><span class="comment">#1：老式的二进制协议</span></span><br><span class="line"><span class="comment">#2：2.3版本引入的新二进制协议，较以前的更高效。</span></span><br><span class="line">pickle.dump(data1, output)</span><br><span class="line">pickle.dump(selfref_list, output, <span class="number">2</span>)</span><br><span class="line">output.close()</span><br></pre></td></tr></table></figure></li><li><p>使用pickle模块从文件中重构python对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint, pickle</span><br><span class="line"></span><br><span class="line">pkl_file = open(<span class="string">'data.pkl'</span>, <span class="string">'rb'</span>)</span><br><span class="line">data1 = pickle.load(pkl_file)</span><br><span class="line">pprint.pprint(data1)</span><br><span class="line">data2 = pickle.load(pkl_file)</span><br><span class="line">pprint.pprint(data2)</span><br><span class="line">pkl_file.close()</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-yaml模块"><a href="#5-yaml模块" class="headerlink" title="5.yaml模块"></a>5.yaml模块</h4><ul><li><p>写入yaml文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">yaml_file = open(<span class="string">'test.yaml'</span>,<span class="string">'w'</span>)</span><br><span class="line">data = &#123;<span class="string">'user_info'</span>:&#123;<span class="string">'name'</span>:A, <span class="string">'age'</span>:<span class="number">17</span>&#125;&#125;</span><br><span class="line">yaml.dump(data,yaml_file)</span><br><span class="line"><span class="comment">#yaml_file.truncate     //清空yaml文件</span></span><br><span class="line">yaml_file.close()</span><br></pre></td></tr></table></figure></li><li><p>读取yaml文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">yaml_file = open(<span class="string">'test.yaml'</span>,<span class="string">'r'</span>)</span><br><span class="line">yaml.load(yaml_file)</span><br><span class="line">yaml_file.close()</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-optparser模块"><a href="#6-optparser模块" class="headerlink" title="6.optparser模块"></a>6.optparser模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line">usage = <span class="string">"myprog[ -f &lt;filename&gt;][-s &lt;xyz&gt;] arg1[,arg2..]"</span></span><br><span class="line">optParser = OptionParser(usage)</span><br><span class="line">optParser.add_option(<span class="string">"-f"</span>,<span class="string">"--file"</span>,action = <span class="string">"store"</span>,type=<span class="string">"string"</span>,dest = <span class="string">"fileName"</span>)</span><br><span class="line">ooptParser.add_option(<span class="string">"-v"</span>,<span class="string">"--vison"</span>, action=<span class="string">"store_false"</span>, dest=<span class="string">"verbose"</span>,default=<span class="string">'None'</span>,</span><br><span class="line">                     help=<span class="string">"make lots of noise [default]"</span>)</span><br><span class="line">fakeArgs = [<span class="string">'-f'</span>,<span class="string">'file.txt'</span>,<span class="string">'-v'</span>,<span class="string">'good luck to you'</span>, <span class="string">'arg2'</span>, <span class="string">'arge'</span>]  </span><br><span class="line">options, args = optParser.parse_args(fakeArgs)</span><br><span class="line"><span class="keyword">print</span> options.fileName</span><br><span class="line"><span class="keyword">print</span> options.verbose</span><br><span class="line"><span class="keyword">print</span> options</span><br><span class="line"><span class="keyword">print</span> args</span><br><span class="line"><span class="keyword">print</span> optParser.print_help()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python标准库。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python标准库03</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-stdmod03/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-stdmod03/</id>
    <published>2018-06-22T10:07:42.000Z</published>
    <updated>2018-06-22T10:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python标准库。<br><a id="more"></a></p><h4 id="1-shelve模块"><a href="#1-shelve模块" class="headerlink" title="1.shelve模块"></a>1.shelve模块</h4><p>写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"></span><br><span class="line">zhangsan = dict(zip([<span class="string">'name'</span>,<span class="string">'age'</span>],[<span class="string">'zhangsan'</span>,<span class="number">24</span>]))</span><br><span class="line">lisi = dict(zip([<span class="string">'name'</span>,<span class="string">'age'</span>],[<span class="string">'lisi'</span>,<span class="number">25</span>]))</span><br><span class="line"></span><br><span class="line">db = shelve.open(<span class="string">'shelveDict'</span>)</span><br><span class="line">db[<span class="string">'zhangsan'</span>] = zhangsan</span><br><span class="line">db[<span class="string">'lisi'</span>] = lisi</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></p><p>读：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"></span><br><span class="line">db = shelve.open(<span class="string">'shelveDict'</span>)</span><br><span class="line"><span class="keyword">print</span> db[<span class="string">'zhangsan'</span>]</span><br><span class="line"><span class="keyword">print</span> db[<span class="string">'lisi'</span>]</span><br><span class="line">db.close()</span><br><span class="line">修改：</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"></span><br><span class="line">db = shelve.open(<span class="string">'shelveDict'</span>)</span><br><span class="line">zhangsan = db[<span class="string">'zhangsan'</span>]</span><br><span class="line">zhangsan[<span class="string">'name'</span>] = <span class="string">'zhangsanfeng'</span></span><br><span class="line">db[<span class="string">'zhangsan'</span>] = zhangsan</span><br><span class="line"><span class="keyword">print</span> db[<span class="string">'zhangsan'</span>]</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></p><h4 id="2-httplib模块"><a href="#2-httplib模块" class="headerlink" title="2.httplib模块"></a>2.httplib模块</h4><p>GET请求:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestGETTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>   </span><br><span class="line">        <span class="comment">#self.body='&#123;"UserName":"Admin","Password":"693aa8d0806c532115637809a863b1a3","sessionID":""&#125;'</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"Referer"</span>: <span class="string">'192.168.1.1'</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate,sdch"</span>,</span><br><span class="line">            <span class="string">"Connection"</span>:<span class="string">"Keep-Alive"</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">http_get</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn=httplib.HTTPConnection(host=<span class="string">'192.168.1.1'</span>, port=<span class="number">80</span>, strict=<span class="keyword">False</span>, timeout=<span class="number">30</span>) </span><br><span class="line">        conn.request(method=<span class="string">'GET'</span>,url=<span class="string">'/cgi-bin/GetLoginStatus?sessionID=undefined'</span>, body=<span class="keyword">None</span>, headers=self.headers) </span><br><span class="line">        a = conn.getresponse().read() </span><br><span class="line">        <span class="keyword">print</span> a</span><br><span class="line"></span><br><span class="line">lianxi=HttpRequestGETTest()</span><br><span class="line">lianxi.http_get()</span><br></pre></td></tr></table></figure></p><p>POST请求:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestPOSTTest</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>   </span><br><span class="line">        self.body=<span class="string">'&#123;"UserName":"Admin","Password":"693aa8d0806c532115637809a863b1a3","sessionID":""&#125;'</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"Referer"</span>: <span class="string">'192.168.1.1'</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate,sdch"</span>,</span><br><span class="line">            <span class="string">"Connection"</span>:<span class="string">"Keep-Alive"</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">http_post</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn=httplib.HTTPConnection(host=<span class="string">'192.168.1.1'</span>, port=<span class="number">80</span>, strict=<span class="keyword">False</span>, timeout=<span class="number">120</span>) </span><br><span class="line">        conn.request(method=<span class="string">'POST'</span>,url=<span class="string">'/cgi-bin/Login'</span>, body=self.body, headers=self.headers) </span><br><span class="line">        self.session_id = conn.getresponse().read() </span><br><span class="line">        <span class="keyword">print</span> self.session_id</span><br><span class="line"></span><br><span class="line">lianxi=HttpRequestPOSTTest()</span><br><span class="line">lianxi.http_post()</span><br></pre></td></tr></table></figure></p><h4 id="3-ftplib模块"><a href="#3-ftplib模块" class="headerlink" title="3.ftplib模块"></a>3.ftplib模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ftpconnect</span><span class="params">(host, username, password)</span>:</span></span><br><span class="line">    ftp = FTP()</span><br><span class="line">    <span class="comment">#ftp.set_debuglevel(2)         #打开调试级别2，显示详细信息</span></span><br><span class="line">    ftp.connect(host, <span class="number">21</span>)          <span class="comment">#连接</span></span><br><span class="line">    ftp.login(username, password)  <span class="comment">#登录，如果匿名登录则用空串代替即可</span></span><br><span class="line">    <span class="keyword">return</span> ftp</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadfile</span><span class="params">(ftp, remotepath, localpath)</span>:</span></span><br><span class="line">    bufsize = <span class="number">1024</span>                <span class="comment">#设置缓冲块大小</span></span><br><span class="line">    fp = open(localpath,<span class="string">'wb'</span>)     <span class="comment">#以写模式在本地打开文件</span></span><br><span class="line">    ftp.retrbinary(<span class="string">'RETR '</span> + remotepath, fp.write, bufsize) <span class="comment">#接收服务器上文件并写入本地文件</span></span><br><span class="line">    ftp.set_debuglevel(<span class="number">0</span>)         <span class="comment">#关闭调试</span></span><br><span class="line">    fp.close()                    <span class="comment">#关闭文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadfile</span><span class="params">(ftp, remotepath, localpath)</span>:</span></span><br><span class="line">    bufsize = <span class="number">1024</span></span><br><span class="line">    fp = open(localpath, <span class="string">'rb'</span>)</span><br><span class="line">    ftp.storbinary(<span class="string">'STOR '</span>+ remotepath , fp, bufsize) <span class="comment">#上传文件</span></span><br><span class="line">    ftp.set_debuglevel(<span class="number">0</span>)</span><br><span class="line">    fp.close()                                    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    ftp = ftpconnect(<span class="string">"******"</span>, <span class="string">"***"</span>, <span class="string">"***"</span>)</span><br><span class="line">    downloadfile(ftp, <span class="string">"***"</span>, <span class="string">"***"</span>)</span><br><span class="line">    uploadfile(ftp, <span class="string">"***"</span>, <span class="string">"***"</span>)</span><br><span class="line"></span><br><span class="line">    ftp.quit()</span><br></pre></td></tr></table></figure><h4 id="4-urllib模块"><a href="#4-urllib模块" class="headerlink" title="4.urllib模块"></a>4.urllib模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import urllib</span><br><span class="line">&gt;&gt;&gt; f = urllib.urlopen(<span class="string">'http://www.qq.com'</span>)</span><br><span class="line">&gt;&gt;&gt; f.getcode()</span><br><span class="line">200</span><br><span class="line">&gt;&gt;&gt; f.geturl()</span><br><span class="line"><span class="string">'http://www.qq.com'</span></span><br><span class="line">&gt;&gt;&gt; f.headers</span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; filename = urllib.urlretrieve(<span class="string">'http://www.google.com.hk/'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(filename)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">'tuple'</span>&gt;</span><br><span class="line">&gt;&gt;&gt; filename[0]</span><br><span class="line"><span class="string">'/tmp/tmp8eVLjq'</span></span><br><span class="line">&gt;&gt;&gt; filename[1]</span><br><span class="line">&lt;httplib.HTTPMessage instance at 0xb6a363ec&gt;</span><br><span class="line">&gt;&gt;&gt; urllib.urlcleanup()</span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;filename=urllib.urlretrieve(<span class="string">'http://www.qq.com'</span>,filename=<span class="string">'./google.html'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(filename)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">'tuple'</span>&gt;</span><br><span class="line">&gt;&gt;&gt; filename[0]</span><br><span class="line"><span class="string">'/home/dzhwen/python\xe6\x96\x87\xe4\xbb\xb6/Homework/urllib/google.html'</span></span><br><span class="line">&gt;&gt;&gt; filename[1]</span><br><span class="line">&lt;httplib.HTTPMessage instance at 0xb6e2c38c&gt;</span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; urllib.quote(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="string">'http%3A//www.baidu.com'</span></span><br><span class="line">&gt;&gt;&gt; urllib.quote_plus(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="string">'http%3A%2F%2Fwww.baidu.com'</span></span><br><span class="line"></span><br><span class="line">------------------------------华丽的分割线-----------------------------</span><br><span class="line"></span><br><span class="line">GET方法：</span><br><span class="line">&gt;&gt;&gt; import urllib</span><br><span class="line">&gt;&gt;&gt; params=urllib.urlencode(&#123;<span class="string">'spam'</span>:1,<span class="string">'eggs'</span>:2,<span class="string">'bacon'</span>:0&#125;)</span><br><span class="line">&gt;&gt;&gt; params</span><br><span class="line"><span class="string">'eggs=2&amp;bacon=0&amp;spam=1'</span></span><br><span class="line">&gt;&gt;&gt; f=urllib.urlopen(<span class="string">"http://python.org/query?%s"</span> % params)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span> f.read()</span><br><span class="line">POST方法：</span><br><span class="line">&gt;&gt;&gt; import urllib</span><br><span class="line">&gt;&gt;&gt; parmas = urllib.urlencode(&#123;<span class="string">'spam'</span>:1,<span class="string">'eggs'</span>:2,<span class="string">'bacon'</span>:0&#125;)</span><br><span class="line">&gt;&gt;&gt; f=urllib.urlopen(<span class="string">"http://python.org/query"</span>,parmas)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br></pre></td></tr></table></figure><h4 id="5-hashlib模块"><a href="#5-hashlib模块" class="headerlink" title="5.hashlib模块"></a>5.hashlib模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">rb = open(<span class="string">'/root/test.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">rb_md5 = hashlib.md5()</span><br><span class="line">rb_md5.update(rb.read())</span><br><span class="line">rb_md5.hexdigest()</span><br></pre></td></tr></table></figure><h4 id="6-tarfile模块"><a href="#6-tarfile模块" class="headerlink" title="6.tarfile模块"></a>6.tarfile模块</h4><ul><li><p>使用tarfile压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建压缩包名</span></span><br><span class="line">tar = tarfile.open(<span class="string">"/tmp/tartest.tar.gz"</span>,<span class="string">"w:gz"</span>)</span><br><span class="line"><span class="comment">#创建压缩包</span></span><br><span class="line"><span class="keyword">for</span> root,dir,files <span class="keyword">in</span> os.walk(<span class="string">"/tmp/tartest"</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        fullpath = os.path.join(root,file)</span><br><span class="line">        tar.add(fullpath)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure></li><li><p>使用tarfile解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> tarfile  </span><br><span class="line">tar = tarfile.open(<span class="string">"sample.tar.gz"</span>)  </span><br><span class="line">tar.extractall()  </span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python标准库。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python标准库02</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-stdmod02/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-stdmod02/</id>
    <published>2018-06-22T09:56:33.000Z</published>
    <updated>2018-06-22T10:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python标准库。<br><a id="more"></a></p><h4 id="1-re模块"><a href="#1-re模块" class="headerlink" title="1.re模块"></a>1.re模块</h4><p>re模块中常用功能函数<br>①compile()<br>编译正则表达式模式，返回一个对象的模式。（可以把那些常用的正则表达式编译成正则表达式对象，这样可以提高一点效率。）<br>格式：<br>re.compile(pattern,flags=0)<br>pattern: 编译时用的表达式字符串。<br>flags 编译标志位，用于修改正则表达式的匹配方式，如：是否区分大小写，多行匹配等。常用的flags有：<br>|标志|含义|<br>|:-|:-|<br>|re.S(DOTALL)|使.匹配包括换行在内的所有字符<br>|re.I(IGNORECASE)|使匹配对大小写不敏感<br>|re.L(LOCALE)|做本地化识别（locale-aware)匹配，法语等<br>|re.M(MULTILINE)|多行匹配，影响^和$<br>|re.X(VERBOSE)|该标志通过给予更灵活的格式以便将正则表达式写得更易于理解<br>|re.U|根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">tt = <span class="string">"Tina is a good girl, she is cool, clever, and so on..."</span></span><br><span class="line">rr = re.compile(<span class="string">r'\w*oo\w*'</span>)</span><br><span class="line">print(rr.findall(tt))   <span class="comment">#查找所有包含'oo'的单词</span></span><br><span class="line">执行结果如下：</span><br><span class="line">[<span class="string">'good'</span>, <span class="string">'cool'</span>]</span><br></pre></td></tr></table></figure><p>②　match()<br>决定RE是否在字符串刚开始的位置匹配。//注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’<br>格式：<br>re.match(pattern, string, flags=0)<br>print(re.match(‘com’,’com<a href="http://www.runcomoob&#39;).group()" target="_blank" rel="noopener">www.runcomoob&#39;).group()</a>)<br>print(re.match(‘com’,’Com<a href="http://www.runcomoob&#39;,re.I).group()" target="_blank" rel="noopener">www.runcomoob&#39;,re.I).group()</a>)<br>执行结果如下：<br>com<br>com</p><p>③　search()<br>格式：<br>re.search(pattern, string, flags=0)<br>re.search函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回，如果字符串没有匹配，则返回None。<br>    print(re.search(‘\dcom’,’<a href="http://www.4comrunoob.5com&#39;).group()" target="_blank" rel="noopener">www.4comrunoob.5com&#39;).group()</a>)<br>    执行结果如下：<br>    4com<br><em>注：match和search一旦匹配成功，就是一个match object对象，而match object对象有以下方法：<br>group() 返回被 RE 匹配的字符串<br>start() 返回匹配开始的位置<br>end() 返回匹配结束的位置<br>span() 返回一个元组包含匹配 (开始,结束) 的位置<br>group() 返回re整体匹配的字符串，可以一次输入多个组号，对应组号匹配的字符串。<br>group()返回re整体匹配的字符串，<br>    b. group (n,m) 返回组号为n，m所匹配的字符串，如果组号不存在，则返回indexError异常<br>    c.groups()  groups()方法返回一个包含正则表达式中所有小组字符串的元组，从 1 到所含的小组号，通常groups()不需要参数，返回一个元组，元组中的元就是正则表达式中定义的组。<br>import re<br>a = “123abc456”<br> print(re.search(“([0-9]</em>)([a-z]<em>)([0-9]</em>)”,a).group(0))   #123abc456,返回整体<br> print(re.search(“([0-9]<em>)([a-z]</em>)([0-9]<em>)”,a).group(1))   #123<br> print(re.search(“([0-9]</em>)([a-z]<em>)([0-9]</em>)”,a).group(2))   #abc<br> print(re.search(“([0-9]<em>)([a-z]</em>)([0-9]*)”,a).group(3))   #456</p><p>###group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分，group(3) 列出第三个括号匹配部分。###<br>④　findall()<br>re.findall遍历匹配，可以获取字符串中所有匹配的字符串，返回一个列表。<br>格式：<br>re.findall(pattern, string, flags=0)<br>p = re.compile(r’\d+’)<br>print(p.findall(‘o1n2m3k4’))<br>执行结果如下：<br>[‘1’, ‘2’, ‘3’, ‘4’]<br>import re<br>tt = “Tina is a good girl, she is cool, clever, and so on…”<br>rr = re.compile(r’\w<em>oo\w</em>‘)<br>print(rr.findall(tt))<br>print(re.findall(r’(\w)*oo(\w)’,tt))#()表示子表达式<br>执行结果如下：<br>[‘good’, ‘cool’]<br>[(‘g’, ‘d’), (‘c’, ‘l’)]<br>⑤　finditer()<br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。找到 RE 匹配的所有子串，并把它们作为一个迭代器返回。<br>格式：<br>re.finditer(pattern, string, flags=0)<br>iter = re.finditer(r’\d+’,’12 drumm44ers drumming, 11 … 10 …’)<br>for i in iter:<br>    print(i)<br>    print(i.group())<br>    print(i.span())<br>执行结果如下：</p><p>&lt;_sre.SRE_Match object; span=(0, 2), match=’12’&gt;<br>(0, 2)</p><p>&lt;_sre.SRE_Match object; span=(8, 10), match=’44’&gt;<br>(8, 10)</p><p>&lt;_sre.SRE_Match object; span=(24, 26), match=’11’&gt;<br>(24, 26)</p><p>&lt;_sre.SRE_Match object; span=(31, 33), match=’10’&gt;<br>(31, 33)<br>⑥　split()<br>按照能够匹配的子串将string分割后返回列表。<br>可以使用re.split来分割字符串，如：re.split(r’\s+’, text)；将字符串按空格分割成一个单词列表。<br>格式：<br>re.split(pattern, string[, maxsplit])<br>maxsplit用于指定最大分割次数，不指定将全部分割。</p><p>print(re.split(‘\d+’,’one1two2three3four4five5’))<br>执行结果如下：<br>[‘one’, ‘two’, ‘three’, ‘four’, ‘five’, ‘’]<br>⑦　sub()<br>使用re替换string中每一个匹配的子串后返回替换后的字符串。<br>格式：<br>re.sub(pattern, repl, string, count)<br>import re<br>text = “JGood is a handsome boy, he is cool, clever, and so on…”<br>print(re.sub(r’\s+’, ‘-‘, text))<br>执行结果如下：<br>JGood-is-a-handsome-boy,-he-is-cool,-clever,-and-so-on…<br>其中第二个函数是替换后的字符串；本例中为’-‘<br>第四个参数指替换个数。默认为0，表示每个匹配项都替换。<br>re.sub还允许使用函数对匹配项的替换进行复杂的处理。<br>如：re.sub(r’\s’, lambda m: ‘[‘ + m.group(0) + ‘]’, text, 0)；将字符串中的空格’ ‘替换为’[ ]’。<br>import re<br>text = “JGood is a handsome boy, he is cool, clever, and so on…”<br>print(re.sub(r’\s+’, lambda m:’[‘+m.group(0)+’]’, text,0))<br>执行结果如下：<br>JGood[ ]is[ ]a[ ]handsome[ ]boy,[ ]he[ ]is[ ]cool,[ ]clever,[ ]and[ ]so[ ]on…<br>⑧　subn()<br>返回替换次数<br>格式：<br>subn(pattern, repl, string, count=0, flags=0)<br>print(re.subn(‘[1-2]’,’A’,’123456abcdef’))<br>print(re.sub(“g.t”,”have”,’I get A,  I got B ,I gut C’))<br>print(re.subn(“g.t”,”have”,’I get A,  I got B ,I gut C’))<br>执行结果如下：<br>(‘AA3456abcdef’, 2)<br>I have A,  I have B ,I have C<br>(‘I have A,  I have B ,I have C’, 3)</p><h4 id="2-time模块"><a href="#2-time模块" class="headerlink" title="2.time模块"></a>2.time模块</h4><p>在Python中，通常有这几种方式来表示时间：1）时间戳 2）格式化的时间字符串 3）元组（struct_time）共九个元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.time()//返回unix时间戳</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.localtime()//用一个元组装起来的<span class="number">9</span>组数字处理时间</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.sleep(<span class="number">5</span>)//延时函数</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.asctime( time.localtime() ) //获取可读的时间模式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.localtime())</span><br></pre></td></tr></table></figure></p><h4 id="3-random模块"><a href="#3-random模块" class="headerlink" title="3.random模块"></a>3.random模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random//生成一个<span class="number">0</span>到<span class="number">1</span>的随机符点数: <span class="number">0</span> &lt;= n &lt; <span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">10</span>,<span class="number">20</span>)//生成的随机数n: a &lt;= n &lt;= b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">20</span>)//生成的随机数n: a &lt;= n &lt;= b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="string">"JGood"</span>,<span class="string">"is"</span>, <span class="string">"a"</span>,<span class="string">"handsome"</span>, <span class="string">"boy"</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = [<span class="string">"Python"</span>,<span class="string">"is"</span>, <span class="string">"powerful"</span>,<span class="string">"simple"</span>, <span class="string">"and so on..."</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(p)//打乱</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> p</span><br><span class="line">[<span class="string">'simple'</span>, <span class="string">'and so on...'</span>, <span class="string">'is'</span>, <span class="string">'powerful'</span>, <span class="string">'Python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>slice = random.sample(list, <span class="number">5</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> slice</span><br><span class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h4 id="4-csv模块"><a href="#4-csv模块" class="headerlink" title="4.csv模块"></a>4.csv模块</h4><p>读csv文件：<br>语法：reader(csvfile, dialect=’excel’, **fmtparams)</p><blockquote><blockquote><blockquote><p>import csv<br>reader=csv.reader(open(‘foo.csv’,’rb’))<br>for item in reader:<br>…     print item<br>写csv文件：<br>import csv<br>writer=csv.writer(open(‘foo.csv’,’wb+’))<br>writer.writerow([‘tianqi’,’26’,’79’])<br>字典方式读写：</p></blockquote></blockquote></blockquote><h1 id="读"><a href="#读" class="headerlink" title="读"></a>读</h1><blockquote><blockquote><blockquote><p>import csv<br>with open(‘names.csv’) as csvfile:<br>…     reader = csv.DictReader(csvfile)<br>…     for row in reader:<br>…         print(row[‘first_name’], row[‘last_name’])<br>…<br>Baked Beans<br>Lovely Spam<br>Wonderful Spam</p></blockquote></blockquote></blockquote><h1 id="写"><a href="#写" class="headerlink" title="写"></a>写</h1><p>import csv<br>with open(‘names.csv’, ‘w’) as csvfile:<br>    fieldnames = [‘first_name’, ‘last_name’]<br>    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</p><pre><code>writer.writeheader()writer.writerow({&apos;first_name&apos;: &apos;Baked&apos;, &apos;last_name&apos;: &apos;Beans&apos;})writer.writerow({&apos;first_name&apos;: &apos;Lovely&apos;, &apos;last_name&apos;: &apos;Spam&apos;})writer.writerow({&apos;first_name&apos;: &apos;Wonderful&apos;, &apos;last_name&apos;: &apos;Spam&apos;})</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python标准库。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python标准库01</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-stdmod01/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-stdmod01/</id>
    <published>2018-06-22T09:41:25.000Z</published>
    <updated>2018-06-22T09:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python标准库。<br><a id="more"></a></p><h4 id="1-os模块"><a href="#1-os模块" class="headerlink" title="1.os模块"></a>1.os模块</h4><ul><li>操作文件<br>以下内容在shell终端操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># touch 1.txt//创建文件</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">1.txt</span><br><span class="line"><span class="comment"># echo "os module" &gt; 1.txt//写入内容</span></span><br><span class="line"><span class="comment"># cat 1.txt </span></span><br><span class="line">os module</span><br></pre></td></tr></table></figure></li></ul><p>以下是python终端中操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python//进入python命令行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os//导入os模块</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(os)//获得os模块的帮助</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">'1.txt'</span>,<span class="string">'2.txt'</span>)//将<span class="number">1.</span>txt重命名为<span class="number">2.</span>txt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">'2.txt'</span>)//删除<span class="number">2.</span>txt文件</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mknod(<span class="string">'test.txt'</span>)//创建一个空文件</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.stat(<span class="string">'test.txt'</span>)//获取文件属性</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chmod(<span class="string">'test.txt'</span>,<span class="number">0666</span>)//修改文件权限</span><br></pre></td></tr></table></figure></p><ul><li><p>操作目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()//获取当前目录</span><br><span class="line"><span class="string">'/python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'/python'</span>)//列出文件和目录</span><br><span class="line">[<span class="string">'test.txt'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">'foo'</span>)//创建目录</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'.'</span>)</span><br><span class="line">[<span class="string">'test.txt'</span>, <span class="string">'foo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'foo'</span>)//删除目录</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">'foo'</span>)//重新创建目录</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'foo'</span>)//进入foo目录</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()//获取当前目录</span><br><span class="line"><span class="string">'/python/foo'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.makedirs(<span class="string">'a/b/c'</span>)//创建多级目录</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.removedirs(<span class="string">'a/b/c'</span>)//删除多级目录</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()//当前目录</span><br><span class="line"><span class="string">'/python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'.'</span>)//当前目录文件列表</span><br><span class="line">[<span class="string">'test.txt'</span>, <span class="string">'foo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'foo'</span>)//进入foo目录</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mknod(<span class="string">'1.txt'</span>) //创建文件，此时foo目录不为空</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'..'</span>)//返回上一级目录</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'foo'</span>)//使用rmdir删除会报错，怎么删除？</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.rmtree(<span class="string">'foo'</span>)//删除非空目录</span><br></pre></td></tr></table></figure></li><li><p>系统相关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.sep//操作系统特定的路径分隔符</span><br><span class="line"><span class="string">'/'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name//正在使用的工作平台，Windows是<span class="string">'nt'</span>，Linux/Unix是<span class="string">'posix'</span>。</span><br><span class="line"><span class="string">'posix'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getenv(<span class="string">'PATH'</span>)//读取和设置环境变量:os.getenv() 与os.putenv()</span><br><span class="line"><span class="string">'/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep//当前平台使用的行终止符</span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">'ls -l'</span>)//调用系统命令</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.pathsep</span><br><span class="line"><span class="string">':'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.extsep</span><br><span class="line"><span class="string">'.'</span></span><br></pre></td></tr></table></figure></li><li><p>os.path模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 23 16:30 foo</span><br><span class="line">-rw-rw-rw- 1 root root    0 Oct 23 13:15 test.txt</span><br><span class="line">//当前目录下一个目录和一个文件</span><br><span class="line"><span class="comment"># python//进入python终端</span></span><br><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; os.path.isfile(<span class="string">'test.txt'</span>)//判断是不是文件</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.isdir(<span class="string">'foo'</span>)//判断是不是目录</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.isdir(<span class="string">'test.txt'</span>)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; os.path.split(<span class="string">'/python/foo'</span>)//返回路径的目录和文件名</span><br><span class="line">(<span class="string">'/python'</span>, <span class="string">'foo'</span>)</span><br><span class="line">&gt;&gt;&gt; os.path.split(<span class="string">'/python/foo/'</span>)</span><br><span class="line">(<span class="string">'/python/foo'</span>, <span class="string">''</span>)</span><br><span class="line">&gt;&gt;&gt; os.path.getsize(<span class="string">'test.txt'</span>)//返回文件大小，如果为目录，返回0</span><br><span class="line">1551</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(<span class="string">'.'</span>)//获得绝对路径</span><br><span class="line"><span class="string">'/python'</span></span><br><span class="line">&gt;&gt;&gt; os.path.join(<span class="string">'/python'</span>,<span class="string">'test.txt'</span>)//连接目录和文件名</span><br><span class="line"><span class="string">'/python/test.txt'</span></span><br><span class="line">&gt;&gt;&gt; os.path.basename(<span class="string">'/usr/bin/env'</span>)//返回文件名</span><br><span class="line"><span class="string">'env'</span></span><br><span class="line">&gt;&gt;&gt; os.path.dirname(<span class="string">'/usr/bin/env'</span>)//返回文件路径</span><br><span class="line"><span class="string">'/usr/bin'</span></span><br><span class="line">&gt;&gt;&gt; os.path.splitext(<span class="string">'test.txt'</span>)//分离文件名和扩展名</span><br><span class="line">(<span class="string">'test'</span>, <span class="string">'.txt'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-shutil模块"><a href="#2-shutil模块" class="headerlink" title="2.shutil模块"></a>2.shutil模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; shutil.copyfile(<span class="string">'/root/nginx.conf'</span>,<span class="string">'./nginx.conf'</span>)//复制文件</span><br><span class="line">&gt;&gt;&gt; shutil.copy(<span class="string">'/root/nginx.conf'</span>,<span class="string">'./test.txt'</span>)//复制数据</span><br><span class="line">&gt;&gt;&gt; shutil.copytree(<span class="string">'/opt/bar'</span>,<span class="string">'/python/bar'</span>)//递归复制文件夹</span><br><span class="line">&gt;&gt;&gt; shutil.move(<span class="string">'/python/bar'</span>,<span class="string">'/root/'</span>)//移动目录</span><br><span class="line">&gt;&gt;&gt; shutil.rmtree(<span class="string">'/root/bar'</span>)//删除目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 23 16:30 foo</span><br><span class="line">-rw-rw-rw- 1 root root 1258 Oct 23 16:51 nginx.conf</span><br><span class="line">-rw-r--r-- 1 root root 1258 Oct 23 16:52 test.txt</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import shutil</span><br><span class="line">&gt;&gt;&gt; shutil.copymode(<span class="string">'nginx.conf'</span>,<span class="string">'test.txt'</span>)//复制权限</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 23 16:30 foo</span><br><span class="line">-rw-rw-rw- 1 root root 1258 Oct 23 16:51 nginx.conf</span><br><span class="line">-rw-rw-rw- 1 root root 1258 Oct 23 16:52 test.txt</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; shutil.copystat(<span class="string">'nginx.conf'</span>,<span class="string">'test.txt'</span>)//复制属性</span><br><span class="line">&gt;&gt;&gt; shutil.copy2(<span class="string">'nginx.conf'</span>,<span class="string">'test.txt'</span>)//先copyfile后copystat</span><br><span class="line"></span><br><span class="line">make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,dry_run=0, owner=None, group=None, logger=None)  <span class="comment">#压缩打包</span></span><br><span class="line">base_name：    压缩打包后的文件名或者路径名</span><br><span class="line">format：          压缩或者打包格式    <span class="string">"zip"</span>, <span class="string">"tar"</span>, <span class="string">"bztar"</span>or <span class="string">"gztar"</span></span><br><span class="line">root_dir :         将哪个目录或者文件打包（也就是源文件）</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; shutil.make_archive(<span class="string">'python'</span>,<span class="string">'gztar'</span>,root_dir=<span class="string">'/python/'</span>)   </span><br><span class="line"><span class="string">'/python/python.tar.gz'</span></span><br><span class="line"></span><br><span class="line">shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：</span><br><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">'laxi.zip'</span>, <span class="string">'w'</span>)</span><br><span class="line">z.write(<span class="string">'a.log'</span>)</span><br><span class="line">z.write(<span class="string">'data.data'</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">'laxi.zip'</span>, <span class="string">'r'</span>)</span><br><span class="line">z.extractall()</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line">import tarfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar = tarfile.open(<span class="string">'your.tar'</span>,<span class="string">'w'</span>)</span><br><span class="line">tar.add(<span class="string">'/Users/wupeiqi/PycharmProjects/bbs2.log'</span>, arcname=<span class="string">'bbs2.log'</span>)</span><br><span class="line">tar.add(<span class="string">'/Users/wupeiqi/PycharmProjects/cmdb.log'</span>, arcname=<span class="string">'cmdb.log'</span>)</span><br><span class="line">tar.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar = tarfile.open(<span class="string">'your.tar'</span>,<span class="string">'r'</span>)</span><br><span class="line">tar.extractall()  <span class="comment"># 可设置解压地址</span></span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><h4 id="3-sys模块"><a href="#3-sys模块" class="headerlink" title="3.sys模块"></a>3.sys模块</h4><p>sys.argv<br>功能：在外部向程序内部传递参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat argv.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">print</span> sys.argv[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># python argv.py aa </span></span><br><span class="line">argv.py</span><br><span class="line">aa</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat argv.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)&gt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"传递了"</span>,len(sys.argv)<span class="number">-1</span>,<span class="string">"个参数"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">print</span> arg</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"没有传参"</span></span><br><span class="line"><span class="comment"># python argv.py </span></span><br><span class="line">没有传参</span><br><span class="line"><span class="comment"># python argv.py 11 22 33 aa bb cc</span></span><br><span class="line">传递了 <span class="number">6</span> 个参数</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line"></span><br><span class="line">sys.exit(n)</span><br><span class="line">功能：解释器自动退出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefaultencoding()//获取系统当前编码</span><br><span class="line"><span class="string">'ascii'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getfilesystemencoding()//获取文件系统使用编码方式</span><br><span class="line"><span class="string">'UTF-8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path//获取指定模块搜索路径的集合</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform//获取当前系统平台</span><br><span class="line"><span class="string">'linux2'</span></span><br><span class="line"></span><br><span class="line">sys.stdin,sys.stdout,sys.stderr //标准I/O</span><br></pre></td></tr></table></figure></p><h4 id="4-platform模块"><a href="#4-platform模块" class="headerlink" title="4.platform模块"></a>4.platform模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> platform</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.platform()//获取操作系统名称及版本号</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.version()//获取操作系统版本号</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.architecture()//获取操作系统的位数</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.machine()//计算机类型</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.node()//计算机的网络名称</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.processor()//计算机处理器信息</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>platform.uname()//包含上面所有的信息汇总</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python标准库。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化运维03</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-devops03/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-devops03/</id>
    <published>2018-06-22T09:14:31.000Z</published>
    <updated>2018-06-22T09:25:06.241Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python自动化运维的常用模块，比如：paramiko、Fabric等。<br><a id="more"></a></p><h4 id="1-paramiko模块"><a href="#1-paramiko模块" class="headerlink" title="1. paramiko模块"></a>1. paramiko模块</h4><ul><li><p>基于用户名和密码的 sshclient 方式登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">host=<span class="string">'123.20.62.15'</span></span><br><span class="line">port=<span class="number">22</span></span><br><span class="line">username=<span class="string">'root'</span></span><br><span class="line">password=<span class="string">'your pass'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">paramiko.util.log_to_file(<span class="string">'paramiko.log'</span>)</span><br><span class="line">ssh=paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(host,port,username,password)</span><br><span class="line">stdin,stdout,stderr=ssh.exec_command(<span class="string">'ifconfig'</span>)</span><br><span class="line"><span class="keyword">print</span> stdout.read()</span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure></li><li><p>基于用户名和密码的 transport 方式登录<br>示例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">host=<span class="string">'123.20.62.15'</span></span><br><span class="line">port=<span class="number">22</span></span><br><span class="line">username=<span class="string">'root'</span></span><br><span class="line">password=<span class="string">'your pass'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">trans=paramiko.Transport(host,port)</span><br><span class="line">trans.connect(username=username,password=password)</span><br><span class="line"></span><br><span class="line">ssh=paramiko.SSHClient()</span><br><span class="line">ssh._transport=trans</span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'df -hl'</span>)</span><br><span class="line">print(stdout.read().decode())</span><br><span class="line">trans.close()</span><br></pre></td></tr></table></figure></li></ul><p>示例2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">host=<span class="string">'123.20.62.15'</span></span><br><span class="line">port=<span class="number">22</span></span><br><span class="line">username=<span class="string">'root'</span></span><br><span class="line">password=<span class="string">'your pass'</span></span><br><span class="line">dir_path=<span class="string">'/root/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">trans=paramiko.Transport(host,port)</span><br><span class="line">trans.connect(username=username,password=password)</span><br><span class="line"></span><br><span class="line">sftp=paramiko.SFTPClient.from_transport(trans)</span><br><span class="line">files=sftp.listdir(dir_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line"><span class="keyword">print</span> f</span><br><span class="line">sftp.get(os.path.join(dir_path,f),f)</span><br><span class="line"></span><br><span class="line">trans.close()</span><br></pre></td></tr></table></figure></p><ul><li><p>基于公钥密钥的 SSHClient 方式登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地的RSA私钥文件,如果建立密钥对时设置的有密码，password为设定的密码，如无不用指定password参数</span></span><br><span class="line">pkey = paramiko.RSAKey.from_private_key_file(<span class="string">'/home/super/.ssh/id_rsa'</span>, password=<span class="string">'12345'</span>)</span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.connect(hostname=<span class="string">'192.168.2.129'</span>,</span><br><span class="line">            port=<span class="number">22</span>,</span><br><span class="line">            username=<span class="string">'super'</span>,</span><br><span class="line">            pkey=pkey)</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'df -hl'</span>)</span><br><span class="line"><span class="comment"># 结果放到stdout中，如果有错误将放到stderr中</span></span><br><span class="line">print(stdout.read().decode())</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure></li><li><p>基于密钥的 Transport 方式登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地的RSA私钥文件,如果建立密钥对时设置的有密码，password为设定的密码，如无不用指定password参数</span></span><br><span class="line">pkey = paramiko.RSAKey.from_private_key_file(<span class="string">'/home/super/.ssh/id_rsa'</span>, password=<span class="string">'12345'</span>)</span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">trans = paramiko.Transport((<span class="string">'192.168.2.129'</span>, <span class="number">22</span>))</span><br><span class="line">trans.connect(username=<span class="string">'super'</span>, pkey=pkey)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将sshclient的对象的transport指定为以上的trans</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = trans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，和传统方法一样</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'df -hl'</span>)</span><br><span class="line">print(stdout.read().decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">trans.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#################### 传文件 SFTP ##################</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个trans对象# 实例化一个transport对象</span></span><br><span class="line">trans = paramiko.Transport((<span class="string">'192.168.2.129'</span>, <span class="number">22</span>))</span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">trans.connect(username=<span class="string">'super'</span>, password=<span class="string">'super'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 sftp对象,指定连接的通道</span></span><br><span class="line">sftp = paramiko.SFTPClient.from_transport(trans)</span><br><span class="line"><span class="comment"># 发送文件</span></span><br><span class="line">sftp.put(localpath=<span class="string">'/tmp/11.txt'</span>, remotepath=<span class="string">'/tmp/22.txt'</span>)</span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="comment"># sftp.get(remotepath, localpath)</span></span><br><span class="line">trans.close()</span><br></pre></td></tr></table></figure></li><li><p>实现输入命令立马返回结果的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个socket</span></span><br><span class="line">trans = paramiko.Transport((<span class="string">'192.168.2.129'</span>, <span class="number">22</span>))</span><br><span class="line"><span class="comment"># 启动一个客户端</span></span><br><span class="line">trans.start_client()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用rsa密钥登录的话</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">default_key_file = os.path.join(os.environ['HOME'], '.ssh', 'id_rsa')</span></span><br><span class="line"><span class="string">prikey = paramiko.RSAKey.from_private_key_file(default_key_file)</span></span><br><span class="line"><span class="string">trans.auth_publickey(username='super', key=prikey)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 如果使用用户名和密码登录</span></span><br><span class="line">trans.auth_password(username=<span class="string">'super'</span>, password=<span class="string">'super'</span>)</span><br><span class="line"><span class="comment"># 打开一个通道</span></span><br><span class="line">channel = trans.open_session()</span><br><span class="line"><span class="comment"># 获取终端</span></span><br><span class="line">channel.get_pty()</span><br><span class="line"><span class="comment"># 激活终端，这样就可以登录到终端了，就和我们用类似于xshell登录系统一样</span></span><br><span class="line">channel.invoke_shell()</span><br><span class="line"><span class="comment"># 下面就可以执行你所有的操作，用select实现</span></span><br><span class="line"><span class="comment"># 对输入终端sys.stdin和 通道进行监控,</span></span><br><span class="line"><span class="comment"># 当用户在终端输入命令后，将命令交给channel通道，这个时候sys.stdin就发生变化，select就可以感知</span></span><br><span class="line"><span class="comment"># channel的发送命令、获取结果过程其实就是一个socket的发送和接受信息的过程</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    readlist, writelist, errlist = select.select([channel, sys.stdin,], [], [])</span><br><span class="line">    <span class="comment"># 如果是用户输入命令了,sys.stdin发生变化</span></span><br><span class="line">    <span class="keyword">if</span> sys.stdin <span class="keyword">in</span> readlist:</span><br><span class="line">        <span class="comment"># 获取输入的内容</span></span><br><span class="line">        input_cmd = sys.stdin.read(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 将命令发送给服务器</span></span><br><span class="line">        channel.sendall(input_cmd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 服务器返回了结果,channel通道接受到结果,发生变化 select感知到</span></span><br><span class="line">    <span class="keyword">if</span> channel <span class="keyword">in</span> readlist:</span><br><span class="line">        <span class="comment"># 获取结果</span></span><br><span class="line">        result = channel.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 断开连接后退出</span></span><br><span class="line">        <span class="keyword">if</span> len(result) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"\r\n**** EOF **** \r\n"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 输出到屏幕</span></span><br><span class="line">        sys.stdout.write(result.decode())</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭通道</span></span><br><span class="line">channel.close()</span><br><span class="line"><span class="comment"># 关闭链接</span></span><br><span class="line">trans.close()</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-Python运维管理组件Fabric"><a href="#2-Python运维管理组件Fabric" class="headerlink" title="2. Python运维管理组件Fabric"></a>2. Python运维管理组件Fabric</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录用户和主机名：</span></span><br><span class="line">env.user = <span class="string">'root'</span></span><br><span class="line"></span><br><span class="line">env.password=<span class="string">'xxxxx'</span></span><br><span class="line">env.hosts = [<span class="string">'192.168.0.1'</span>,<span class="string">'192.168.0.2'</span>] <span class="comment"># 如果有多个主机，fabric会自动依次部署</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">' 定义一个pack任务 '</span></span><br><span class="line">    <span class="comment"># 打一个tar包：</span></span><br><span class="line">    tar_files = [<span class="string">'*.py'</span>, <span class="string">'static/*'</span>, <span class="string">'templates/*'</span>, <span class="string">'favicon.ico'</span>]</span><br><span class="line">    local(<span class="string">'rm -f example.tar.gz'</span>)</span><br><span class="line">    local(<span class="string">'tar -czvf example.tar.gz --exclude=\'*.tar.gz\' --exclude=\'fabfile.py\' %s'</span> % <span class="string">' '</span>.join(tar_files))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">' 定义一个部署任务 '</span></span><br><span class="line">    <span class="comment"># 远程服务器的临时文件：</span></span><br><span class="line">    remote_tmp_tar = <span class="string">'/tmp/example.tar.gz'</span></span><br><span class="line">    tag = datetime.now().strftime(<span class="string">'%y.%m.%d_%H.%M.%S'</span>)</span><br><span class="line">    run(<span class="string">'rm -f %s'</span> % remote_tmp_tar)</span><br><span class="line">    <span class="comment"># 上传tar文件至远程服务器：</span></span><br><span class="line">    put(<span class="string">'shici.tar.gz'</span>, remote_tmp_tar)</span><br><span class="line">    <span class="comment"># 解压：</span></span><br><span class="line">    remote_dist_dir = <span class="string">'/srv/www.example.com@%s'</span> % tag</span><br><span class="line">    remote_dist_link = <span class="string">'/srv/www.example.com'</span></span><br><span class="line">    run(<span class="string">'mkdir %s'</span> % remote_dist_dir)</span><br><span class="line">    <span class="keyword">with</span> cd(remote_dist_dir):</span><br><span class="line">        run(<span class="string">'tar -xzvf %s'</span> % remote_tmp_tar)</span><br><span class="line">    <span class="comment"># 设定新目录的www-data权限:</span></span><br><span class="line">    run(<span class="string">'chown -R www-data:www-data %s'</span> % remote_dist_dir)</span><br><span class="line">    <span class="comment"># 删除旧的软链接：</span></span><br><span class="line">    run(<span class="string">'rm -f %s'</span> % remote_dist_link)</span><br><span class="line">    <span class="comment"># 创建新的软链接指向新部署的目录：</span></span><br><span class="line">    run(<span class="string">'ln -s %s %s'</span> % (remote_dist_dir, remote_dist_link))</span><br><span class="line">    run(<span class="string">'chown -R www-data:www-data %s'</span> % remote_dist_link)</span><br><span class="line">    <span class="comment"># 重启服务：</span></span><br><span class="line">    fcgi = <span class="string">'/etc/init.d/py-fastcgi'</span></span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="keyword">True</span>):</span><br><span class="line">        run(<span class="string">'%s stop'</span> % fcgi)</span><br><span class="line">    run(<span class="string">'%s start'</span> % fcgi)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python自动化运维的常用模块，比如：paramiko、Fabric等。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化运维02</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-devops02/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-devops02/</id>
    <published>2018-06-22T08:50:35.000Z</published>
    <updated>2018-06-22T09:07:32.440Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python自动化运维的常用模块，比如：XlsxWriter、rrdtool等。<br><a id="more"></a></p><h4 id="1-用XlsxWriter模块创建报表"><a href="#1-用XlsxWriter模块创建报表" class="headerlink" title="1. 用XlsxWriter模块创建报表"></a>1. 用XlsxWriter模块创建报表</h4><ul><li>安装xlsxwriter模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install xlsxwriter推荐使用pip安装</span></span><br></pre></td></tr></table></figure><ul><li>xlsxwriter模块使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line">workbook = xlsxwriter.Workbook(<span class="string">'hello.xlsx'</span>)</span><br><span class="line">worksheet = workbook.add_worksheet()</span><br><span class="line">worksheet.write(<span class="string">'A1'</span>, <span class="string">'Hello world'</span>)</span><br><span class="line">worksheet.write(<span class="string">'A2'</span>, <span class="string">'Hello world'</span>)</span><br><span class="line">worksheet.write(<span class="string">'B1'</span>, <span class="string">'Hello world'</span>)</span><br><span class="line">worksheet.write(<span class="string">'B2'</span>, <span class="string">'Hello world'</span>)</span><br><span class="line">workbook.close()</span><br></pre></td></tr></table></figure><h4 id="2-绘图大师rrdtool"><a href="#2-绘图大师rrdtool" class="headerlink" title="2. 绘图大师rrdtool"></a>2. 绘图大师rrdtool</h4><ul><li>rrdtool绘图</li></ul><p>创建rrd<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> rrdtool</span><br><span class="line">  </span><br><span class="line">rrdb=rrdtool.create(<span class="string">'rest.rrd'</span>,<span class="string">'--step'</span>,<span class="string">'60'</span>,<span class="string">'--start'</span>,<span class="string">'1369982786'</span>,</span><br><span class="line">    <span class="string">'DS:input:GAUGE:120:U:U'</span>,</span><br><span class="line">    <span class="string">'DS:output:GAUGE:120:U:U'</span>,</span><br><span class="line">    <span class="string">'RRA:LAST:0.5:1:600'</span>,</span><br><span class="line">    <span class="string">'RRA:AVERAGE:0.5:5:600'</span>,</span><br><span class="line">    <span class="string">'RRA:MAX:0.5:5:600'</span>,</span><br><span class="line">    <span class="string">'RRA:MIN:0.5:5:600'</span>)</span><br><span class="line"><span class="keyword">if</span> rrdb:</span><br><span class="line">  <span class="keyword">print</span> rrdtool.error()</span><br></pre></td></tr></table></figure></p><p>rrd插入数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> rrdtool</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> keys <span class="keyword">in</span> psutil.network_io_counters(pernic=<span class="keyword">True</span>):</span><br><span class="line">  <span class="keyword">if</span> keys == <span class="string">'em1'</span>:</span><br><span class="line">    sent=psutil.network_io_counters(pernic=<span class="keyword">True</span>)[keys][<span class="number">0</span>]</span><br><span class="line">    recv=psutil.network_io_counters(pernic=<span class="keyword">True</span>)[keys][<span class="number">1</span>]</span><br><span class="line">    up=rrdtool.updatev(<span class="string">'rest.rrd'</span>,<span class="string">'N:%d:%d'</span> % (sent,recv))</span><br><span class="line">    <span class="keyword">print</span> up</span><br></pre></td></tr></table></figure></p><p>根据rrd绘图<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> rrdtool</span><br><span class="line">  </span><br><span class="line">rrdtool.graph(<span class="string">'rest.png'</span>,<span class="string">'--start'</span>,<span class="string">'1369983960'</span>,</span><br><span class="line">    <span class="string">'--title'</span>,<span class="string">'my rrd graph test'</span>,</span><br><span class="line">    <span class="string">'--vertical-label'</span>,<span class="string">'bits'</span>,</span><br><span class="line">    <span class="string">'DEF:input=rest.rrd:input:LAST'</span>,</span><br><span class="line">    <span class="string">'DEF:output=rest.rrd:output:LAST'</span>,</span><br><span class="line">    <span class="string">'LINE1:input#0000FF:In traffic'</span>,</span><br><span class="line">    <span class="string">'LINE1:output#00FF00:Out traffic\\r'</span>,</span><br><span class="line">    <span class="string">'CDEF:bytes_in=input,8,*'</span>,</span><br><span class="line">    <span class="string">'CDEF:bytes_out=output,8,*'</span>,</span><br><span class="line">    <span class="string">'COMMENT:\\n'</span>,</span><br><span class="line">    <span class="string">'GPRINT:bytes_in:LAST:LAST in traffic\: %6.2lf %Sbps'</span>,</span><br><span class="line">    <span class="string">'COMMENT: '</span>,</span><br><span class="line">    <span class="string">'GPRINT:bytes_out:LAST:LAST out traffic\: %6.2lf %Sbps'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="3-利用Python-nmap实现高效端口扫描"><a href="#3-利用Python-nmap实现高效端口扫描" class="headerlink" title="3. 利用Python-nmap实现高效端口扫描"></a>3. 利用Python-nmap实现高效端口扫描</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> nmap</span><br><span class="line"></span><br><span class="line">scan_row=[]</span><br><span class="line">input_data = raw_input(<span class="string">'Please input host and port:'</span>)</span><br><span class="line">scan_row = input_data.split(<span class="string">" "</span>)</span><br><span class="line"><span class="keyword">if</span> len(scan_row) != <span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">hosts = scan_row[<span class="number">0</span>]</span><br><span class="line">port = scan_row[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">nm = nmap.PortScanner()</span><br><span class="line"><span class="keyword">except</span> namp.PortScannerError:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Namp not found"</span>,sys.exc_info()[<span class="number">0</span>]</span><br><span class="line">sys.exit[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Unexpected error:"</span>,sys.exc_info()[<span class="number">0</span>]</span><br><span class="line">sys.exit[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">nm.scan(hosts=hosts,arguments=<span class="string">' -v -sS -p'</span>+port)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Scan error:"</span>+str(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> nm.all_hosts():</span><br><span class="line"><span class="keyword">print</span> <span class="string">'------------------------------------------------'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Host: %s (%s)'</span> % host,nm[host].hostname()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'State: %s'</span> % nm[host].state()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> proto <span class="keyword">in</span> nm[host].all_protocols():</span><br><span class="line"><span class="keyword">print</span> <span class="string">'--------------'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'protocol: %s'</span> % proto</span><br><span class="line"></span><br><span class="line">lport = nm[host][proto].keys()</span><br><span class="line">lport.sort()</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> lport:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'port: %s\tstate: %s'</span> % port,nm[host][proto][port][<span class="string">'state'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python自动化运维的常用模块，比如：XlsxWriter、rrdtool等。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化运维01</title>
    <link href="https://dsxlinux.github.io/2018/06/22/python-devops01/"/>
    <id>https://dsxlinux.github.io/2018/06/22/python-devops01/</id>
    <published>2018-06-22T03:11:23.000Z</published>
    <updated>2018-06-22T08:47:21.414Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Python自动化运维的常用模块，比如：psutil、Dnspython、smtplib等。<br><a id="more"></a></p><h4 id="1-psutil模块"><a href="#1-psutil模块" class="headerlink" title="1. psutil模块"></a>1. psutil模块</h4><ul><li>安装psutil模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install psutil推荐使用pip安装</span></span><br></pre></td></tr></table></figure><ul><li>获取系统信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu信息</span></span><br><span class="line">print(<span class="string">"CPU逻辑数量: %s"</span> % psutil.cpu_count())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"CPU物理核心: %s"</span> % psutil.cpu_count(logical=<span class="keyword">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存信息</span></span><br><span class="line">mem = psutil.virtual_memory()</span><br><span class="line">print(<span class="string">"系统总内存: %s"</span> % mem.total)</span><br><span class="line">print(<span class="string">"已用内存: %s"</span> % mem.used)</span><br><span class="line">print(<span class="string">"空闲内存: %s"</span> % mem.free)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘信息</span></span><br><span class="line">disk_part = psutil.disk_partitions()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> disk_part:</span><br><span class="line">    <span class="keyword">print</span> item.device</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> disk_part:</span><br><span class="line">    <span class="keyword">print</span> item.mountpoint</span><br><span class="line">    <span class="keyword">print</span> psutil.disk_usage(item.mountpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print psutil.disk_io_counters() </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络信息</span></span><br><span class="line"><span class="comment">#print psutil.net_io_counters()</span></span><br><span class="line">net_ifaddrs = psutil.net_if_addrs()</span><br><span class="line"><span class="keyword">print</span> net_ifaddrs[<span class="string">"lo"</span>][<span class="number">0</span>].address</span><br><span class="line"><span class="keyword">print</span> net_ifaddrs[<span class="string">"eth0"</span>][<span class="number">0</span>].address</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> psutil.net_connections():</span><br><span class="line">    <span class="keyword">print</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程信息</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> psutil.pids():</span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).name()               <span class="comment"># 进程名称</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).exe()                <span class="comment"># 进程exe路径</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).cwd()                <span class="comment"># 进程工作目录</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).cmdline()            <span class="comment"># 进程启动的命令行</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).ppid()               <span class="comment"># 父进程ID</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).parent()             <span class="comment"># 父进程</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).children()           <span class="comment"># 子进程列表</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).status()             <span class="comment"># 进程状态</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).username()           <span class="comment"># 进程用户名</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).create_time()        <span class="comment"># 进程创建时间</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).terminal()           <span class="comment"># 进程终端</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).cpu_times()          <span class="comment"># 进程使用的CPU时间</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).memory_info()        <span class="comment"># 进程使用的内存</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).open_files()         <span class="comment"># 进程打开的文件</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).connections()        <span class="comment"># 进程相关网络连接</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).num_threads()        <span class="comment"># 进程的线程数量</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).threads()            <span class="comment"># 所有线程信息</span></span><br><span class="line">    <span class="keyword">print</span> psutil.Process(item).environ()            <span class="comment"># 进程环境变量</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"======================================================"</span></span><br></pre></td></tr></table></figure><h4 id="2-dnspython模块"><a href="#2-dnspython模块" class="headerlink" title="2. dnspython模块"></a>2. dnspython模块</h4><ul><li>安装IPy模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install dnspython</span></span><br></pre></td></tr></table></figure><ul><li><p>使用dnspython模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line">domain = raw_input(<span class="string">'请输入一个域名：'</span>)</span><br><span class="line"></span><br><span class="line">ans = dns.resolver.query(domain, <span class="string">"A"</span>)</span><br><span class="line"><span class="comment"># ans = dns.resolver.query(domain, "CNAME")</span></span><br><span class="line"><span class="comment"># ans = dns.resolver.query(domain, "NS")</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans.response.answer:</span><br><span class="line">    <span class="keyword">print</span> i.to_text()</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-smtplib模块"><a href="#3-smtplib模块" class="headerlink" title="3. smtplib模块"></a>3. smtplib模块</h4><p>smtplib模块发送邮件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">HOST=<span class="string">"smtp.126.com"</span><span class="comment"># smtp主机</span></span><br><span class="line">SUBJECT=<span class="string">"Test email from Python"</span></span><br><span class="line">TO=<span class="string">"1730004882@qq.com"</span><span class="comment"># 接收邮件的邮箱地址</span></span><br><span class="line">FROM=<span class="string">"xxx@126.com"</span><span class="comment"># 发送邮件的邮箱地址</span></span><br><span class="line">text=<span class="string">"python rules them all!"</span><span class="comment"># 邮件内容</span></span><br><span class="line">BODY=string.join((<span class="string">"From: %s"</span> % FROM,<span class="string">"To: %s"</span> % TO,<span class="string">"Subject: %s"</span> % SUBJECT,<span class="string">""</span>,text),<span class="string">"\r\n"</span>)</span><br><span class="line">server=smtplib.SMTP()</span><br><span class="line">server.connect(HOST,<span class="string">"25"</span>)</span><br><span class="line">server.starttls()</span><br><span class="line">server.login(<span class="string">"xxx@126.com"</span>,<span class="string">"password"</span>)<span class="comment"># 发送邮件的邮箱地址和密码</span></span><br><span class="line">server.sendmail(FROM,[TO],BODY)</span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure><h4 id="4-difflib模块"><a href="#4-difflib模块" class="headerlink" title="4. difflib模块"></a>4. difflib模块</h4><p>文件内容差异比对方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 比较2个字符串</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line">text1 = <span class="string">"""This module provides classes</span></span><br><span class="line"><span class="string">and funcitions for comparing sequences 1"""</span></span><br><span class="line">text1_lines = text1.splitlines()</span><br><span class="line">text2 = <span class="string">"""This module provides classes</span></span><br><span class="line"><span class="string">and funcitions for comparing sequences 2"""</span></span><br><span class="line">text2_lines = text2.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="comment">#d = difflib.Differ()</span></span><br><span class="line"><span class="comment">#diff = d.compare(text1,text2)</span></span><br><span class="line"><span class="comment">#print '\n'.join(list(diff))</span></span><br><span class="line">d = difflib.HtmlDiff()</span><br><span class="line"><span class="keyword">print</span> d.make_file(text1_lines,text2_lines)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 对比配置文件差异</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        textfile1 = sys.argv[<span class="number">1</span>]</span><br><span class="line">        textfile2 = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Error:"</span>+str(e)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: diffile.py filename1 filename2"</span></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filename)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">                fileHandle = open(filename,<span class="string">'rb'</span>)</span><br><span class="line">                text = fileHandle.read().splitlines()</span><br><span class="line">                fileHandle.close()</span><br><span class="line">                <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> error:</span><br><span class="line">                print(<span class="string">'Read file Error:'</span>+str(error))</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> textfile1 == <span class="string">""</span> <span class="keyword">or</span> textfile2 == <span class="string">""</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Usage: diffile.py filename1 filename2"</span></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">text1_lines = readfile(textfile1)</span><br><span class="line">text2_lines = readfile(textfile2)</span><br><span class="line"></span><br><span class="line">d = difflib.HtmlDiff()</span><br><span class="line"><span class="keyword">print</span> d.make_file(text1_lines,text2_lines)</span><br></pre></td></tr></table></figure><p>单个文件比较：</p><p>语法：filecmp.cmp(f1.f2[,shallow])</p><p>比较f1和f2，相同返回true，不同返回false，shallow默认为true，会根据os.stat()比较，不会比较文件内容；反之则会比较内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> filecmp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filecmp.cmp(<span class="string">"/etc/passwd"</span>,<span class="string">"/etc/passwd"</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filecmp.cmp(<span class="string">"/etc/passwd"</span>,<span class="string">"/etc/shadow"</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="5-pycurl模块"><a href="#5-pycurl模块" class="headerlink" title="5. pycurl模块"></a>5. pycurl模块</h4><p>pycurl模块是一个用C语言编写的libcurl P python实现，功能非常强大，支持的协议有FTP、HTTP、HTTPS、TELNET等，可以理解成linux下curl命令功能的python封装。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pycurl</span><br><span class="line"></span><br><span class="line">URL=<span class="string">"http://www.baidu.com"</span></span><br><span class="line">c = pycurl.Curl()</span><br><span class="line">c.setopt(pycurl.URL,URL)</span><br><span class="line">c.setopt(pycurl.CONNECTTIMEOUT,<span class="number">5</span>)</span><br><span class="line">c.setopt(pycurl.TIMEOUT,<span class="number">5</span>)</span><br><span class="line">c.setopt(pycurl.NOPROGRESS,<span class="number">1</span>)</span><br><span class="line">c.setopt(pycurl.FORBID_REUSE,<span class="number">1</span>)</span><br><span class="line">c.setopt(pycurl.MAXREDIRS,<span class="number">1</span>)</span><br><span class="line">c.setopt(pycurl.DNS_CACHE_TIMEOUT,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">indexfile = open(os.path.dirname(os.path.realpath(__file__))+<span class="string">"/content.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line">c.setopt(pycurl.WRITEHEADER,indexfile)</span><br><span class="line">c.setopt(pycurl.WRITEDATA,indexfile)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        c.perform()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"connection error:"</span>+str(e)</span><br><span class="line">        indexfile.close()</span><br><span class="line">        c.close()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">NAMELOOKUP_TIME = c.getinfo(c.NAMELOOKUP_TIME)</span><br><span class="line">CONNECT_TIME = c.getinfo(c.CONNECT_TIME)</span><br><span class="line">PRETRANSFER_TIME = c.getinfo(c.PRETRANSFER_TIME)</span><br><span class="line"></span><br><span class="line">STARTTRANSFER_TIME = c.getinfo(c.STARTTRANSFER_TIME)</span><br><span class="line"></span><br><span class="line">TOTAL_TIME = c.getinfo(c.TOTAL_TIME)</span><br><span class="line">HTTP_CODE = c.getinfo(c.HTTP_CODE)</span><br><span class="line">SIZE_DOWNLOAD = c.getinfo(c.SIZE_DOWNLOAD)</span><br><span class="line">HEADER_SIZE = c.getinfo(c.HEADER_SIZE)</span><br><span class="line">SPEED_DOWNLOAD = c.getinfo(c.SPEED_DOWNLOAD)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"HTTP状态码：%s"</span> %(HTTP_CODE)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"DNS解析时间：%.2f ms"</span> %(NAMELOOKUP_TIME*<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"建立连接时间：%.2f ms"</span> %(CONNECT_TIME*<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"准备传输时间：%.2f ms"</span> %(PRETRANSFER_TIME*<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"传输开始时间：%.2f ms"</span> %(STARTTRANSFER_TIME*<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"传输结束总时间：%.2f ms"</span> %(TOTAL_TIME*<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"下载数据包大小：%d bytes/s"</span> %(SIZE_DOWNLOAD)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"HTTP头部大小：%d byte"</span> %(HEADER_SIZE)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"平均下载速度：%d bytes/s"</span> %(SPEED_DOWNLOAD)</span><br><span class="line"></span><br><span class="line">indexfile.close()</span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Python自动化运维的常用模块，比如：psutil、Dnspython、smtplib等。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://dsxlinux.github.io/2018/06/21/linux-live/"/>
    <id>https://dsxlinux.github.io/2018/06/21/linux-live/</id>
    <published>2018-06-21T07:28:53.573Z</published>
    <updated>2018-06-14T02:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html><head>    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">    <title>直播</title></head><body><div style="width:100%; height:auto;"><p> 这里是直播的观看地址，可以直接观看，不需要其他播放器的支持。<b style="color:red">请允许您的浏览器支持flash插件。</b>原来使用播放器播放的方式也是可以的。<br><div><div id="id_video_container" style="width:100%; height:auto;"></div><script src="//qzonestyle.gtimg.cn/open/qcloud/video/live/h5/live_connect.js" charset="utf-8"></script><script type="text/javascript">    (function () {        var player = new qcVideo.Player("id_video_container", {            "live_url" : "http://2117.liveplay.myqcloud.com/live/2117_1e683aaee1.flv",    "live_url2" : "http://2117.liveplay.myqcloud.com/live/2117_1e683aaee1.m3u8",            "width" : 480,            "height" : 320        });    })()</script></div></p></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS6.x机器安装Python2.7</title>
    <link href="https://dsxlinux.github.io/2018/06/21/python-update/"/>
    <id>https://dsxlinux.github.io/2018/06/21/python-update/</id>
    <published>2018-06-21T07:09:10.000Z</published>
    <updated>2018-06-21T07:16:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Centos6.x系统安装Python2.7。<br><a id="more"></a><br>CentOS6.x默认的python版本为2.6.6，有些软件需要python2.7的环境。安装Python2.7有两种方式：源码安装或者YUM安装。</p><h4 id="1-源码方式安装"><a href="#1-源码方式安装" class="headerlink" title="1.源码方式安装"></a>1.源码方式安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz</span></span><br><span class="line"><span class="section"># tar xf Python-2.7.12.tgz</span></span><br><span class="line"><span class="section"># cd Python-2.7.12</span></span><br><span class="line"><span class="section"># ./configure --prefix=/usr/local/python27</span></span><br><span class="line"><span class="section"># make</span></span><br><span class="line"><span class="section"># make install</span></span><br></pre></td></tr></table></figure><h4 id="2-YUM方式安装"><a href="#2-YUM方式安装" class="headerlink" title="2.YUM方式安装"></a>2.YUM方式安装</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install centos-release-SCL添加新的yum源</span></span><br><span class="line"><span class="section"># yum install scl-utils-build</span></span><br><span class="line"><span class="section"># yum --disablerepo="*" --enablerepo="centos-sclo-rh" list</span></span><br><span class="line"><span class="section"># yum install python27 -y</span></span><br><span class="line"><span class="section"># find / -name libpython2.7.so.1.0</span></span><br><span class="line">/opt/rh/python27/root/usr/lib64/libpython2.7.so.1.0</span><br><span class="line"><span class="section"># echo '/opt/rh/python27/root/usr/lib64/' &gt; /etc/ld.so.conf.d/python27.conf</span></span><br><span class="line"><span class="section"># /sbin/ldconfig</span></span><br><span class="line"><span class="section"># /sbin/ldconfig –v</span></span><br><span class="line"><span class="section"># mv /usr/bin/python /usr/bin/python.bak</span></span><br><span class="line"><span class="section"># ln -s /opt/rh/python27/root/usr/bin/python2.7 /usr/bin/python</span></span><br><span class="line"><span class="section"># python -V</span></span><br><span class="line"><span class="section"># vim /usr/bin/yum</span></span><br><span class="line">将第一行的内容改成：#!/usr/bin/python2.6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Centos6.x系统安装Python2.7。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL--避开登录时的[Warning]</title>
    <link href="https://dsxlinux.github.io/2018/06/20/mysql-warning/"/>
    <id>https://dsxlinux.github.io/2018/06/20/mysql-warning/</id>
    <published>2018-06-20T03:41:17.000Z</published>
    <updated>2018-06-20T06:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何避开MySQL数据库登录时，在终端中输入密码提示的warning。<br><a id="more"></a></p><p>在MySQL中, 如果显示的输入密码去登录的话, 就会有一个Warning显示出来, 提醒这种使用方式会不安全。在写脚本时，通过mysql命令行去执行SQL语句，获取执行的结果，这个提示会带来灾难。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br></pre></td></tr></table></figure><p>解决办法如下：</p><ol><li>修改数据库配置文件</li></ol><p>在my.cnf配置文件中，加入以下几行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">host=localhost</span><br><span class="line">user=数据库用户</span><br><span class="line">password='数据库密码'</span><br></pre></td></tr></table></figure><ol start="2"><li>利用mysql_config_editor安全登录工具</li></ol><p>生成加密文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mysql_config_editor set --login-path=local --host=192.168.1.190 --user=root --password</span></span><br><span class="line">参数说明：</span><br><span class="line">--login-path标识</span><br><span class="line">--host登录数据库的主机ip</span><br><span class="line">--user登录数据库的用户名</span><br><span class="line">--password要设置的密码</span><br><span class="line"><span class="section"># ll ~/.mylogin.cnf</span></span><br></pre></td></tr></table></figure><p>使用加密文件登录：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mysql --login-path=local</span></span><br></pre></td></tr></table></figure><p>查看当前主机上的加密文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mysql_config_editor print --all</span></span><br></pre></td></tr></table></figure><p>删除某个加密登陆：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mysql_config_editor remove --login-path=remote</span></span><br><span class="line"><span class="section"># mysql_config_editor print --all</span></span><br></pre></td></tr></table></figure><p>重置所有：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mysql_config_editor reset</span></span><br></pre></td></tr></table></figure><ol start="3"><li>利用环境变量MYSQL_PWD</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># export MYSQL_PWD=666666     密码</span></span><br><span class="line"><span class="section"># mysql -uroot -e 'select count(*) from mysql.user;'   不需要-p参数</span></span><br></pre></td></tr></table></figure><ol start="4"><li>将警告输出到null</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mysql -uroot -p123456 -e 'show grants;' 2&gt;/dev/nul   2是标准出错</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何避开MySQL数据库登录时，在终端中输入密码提示的warning。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://dsxlinux.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://dsxlinux.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux存储之LVM技术</title>
    <link href="https://dsxlinux.github.io/2018/06/17/linux-lvm/"/>
    <id>https://dsxlinux.github.io/2018/06/17/linux-lvm/</id>
    <published>2018-06-17T13:53:02.000Z</published>
    <updated>2018-06-17T21:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux存储技术中的LVM的概念和操作方法。<br><a id="more"></a></p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>LVM全称是Logical Volume Manager，即逻辑卷管理器。它是Linux环境下对磁盘分区进行管理的一种机制；它可以将多个物理分区整合在一起，并且可以根据实际需要动态调整文件系统空间。 </p><h4 id="2-LVM的相关概念"><a href="#2-LVM的相关概念" class="headerlink" title="2. LVM的相关概念"></a>2. LVM的相关概念</h4><p>(1) 物理卷(Physical Volume)</p><p>物理卷是组成LVM的最底层的元素，即Linux上的物理分区。</p><p> (2) 卷组(Volume Group)</p><p>将各个独立的PV组合起来形成的一个存储空间就称为VG，VG的大小就是整个LVM的大小。</p><p>(3) 逻辑卷(Logical Volume)</p><p>可以被用户格式化、挂载并提供数据存储的对象就是LV。</p><p> (4) 物理扩展块(Physical Extent)</p><p>PE相当于Linux分区中的block，它是LVM的最小存储单位，默认为4M。</p><p>做成lvm的优势:</p><blockquote><p>可以灵活变动大小</p><p>可以自定义设备名(物理卷也可以改名，使用udev）</p><p>可以做线型(linear),条带(stripe),镜像(mirror) </p><p>可以做lvm快照</p></blockquote><h4 id="3-LVM基本操作"><a href="#3-LVM基本操作" class="headerlink" title="3. LVM基本操作"></a>3. LVM基本操作</h4><ul><li>创建PV</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># pvcreate /dev/md0 </span></span><br><span class="line">  Physical volume "/dev/md0" successfully created</span><br><span class="line"><span class="section"># pvcreate /dev/md1</span></span><br><span class="line">  Physical volume "/dev/md1" successfully created</span><br><span class="line"><span class="section"># pvcreate /dev/md10</span></span><br><span class="line">  Physical volume "/dev/md10" successfully created</span><br><span class="line"></span><br><span class="line">查看相关信息的命令 pvscan  pvdisplay  pvs</span><br><span class="line">删除pv的命令  pvremove /dev/md10</span><br><span class="line"></span><br><span class="line"><span class="section"># pv</span></span><br><span class="line">pvchange   pvcreate   pvmove     pvresize   pvscan</span><br><span class="line">pvck       pvdisplay  pvremove   pvs        pv.sh</span><br></pre></td></tr></table></figure><ul><li>划分vg</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># vgcreate vg01 /dev/md10</span></span><br><span class="line">  Volume group "vg01" successfully created </span><br><span class="line"><span class="section"># vgextend vg01 /dev/md0 </span></span><br><span class="line">  Volume group "vg01" successfully extended</span><br><span class="line"><span class="section"># vgextend vg01 /dev/md1</span></span><br><span class="line">  Volume group "vg01" successfully extended</span><br><span class="line"></span><br><span class="line">补充：vgcreate -s  指定PE的大小</span><br><span class="line">查看相关信息的命令vgscan vgdisplay vgs</span><br><span class="line"></span><br><span class="line"><span class="section"># vgs</span></span><br><span class="line">  VG   #PV #LV #SN Attr   VSize VFree</span><br><span class="line">  vg01   3   0   0 wz--n- 4.99G 4.99G</span><br><span class="line"></span><br><span class="line"><span class="section"># vgreduce vg01 /dev/md0 </span></span><br><span class="line">Removed "/dev/md0" from volume group "vg01"</span><br><span class="line"></span><br><span class="line">vgreduce跟vgextend是相反的，是在vg里移除pv</span><br><span class="line">移除vg的命令是vgremove，它是和vgcreate相反</span><br></pre></td></tr></table></figure><ul><li>把vg划分为逻辑卷(线性卷linear)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># lvcreate -L 1000M -n lv01 vg01--L指定大小，n指定lv的名字</span></span><br><span class="line">  Logical volume "lv01" created</span><br><span class="line"></span><br><span class="line"><span class="section"># lvcreate -l 250 -n lv02 vg01--l指定PE的个数，n指定lv的名字</span></span><br><span class="line">  Logical volume "lv02" created</span><br><span class="line"> </span><br><span class="line"><span class="section"># lvcreate -L 1001M -n lv03 vg01--指定为1001M，它会自动做成1004M，要是PE的倍数</span></span><br><span class="line">  Rounding up size to full physical extent 1004.00 MB</span><br><span class="line">  Logical volume "lv03" created</span><br><span class="line"></span><br><span class="line"><span class="section"># ls /dev/vg01/ -l</span></span><br><span class="line">lrwxrwxrwx 1 root root 21 May  7 14:14 lv01 -&gt; /dev/mapper/vg01-lv01</span><br><span class="line">lrwxrwxrwx 1 root root 21 May  7 14:15 lv02 -&gt; /dev/mapper/vg01-lv02</span><br><span class="line"></span><br><span class="line"><span class="section"># ls /dev/mapper/ -l</span></span><br><span class="line">brw-rw---- 1 root disk 253,  0 May  7 14:14 vg01-lv01</span><br><span class="line">brw-rw---- 1 root disk 253,  1 May  7 14:15 vg01-lv02</span><br><span class="line"></span><br><span class="line"><span class="section"># mkfs.ext4  /dev/vg01/lv01</span></span><br><span class="line"><span class="section"># mkfs.ext4  /dev/vg01/lv02</span></span><br><span class="line"></span><br><span class="line"><span class="section"># mount /dev/vg01/lv01 /mnt/</span></span><br><span class="line"><span class="section"># mount /dev/vg01/lv02 /media/</span></span><br><span class="line"></span><br><span class="line"><span class="section"># df -h | tail -4</span></span><br><span class="line">/dev/mapper/vg01-lv01</span><br><span class="line"><span class="code">                      985M   18M  918M   2% /mnt</span></span><br><span class="line">/dev/mapper/vg01-lv02</span><br><span class="line"><span class="code">                      985M   18M  918M   2% /media</span></span><br><span class="line"></span><br><span class="line"><span class="section"># echo '12345' &gt; /mnt/1</span></span><br><span class="line"><span class="section"># echo '678910' &gt; /media/2</span></span><br><span class="line"></span><br><span class="line">查看的相关参数为lvscan lvdisplay</span><br><span class="line"></span><br><span class="line"><span class="section"># lvscan </span></span><br><span class="line">  ACTIVE            '/dev/vg01/lv01' [1000.00 MB] inherit</span><br><span class="line">  ACTIVE            '/dev/vg01/lv02' [1000.00 MB] inherit</span><br><span class="line"></span><br><span class="line">移除lv使用lvremove</span><br><span class="line">完全删除lvm，就要先lvremove,再vgremove，最后pvremove</span><br><span class="line"></span><br><span class="line"><span class="section"># vgs</span></span><br><span class="line">  VG   #PV #LV #SN Attr   VSize VFree</span><br><span class="line">  vg01   3   2   0 wz--n- 4.99G 3.04G</span><br><span class="line"></span><br><span class="line"><span class="section"># lvcreate -l 50%VG -n lv03 vg01--创建lv03，大小为vg01的一半</span></span><br><span class="line"><span class="section"># lvcreate -l 100%FREE -n lv04 vg01--把剩下的所有空间都分配给新创建的lv04</span></span><br><span class="line"></span><br><span class="line"><span class="section"># lvs--使用lvs验证</span></span><br><span class="line">  LV   VG   Attr   LSize    Origin Snap%  Move Log Copy%  Convert</span><br><span class="line">  lv01 vg01 -wi-ao 1000.00M</span><br><span class="line">  lv02 vg01 -wi-ao 1000.00M</span><br><span class="line">  lv03 vg01 -wi-a-    2.49G    </span><br><span class="line">  lv04 vg01 -wi-a-  556.00M</span><br><span class="line"></span><br><span class="line">使用lvremove把上面的四个卷给移除，再来创建条状卷</span><br><span class="line"><span class="section"># lvremove vg01 --移除四个卷</span></span><br><span class="line">Do you really want to remove active logical volume lv01? [y/n]: y</span><br><span class="line">  Logical volume "lv01" successfully removed</span><br><span class="line">Do you really want to remove active logical volume lv02? [y/n]: y</span><br><span class="line">  Logical volume "lv02" successfully removed</span><br><span class="line">Do you really want to remove active logical volume lv03? [y/n]: y</span><br><span class="line">  Logical volume "lv03" successfully removed</span><br><span class="line">Do you really want to remove active logical volume lv04? [y/n]: y</span><br><span class="line">  Logical volume "lv04" successfully removed</span><br><span class="line">  Volume group "lv01" not found</span><br><span class="line"></span><br><span class="line">当您创建条状逻辑卷时，请使用 lvcreate 命令的 -i 参数指定条带的数目。这取决于逻辑卷要进行条带</span><br><span class="line">化的物理卷数目。条带的数目不能超过卷组中物理卷的数目（除非使用 --alloc anywhere 参数）</span><br><span class="line"></span><br><span class="line">如果构成逻辑卷的基本物理设备的大小不同，条状卷的最大容量由最小的基本设备决定。例如，在有两</span><br><span class="line">个分支条状卷中，其容量最大为较小设备的两倍。在有三个分支的条状卷中，其容量是最小设备的三倍</span><br><span class="line"></span><br><span class="line">条带卷的大小由最小的PV和创建命令的-i参数(条带数)来决定</span><br><span class="line">以这个为例</span><br><span class="line">  PV         VG   Fmt  Attr PSize    PFree   </span><br><span class="line">  /dev/md0   vg01 lvm2 a--     2.00g    2.00g</span><br><span class="line">  /dev/md1   vg01 lvm2 a--  1020.00m 1020.00m</span><br><span class="line">  /dev/md10  vg01 lvm2 a--     2.00g    2.00g</span><br><span class="line">因为有三个PV,所以用-i 3实现三个条带;那么最大大小为1020*3=3060M</span><br></pre></td></tr></table></figure><ul><li>创建条带卷</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># lvcreate -L 3060M -i3  -n stripe_lv_01 vg01</span></span><br><span class="line">  Logical volume "stripe<span class="emphasis">_lv_</span>01" created</span><br><span class="line">  </span><br><span class="line">可以对其格式化，再用dd和iostat来做测试(但测试的结果比较复杂,因为我是几种不同的raid做的条带卷)</span><br></pre></td></tr></table></figure><ul><li>镜像卷</li></ul><p>当您创建一个镜像卷时，您可使用 lvcreate 命令的 -m 参数来指定数据的备份数目。指定 -m1 生成一个镜像，也就是生成两个文件系统副本：一个线性逻辑卷加上一个副本。同样的，指定 -m2 会生成两个镜像，也就是生成三个文件系统副本。</p><p>镜像卷的大小由最小的PV和副本数（也就是-m后接的数字)来决定</p><p>以这个为例</p><p>  PV         VG   Fmt  Attr PSize    PFree   </p><p>  /dev/md0   vg01 lvm2 a–     2.00g    2.00g</p><p>  /dev/md1   vg01 lvm2 a–  1020.00m 1020.00m</p><p>  /dev/md10  vg01 lvm2 a–     2.00g    2.00g</p><p>如果-m 1，那么他会选md0和md10这两个来做镜像，所以最大大小为2G</p><p>如果-m 2,那么他会选这三个一起来做，最大大小为1020M</p><p>不能-m 3或者更大;因为我这里只有三个PV</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">以下面的为例</span><br><span class="line"><span class="section"># pvs</span></span><br><span class="line">  PV         VG   Fmt  Attr PSize   PFree  </span><br><span class="line">  /dev/sdb13 vg01 lvm2 a-   964.00M 964.00M</span><br><span class="line">  /dev/sdb14 vg01 lvm2 a-   964.00M 964.00M</span><br><span class="line">  /dev/sdb15 vg01 lvm2 a-   964.00M 964.00M</span><br><span class="line"></span><br><span class="line"><span class="section"># vgs</span></span><br><span class="line">  VG   #PV #LV #SN Attr   VSize VFree</span><br><span class="line">  vg01   3   0   0 wz--n- 2.82G 2.82G</span><br><span class="line"></span><br><span class="line">再次创建镜像卷，成功创建</span><br><span class="line"><span class="section"># lvcreate -n lv_mirror -L 300M -m 1 vg01</span></span><br><span class="line">  Logical volume "lv_mirror" created</span><br><span class="line"></span><br><span class="line"><span class="section"># ls /dev/mapper/</span></span><br><span class="line">control         vg01-lv<span class="emphasis">_mirror_</span>mimage<span class="emphasis">_0  vg01-lv_</span>mirror_mlog</span><br><span class="line">vg01-lv<span class="emphasis">_mirror  vg01-lv_</span>mirror<span class="emphasis">_mimage_</span>1</span><br><span class="line"></span><br><span class="line">格式化这个镜像卷，并挂载</span><br><span class="line"><span class="section"># mkfs.ext3 /dev/mapper/vg01-lv_mirror</span></span><br><span class="line"><span class="section"># mount /dev/mapper/vg01-lv_mirror /media/</span></span><br><span class="line"></span><br><span class="line"><span class="section"># df -h</span></span><br><span class="line">/dev/mapper/vg01-lv_mirror</span><br><span class="line"><span class="code">                      291M   11M  266M   4% /media</span></span><br><span class="line"><span class="code">                      </span></span><br><span class="line">测试镜像卷可用性</span><br><span class="line"><span class="section"># echo 123 &gt; /media/123</span></span><br><span class="line"><span class="section"># cat /media/123</span></span><br><span class="line">123</span><br><span class="line">破坏其中一个物理卷。</span><br><span class="line"><span class="code"># dd if=/dev/zero of=/dev/sdb13</span></span><br><span class="line"><span class="code">或者</span></span><br><span class="line"><span class="code"># mkfs.ext3 /dev/sdb13</span></span><br><span class="line"></span><br><span class="line">pvs  检测出有物理卷被损坏,找不到uuid</span><br><span class="line"></span><br><span class="line">但数据仍然可以正常访问</span><br><span class="line"><span class="section"># cat /media/123</span></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line">可以对其格式化，再用dd和iostat来做测试(但测试的结果比较复杂,因为我是几种不同的raid做的条带卷)</span><br></pre></td></tr></table></figure><ul><li>关于三种卷之间的转换:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">把线性卷转化成镜像卷</span><br><span class="line"><span class="section"># lvconvert -m 1 vg01/lv_linear   --速度较慢</span></span><br><span class="line">把镜像卷转化成线性卷</span><br><span class="line"><span class="section"># lvconvert -m 0 vg01/lv_mirror--速度较快</span></span><br><span class="line"></span><br><span class="line">实现总结：</span><br><span class="line">(1) 如果物理做了raid10，那么就可以不做条带和镜像卷了，只有线性卷就可以了</span><br><span class="line">(2) 如果物理没做raid，那么你希望提高IO性能或高可用，则可以使用条带或镜像卷</span><br></pre></td></tr></table></figure><h4 id="4-LVM扩容"><a href="#4-LVM扩容" class="headerlink" title="4. LVM扩容"></a>4. LVM扩容</h4><p>先考虑vg是否还有空间去扩容，如果没有，那么要先扩容vg,使用vgextend</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># lvextend -L 1.5g /dev/vg01/lv01 </span></span><br><span class="line">  Extending logical volume lv01 to 1.50 GB</span><br><span class="line">  Logical volume lv01 successfully resized</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面两种写法也可以</span><br><span class="line"><span class="section"># lvextend -L +500M /dev/vg01/lv01</span></span><br><span class="line"><span class="section"># lvextend -l +125 /dev/vg01/lv01</span></span><br><span class="line"></span><br><span class="line"><span class="section"># df -h</span></span><br><span class="line">/dev/mapper/vg01-lv01</span><br><span class="line">985M   18M  918M   2% /mnt查看已经挂载的大小，没有变化</span><br><span class="line"></span><br><span class="line"><span class="section"># resize2fs /dev/vg01/lv01再使用这个命令去在线同步</span></span><br><span class="line">resize2fs 1.39 (29-May-2006)</span><br><span class="line">Filesystem at /dev/vg01/lv01 is mounted on /mnt; on-line resizing required</span><br><span class="line">Performing an on-line resize of /dev/vg01/lv01 to 393216 (4k) blocks.</span><br><span class="line">The filesystem on /dev/vg01/lv01 is now 393216 blocks long.</span><br><span class="line"></span><br><span class="line"><span class="section"># df -h</span></span><br><span class="line">/dev/mapper/vg01-lv01</span><br><span class="line">1.5G   18M  1.4G   2% /mnt  再次查看,已经挂载的lv扩大了，并且数据没有影响</span><br></pre></td></tr></table></figure><h4 id="5-LVM缩小"><a href="#5-LVM缩小" class="headerlink" title="5. LVM缩小"></a>5. LVM缩小</h4><p>做缩小操作之前，都要去验证查看一下数据的大小，缩小时不要缩到比已经存在的数据量还要小(数据库内的表空间缩小也是一样要先查看已有数据大小）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># resize2fs /dev/vg01/lv01 1g--这样去缩小的话，报错已经mount了</span></span><br><span class="line">resize2fs 1.39 (29-May-2006)</span><br><span class="line">Filesystem at /dev/vg01/lv01 is mounted on /mnt; on-line resizing required</span><br><span class="line">On-line shrinking from 393216 to 262144 not supported.</span><br><span class="line"></span><br><span class="line"><span class="section"># umount /mnt/</span></span><br><span class="line"></span><br><span class="line"><span class="section"># resize2fs /dev/vg01/lv01 1g--umount后再使用resize2fs命令，要求先去e2fsck检测</span></span><br><span class="line">resize2fs 1.39 (29-May-2006)</span><br><span class="line">Please run 'e2fsck -f /dev/vg01/lv01' first.</span><br><span class="line"></span><br><span class="line"><span class="section"># e2fsck -f /dev/vg01/lv01 </span></span><br><span class="line">e2fsck 1.39 (29-May-2006)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">/dev/vg01/lv01: 12/192000 files (8.3% non-contiguous), 10517/393216 blocks</span><br><span class="line"></span><br><span class="line"><span class="section"># resize2fs /dev/vg01/lv01 1g检测后再使用resize2fs命令缩小，并挂载查看大小是否缩小</span></span><br><span class="line">resize2fs 1.39 (29-May-2006)</span><br><span class="line">Resizing the filesystem on /dev/vg01/lv01 to 262144 (4k) blocks.</span><br><span class="line">The filesystem on /dev/vg01/lv01 is now 262144 blocks long.</span><br><span class="line"></span><br><span class="line"><span class="section"># lvscan </span></span><br><span class="line">  ACTIVE            '/dev/vg01/lv01' [1.50 GB] inherit但这里查看的还是1.5g</span><br><span class="line">  ACTIVE            '/dev/vg01/lv02' [1000.00 MB] inherit</span><br><span class="line"></span><br><span class="line"><span class="section"># lvreduce -L 1g /dev/vg01/lv01 所以lvreduce也要做</span></span><br><span class="line">  WARNING: Reducing active logical volume to 1.00 GB</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce lv01? [y/n]: y</span><br><span class="line">  Reducing logical volume lv01 to 1.00 GB</span><br><span class="line">  Logical volume lv01 successfully resized</span><br><span class="line"></span><br><span class="line"><span class="section"># lvscan </span></span><br><span class="line">  ACTIVE            '/dev/vg01/lv01' [1.00 GB] inherit--OK</span><br><span class="line">  ACTIVE            '/dev/vg01/lv02' [1000.00 MB] inherit</span><br><span class="line"></span><br><span class="line"><span class="section"># mount /dev/vg01/lv01 /mnt/</span></span><br><span class="line"><span class="section"># df -h</span></span><br><span class="line">/dev/mapper/vg01-lv02</span><br><span class="line">985M   18M  918M   2% /media缩小了</span><br></pre></td></tr></table></figure><h4 id="6-lvm-快照功能"><a href="#6-lvm-快照功能" class="headerlink" title="6. lvm 快照功能"></a>6. lvm 快照功能</h4><p>(1) 快照创建的速度非常快，不需要停止生产环境</p><p>(2) 快照的大小是存储差异数据，或是快照时间点的状态，不需要和lv同大小</p><p>(3) 它可以用于一些特殊的情况，比如数据库备份，或者批量复制虚拟机（不关闭虚拟机的情况下，克隆是需要关闭或暂停虚拟机的),虚拟机做快照等</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># dd if=/dev/zero of=/media/10m bs=1M count=10</span></span><br><span class="line"></span><br><span class="line"><span class="section"># dd if=/dev/zero of=/media/20m bs=1M count=20</span></span><br><span class="line"></span><br><span class="line"><span class="section"># dd if=/dev/zero of=/media/30m bs=1M count=30</span></span><br><span class="line"></span><br><span class="line"><span class="section"># ls /media/ -l</span></span><br><span class="line">total 61532</span><br><span class="line">-rw-r--r-- 1 root root 10485760 May  7 15:18 10m</span><br><span class="line">-rw-r--r-- 1 root root 20971520 May  7 15:18 20m</span><br><span class="line">-rw-r--r-- 1 root root 31457280 May  7 15:18 30m</span><br><span class="line">drwx------ 2 root root    16384 May  7 14:17 lost+found</span><br><span class="line"></span><br><span class="line"><span class="section"># lvcreate -s -L 100m -n snap01 /dev/vg01/lv02   --L参数指定的大小不是快照大小，它类似于一个快照存活的时间（由源的改变来定义存活时间的长短。源增加多少，这个100M‘时间‘就会被使用多少，源删除，这个100M时间只会被增加一点点，因为删除只记录它的一个innode失效。但注意，快照的内容不会跟着改变。</span></span><br><span class="line">  Logical volume "snap01" created</span><br><span class="line"></span><br><span class="line"><span class="section"># ls /dev/vg01/snap01 </span></span><br><span class="line">/dev/vg01/snap01</span><br><span class="line"></span><br><span class="line"><span class="section"># mkdir /snap</span></span><br><span class="line"><span class="section"># mount /dev/vg01/snap01 /snap/</span></span><br><span class="line"></span><br><span class="line"><span class="section"># ls /snap/--快照的内容</span></span><br><span class="line">10m  20m  30m  lost+found</span><br><span class="line"></span><br><span class="line"><span class="section"># dd if=/dev/zero of=/media/50m bs=1M count=50</span></span><br><span class="line">--在源目录加一个50M的文件</span><br><span class="line"></span><br><span class="line"><span class="section"># ls /snap/--快照的内容不会跟着变</span></span><br><span class="line">10m  20m  30m  lost+found</span><br><span class="line"></span><br><span class="line"><span class="section"># lvs</span></span><br><span class="line">  LV     VG   Attr   LSize    Origin Snap%  Move Log Copy%  Convert</span><br><span class="line">  lv01   vg01 -wi-ao    1.00G                                      </span><br><span class="line">  lv02   vg01 owi-ao 1000.00M                                      </span><br><span class="line">  snap01 vg01 swi-ao  100.00M lv02    50.48    --但是这个snap%会发现由几乎为0变化到50%</span><br><span class="line"></span><br><span class="line">下面再可以继续做试验：</span><br><span class="line">1，在源删除一个文件，再使用lvs查看  %snap只会增加一点点</span><br><span class="line">2，当%snap用完了100%，则快照失效。umount和mount快照都会出问题</span><br><span class="line">3, 快照的内容不会跟着源改变</span><br><span class="line"></span><br><span class="line"><span class="section"># lvremove /dev/vg01/snap01 --快照的移除</span></span><br><span class="line">Do you really want to remove active logical volume snap01? [y/n]: y</span><br><span class="line">  Logical volume "snap01" successfully removed</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux存储技术中的LVM的概念和操作方法。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux存储之RAID技术</title>
    <link href="https://dsxlinux.github.io/2018/06/17/linux-raid/"/>
    <id>https://dsxlinux.github.io/2018/06/17/linux-raid/</id>
    <published>2018-06-17T13:50:12.000Z</published>
    <updated>2018-06-17T21:54:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux存储技术中的RAID的概念和操作方法。<br><a id="more"></a></p><h4 id="1-RAID概念"><a href="#1-RAID概念" class="headerlink" title="1. RAID概念"></a>1. RAID概念</h4><p> RAID（Redundant Array of Inexpensive Disks）称为廉价磁盘冗余阵列。RAID的基本想法是把多个便宜的小磁盘组合到一起，成为一个磁盘组，使性能达到或超过一个容量巨大、价格昂贵的磁盘。 </p><p>目前 RAID技术大致分为两种：基于硬件的RAID技术和基于软件的RAID技术。 本文介绍的是软RAID。</p><h4 id="2-RAID级别"><a href="#2-RAID级别" class="headerlink" title="2. RAID级别"></a>2. RAID级别</h4><p>raid  0    读写性能佳，坏了其中一块，数据挂掉，可靠性低（stripe条带化），磁盘利用率100％</p><p>​                                A    B</p><p>​                                1    2</p><p>​                                3    4</p><p>raid  1    镜像备份（mirror)，同一份资料完整的保存在多个磁盘上，写的性能不佳，可靠性高，读的性能还行，磁盘利用率50%</p><p>​                                A    B</p><p>​                                1    1</p><p>​                                2    2</p><p>​                                3    3</p><p>​                                4    4</p><p>raid  5    由多块磁盘做raid 5，磁盘利用率为n-1/n,  其中一块放校验数据，允许坏一块盘，数据可以利用校验值来恢复</p><p>​                        disk 1        disk 2        disk 3</p><p>​                        数据        数据        校验</p><p>​                        检验        数据        数据</p><p>​                        数据        检验        数据</p><p>raid 10    先做raid1，再做raid0</p><p>raid01    先做raid0，再做raid1</p><h4 id="3-软RAID实现"><a href="#3-软RAID实现" class="headerlink" title="3. 软RAID实现"></a>3. 软RAID实现</h4><p>使用vmware或者kvm直接在线加8个1G大小的硬盘</p><p>linear    线型</p><p>stripe    条带</p><p>mirror    镜像</p><ul><li>创建raid 0</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/sdb /dev/sdc</span></span><br><span class="line">mdadm: array /dev/md0 started.</span><br></pre></td></tr></table></figure><p>创建过程中可以用另一终端cat /proc/mdstat去查看正在创建的状态信息</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mkfs.ext4 /dev/md0</span></span><br><span class="line"><span class="section"># mount /dev/md0 /mnt/</span></span><br><span class="line"><span class="section"># df -h |grep mnt</span></span><br><span class="line"><span class="section"># cat /proc/mdstat</span></span><br></pre></td></tr></table></figure><ul><li>创建raid 1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mdadm --create /dev/md1 --level=1 --raid-devices=2 /dev/sdd /dev/sde</span><br><span class="line"># mkfs.ext4 /dev/md1</span><br><span class="line"># mount /dev/md1 /media/</span><br><span class="line"># df -h |grep md</span><br></pre></td></tr></table></figure><p>对上面的raid0和raid1的一个写性能使用dd命令进行测试，下面命令可以多测几次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># dd if=/dev/zero of=/mnt/aaa bs=1M count=1000</span></span><br><span class="line"><span class="section"># dd if=/dev/zero of=/media/bbb bs=1M count=1000</span></span><br></pre></td></tr></table></figure><p>测试的结果是raid0写性能比raid1要好</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install sysstat -y</span></span><br></pre></td></tr></table></figure><p>验证raid0，在做raid0的两个盘上查看io情况</p><p>终端1：iostat 2    两秒一次查看所有的盘上的IO情况</p><p>终端2: dd if=/dev/zero of=/mnt/aaa bs=1M count=1000</p><p>可以看到两个盘上都有写的io,并且/dev/sdb和/dev/sdc的IO一样,总和才等于/dev/md0的IO;验证了raid0的功能(条带)</p><p>验证raid1，在做raid1的两个盘上查看io情况</p><p>终端1：iostat 2    两秒一次查看所有的盘上的IO情况</p><p>终端2: dd if=/dev/zero of=/media/aaa bs=1M count=1000 </p><p>可以看到两个盘上都有写的io,并且/dev/sdd和/dev/sde的IO一样,并且也等于/dev/md1的IO;验证了raid1的功能(镜像)</p><ul><li>创建raid5</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mdadm --create /dev/md5 --level=5 --raid-devices=4 /dev/sdf /dev/sdg /dev/sdh /dev/sdi</span></span><br><span class="line">mdadm: array /dev/md5 started.</span><br><span class="line"><span class="section"># watch cat /proc/mdstat  --这里监控一下它们盘之间的数据同步；等它们同步完毕再进行下面的格式化</span></span><br><span class="line"><span class="section"># mkfs.ext4 /dev/md5</span></span><br><span class="line"><span class="section"># mount /dev/md5 /misc/</span></span><br><span class="line"><span class="section"># df -h |grep md</span></span><br><span class="line">/dev/md0              2.0G   36M  1.9G   2% /mnt --raid 0利用率为100%</span><br><span class="line">/dev/md1             1008M   18M  940M   2% /media --raid 1利用率为50%</span><br><span class="line">/dev/md5              3.0G   69M  2.8G   3% /misc --raid 5利用率为n-1/n,在这里就是3/4</span><br><span class="line"><span class="section"># cat /proc/mdstat</span></span><br></pre></td></tr></table></figure><p>验证raid5，在做raid5的四个盘上查看io情况</p><p>终端1：iostat 2    两秒一次查看所有的盘上的IO情况</p><p>终端2: dd if=/dev/zero of=/misc/aaa bs=1M count=1000</p><h4 id="4-RAID启停"><a href="#4-RAID启停" class="headerlink" title="4. RAID启停"></a>4. RAID启停</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># vim /etc/mdadm.conf手动编写raid的配置文件，此文件不存在，要手动建立，并写上</span></span><br><span class="line">DEVICES /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/</span><br><span class="line">sdg /dev/sdh /dev/sdi把做了raid的分区写上来。或者写成DEVICES /dev/sd[bcdefghi]。但不能写成DEVICES /dev/sd&#123;b,c,d,e,f,g,h,i&#125;</span><br><span class="line"><span class="section"># mdadm --detail --scan &gt;&gt; /etc/mdadm.conf扫描当前raid的信息，并追加到配置文件里</span></span><br><span class="line"><span class="section"># cat /etc/mdadm.conf </span></span><br><span class="line">DEVICES /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh /dev/sdi</span><br><span class="line">ARRAY /dev/md0 level=raid0 num-devices=2 metadata=0.90 UUID=84209045:9c03c4cb:7f755b8d:cc471294</span><br><span class="line">ARRAY /dev/md1 level=raid1 num-devices=2 metadata=0.90 UUID=4e62fdc1:6c2a652f:fb72c05d:356d5c76</span><br><span class="line">ARRAY /dev/md5 level=raid5 num-devices=4 metadata=0.90 UUID=c3c1f37b:9fba8a89:a711dc6c:01a5ddb3</span><br></pre></td></tr></table></figure><ul><li>停止raid设备</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">先umount 已经挂载的raid设备</span><br><span class="line"><span class="section"># umount /mnt/</span></span><br><span class="line"><span class="section"># umount /media/</span></span><br><span class="line"><span class="section"># umount /misc/</span></span><br><span class="line"></span><br><span class="line">然后使用命令停止</span><br><span class="line"><span class="section"># mdadm --stop /dev/md0</span></span><br><span class="line">mdadm: stopped /dev/md0</span><br><span class="line"><span class="section"># mdadm --stop /dev/md1</span></span><br><span class="line">mdadm: stopped /dev/md1</span><br><span class="line"><span class="section"># mdadm --stop /dev/md5</span></span><br><span class="line">mdadm: stopped /dev/md5</span><br></pre></td></tr></table></figure><ul><li>启动raid设备”</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">(1) 有/etc/mdadm.conf配置文件的情况下</span><br><span class="line"><span class="section"># mdadm -A /dev/md0 </span></span><br><span class="line">mdadm: /dev/md0 has been started with 2 drives.</span><br><span class="line"><span class="section"># mdadm -A /dev/md1</span></span><br><span class="line">mdadm: /dev/md1 has been started with 2 drives.</span><br><span class="line"><span class="section"># mdadm -A /dev/md5</span></span><br><span class="line">mdadm: /dev/md5 has been started with 4 drives.</span><br><span class="line"></span><br><span class="line"><span class="section"># cat /proc/mdstat  --再查看，就有信息了，并且raid里的数据还在</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(2) 没有配置文件的情况下，手动把设备名写上就可以了</span><br><span class="line"><span class="section"># mdadm -A /dev/md0  /dev/sd&#123;b,c&#125;</span></span><br><span class="line">mdadm: /dev/md0 has been started with 2 drives.</span><br><span class="line"></span><br><span class="line"><span class="section"># mdadm -A /dev/md1  /dev/sd&#123;d,e&#125;</span></span><br><span class="line">mdadm: /dev/md1 has been started with 2 drives.</span><br><span class="line"></span><br><span class="line"><span class="section"># mdadm -A /dev/md5  /dev/sd&#123;f,g,h,i&#125;</span></span><br><span class="line">mdadm: /dev/md5 has been started with 4 drives.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(3) 如果连设备名都不知道，可以去查看每个设备的raid信息，使用uuid把raid设备重新组合</span><br><span class="line"><span class="section"># mdadm -E /dev/sdf</span></span><br><span class="line">/dev/sdf:</span><br><span class="line"><span class="code">          Magic : a92b4efc</span></span><br><span class="line"><span class="code">        Version : 0.90.00</span></span><br><span class="line"><span class="code">           UUID : b091e16b:f8df9671:465755db:c640595b --UUID,同一个raid里每个磁盘查看的都是这个值</span></span><br><span class="line">  Creation Time : Sat May  7 11:23:52 2011</span><br><span class="line"><span class="code">     Raid Level : raid5</span></span><br><span class="line">  Used Dev Size : 1048512 (1024.11 MiB 1073.68 MB)</span><br><span class="line"><span class="code">     Array Size : 3145536 (3.00 GiB 3.22 GB)</span></span><br><span class="line">   Raid Devices : 4</span><br><span class="line">  Total Devices : 4</span><br><span class="line">Preferred Minor : 5</span><br><span class="line"></span><br><span class="line"><span class="code">    Update Time : Sat May  7 11:42:09 2011</span></span><br><span class="line"><span class="code">          State : clean</span></span><br><span class="line"> Active Devices : 4</span><br><span class="line">Working Devices : 4</span><br><span class="line"> Failed Devices : 0</span><br><span class="line">  Spare Devices : 0</span><br><span class="line"><span class="code">       Checksum : facef367 - correct</span></span><br><span class="line"><span class="code">         Events : 2</span></span><br><span class="line"></span><br><span class="line"><span class="code">         Layout : left-symmetric</span></span><br><span class="line"><span class="code">     Chunk Size : 64K</span></span><br><span class="line"></span><br><span class="line"><span class="code">      Number   Major   Minor   RaidDevice State</span></span><br><span class="line">this     0       8       80        0      active sync   /dev/sdf</span><br><span class="line"></span><br><span class="line">   0     0       8       80        0      active sync   /dev/sdf</span><br><span class="line">   1     1       8       96        1      active sync   /dev/sdg</span><br><span class="line">   2     2       8      112        2      active sync   /dev/sdh</span><br><span class="line">   3     3       8      128        3      active sync   /dev/sdi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># mdadm -A --uuid=b091e16b:f8df9671:465755db:c640595b /dev/md5</span></span><br><span class="line">mdadm: /dev/md5 has been started with 4 drives.</span><br><span class="line"></span><br><span class="line">上面组合后的名字可以随意写，甚至是不存在的一个名字，相当于是重新组合</span><br></pre></td></tr></table></figure><h4 id="5-软raid的热插拔实验"><a href="#5-软raid的热插拔实验" class="headerlink" title="5. 软raid的热插拔实验"></a>5. 软raid的热插拔实验</h4><p>模拟raid中其中一块盘故障</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mdadm /dev/md5 --fail /dev/sdf</span></span><br><span class="line">mdadm: set /dev/sdf faulty in /dev/md5</span><br><span class="line">--使用--fail对raid中其中一块盘打一个fail标记</span><br><span class="line"></span><br><span class="line"><span class="section"># cat /proc/mdstat </span></span><br><span class="line">Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] </span><br><span class="line">md5 : active raid5 sdf[<span class="string">4</span>](<span class="link">F</span>) sdi[3] sdh[2] sdg[1]--有个F标记</span><br><span class="line"><span class="code">      3145536 blocks level 5, 64k chunk, algorithm 2 [4/3] [_UUU]</span></span><br><span class="line"><span class="code">      </span></span><br><span class="line">md1 : active raid1 sdd[0] sde[1]</span><br><span class="line"><span class="code">      1048512 blocks [2/2] [UU]</span></span><br><span class="line"><span class="code">      </span></span><br><span class="line">md0 : active raid0 sdb[0] sdc[1]</span><br><span class="line"><span class="code">      2097024 blocks 64k chunks</span></span><br><span class="line"></span><br><span class="line"><span class="section"># mdadm /dev/md5 --remove /dev/sdf</span></span><br><span class="line">mdadm: hot removed /dev/sdf</span><br><span class="line">热移除故障磁盘</span><br><span class="line"></span><br><span class="line"><span class="section"># mdadm /dev/md5 --add /dev/sdj  --增加一块新的磁盘上去</span></span><br><span class="line">mdadm: re-added /dev/sdj</span><br><span class="line">--刚增加完后，机器负载较高，因为现在它在对新盘同步数据</span><br><span class="line"></span><br><span class="line"><span class="section"># cat /proc/mdstat </span></span><br><span class="line">Personalities : [raid0] [raid1] [raid6] [raid5] [raid4] </span><br><span class="line">md5 : active raid5 sdj[4] sdi[3] sdh[2] sdg[1]</span><br><span class="line"><span class="code">      3145536 blocks level 5, 64k chunk, algorithm 2 [4/3] [_UUU]</span></span><br><span class="line"><span class="code">      [=====&gt;...............]  recovery = 29.2% (307840/1048512) finish=0.0min speed=153920K/sec--这里可以看到在同步中</span></span><br><span class="line"><span class="code">      </span></span><br><span class="line">md1 : active raid1 sdd[0] sde[1]</span><br><span class="line"><span class="code">      1048512 blocks [2/2] [UU]</span></span><br><span class="line"><span class="code">      </span></span><br><span class="line">md0 : active raid0 sdb[0] sdc[1]</span><br><span class="line"><span class="code">      2097024 blocks 64k chunks</span></span><br><span class="line">  </span><br><span class="line">同步完成后，查看数据还在；</span><br></pre></td></tr></table></figure><h4 id="6-删除raid"><a href="#6-删除raid" class="headerlink" title="6. 删除raid"></a>6. 删除raid</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(1) 第一步</span><br><span class="line"><span class="section"># umount</span></span><br><span class="line">(2) 第二步</span><br><span class="line"><span class="section"># mdadm /dev/md5 --fail /dev/sdf --remove /dev/sdf</span></span><br><span class="line">mdadm: set /dev/sdf faulty in /dev/md5</span><br><span class="line">mdadm: hot removed /dev/sdf</span><br><span class="line"><span class="section"># mdadm /dev/md5 --fail /dev/sdg --remove /dev/sdg</span></span><br><span class="line">mdadm: set /dev/sdg faulty in /dev/md5</span><br><span class="line">mdadm: hot removed /dev/sdg</span><br><span class="line"><span class="section"># mdadm /dev/md5 --fail /dev/sdh --remove /dev/sdh</span></span><br><span class="line">mdadm: set /dev/sdh faulty in /dev/md5</span><br><span class="line">mdadm: hot removed /dev/sdh</span><br><span class="line"><span class="section"># mdadm /dev/md5 --fail /dev/sdi --remove /dev/sdi</span></span><br><span class="line">mdadm: set /dev/sdi faulty in /dev/md5</span><br><span class="line">mdadm: hot removed /dev/sdi</span><br><span class="line">(3) 第三步</span><br><span class="line"><span class="section"># mdadm --stop /dev/md5</span></span><br><span class="line">mdadm: stopped /dev/md5</span><br><span class="line">(4) 第四步</span><br><span class="line">直接用fdisk删除分区，或者用下面命令擦除superblock</span><br><span class="line"><span class="section"># mdadm --misc --zero-superblock /dev/sdf</span></span><br><span class="line"><span class="section"># mdadm --misc --zero-superblock /dev/sdg</span></span><br><span class="line"><span class="section"># mdadm --misc --zero-superblock /dev/sdh</span></span><br><span class="line"><span class="section"># mdadm --misc --zero-superblock /dev/sdi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux存储技术中的RAID的概念和操作方法。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下自动批量部署操作系统</title>
    <link href="https://dsxlinux.github.io/2018/06/15/linux-ks/"/>
    <id>https://dsxlinux.github.io/2018/06/15/linux-ks/</id>
    <published>2018-06-15T08:10:35.000Z</published>
    <updated>2018-06-17T21:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux下使用kickstart进行自动批量安装系统。<br><a id="more"></a></p><h4 id="1-kickstart简介"><a href="#1-kickstart简介" class="headerlink" title="1. kickstart简介"></a>1. kickstart简介</h4><p>Kickstart是一种无人值守的安装方式。它的工作原理是在安装过程中记录典型的需要人工干预填写的各种参数，这些参数都记录在ks.cfg的文件中， 安装程序按照预先设置好的参数进行部署操作系统。等安装完毕，安装程序会根据ks.cfg中的设置重启系统，并结束安装。 </p><p>kickstart是基于pxe(preboot execute environment)技术，pxe是intel公司的技术，工作server/client的网络模式，支持客户端从服务端下载软件，再使用tftp(trival  file tranfer protocol) 协议下载一个启动软件包到客户端内存中执行。</p><p>要求的技术和服务：</p><p>(1)  http服务器或者用nfs,ftp三种协议之一              共享安装光盘目录文件<br>(2)  tftp服务器                                    共享启动引导文件<br>(3)  dhcp服务器                                    客户端获取IP，网关，DNS指向，主机名，NIS域，NTP<br>(4)  kickstart程序生成的ks.cfg配置文件</p><h4 id="2-实践"><a href="#2-实践" class="headerlink" title="2. 实践"></a>2. 实践</h4><ul><li>第一步，搭建安装源</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install httpd -y安装httpd</span></span><br><span class="line"><span class="section"># mkdir /var/www/html/iso创建一个目录</span></span><br><span class="line"><span class="section"># mount /opt/packs/CentOS-6.5-x86_64-bin-DVD1.iso /var/www/html/iso -o loop将光盘挂载</span></span><br><span class="line"><span class="section"># service httpd start要保证可以通过http方式获取光盘里的内容</span></span><br></pre></td></tr></table></figure><ul><li>第二步，配置tftp服务器</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install tftp-server安装tftp</span></span><br><span class="line"><span class="section"># vim /etc/xinetd.d/tftp</span></span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">        socket_type             = dgram</span></span><br><span class="line"><span class="code">        protocol                = udp</span></span><br><span class="line"><span class="code">        wait                    = yes</span></span><br><span class="line"><span class="code">        user                    = root</span></span><br><span class="line"><span class="code">        server                  = /usr/sbin/in.tftpd</span></span><br><span class="line"><span class="code">        server_args             = -t -s -v /var/lib/tftpboot 启动参数改为-t -s -v</span></span><br><span class="line"><span class="code">        disable                 = no    yes改为no</span></span><br><span class="line"><span class="code">        per_source              = 11</span></span><br><span class="line"><span class="code">        cps                     = 100 2</span></span><br><span class="line"><span class="code">        flags                   = IPv4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section"># service xinetd start</span></span><br><span class="line"><span class="section"># netstat -ntlup |grep :69确认tftp启动了</span></span><br></pre></td></tr></table></figure><ul><li>第三步，配置pxe启动文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install syslinux -y</span></span><br><span class="line"><span class="section"># cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</span></span><br><span class="line"><span class="section"># cp /var/www/html/iso/isolinux/* /var/lib/tftpboot/</span></span><br><span class="line"><span class="section"># mkdir /var/lib/tftpboot/pxelinux.cfg</span></span><br><span class="line"><span class="section"># cp /var/www/html/iso/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default</span></span><br><span class="line"><span class="section"># vim /var/lib/tftpboot/pxelinux.cfg/default</span></span><br><span class="line">default linux-rzx</span><br><span class="line">prompt 1</span><br><span class="line">timeout 3</span><br><span class="line"></span><br><span class="line">label linux-rzx</span><br><span class="line">  kernel vmlinuz      </span><br><span class="line">  append initrd=initrd.img ks=http://192.168.1.99/ks/ks.cfg</span><br></pre></td></tr></table></figure><ul><li>第四步，搭建DHCP服务器</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install dhcp -y</span></span><br><span class="line"><span class="section"># cp /usr/share/doc/dhcp-4.1.1/dhcpd.conf.sample /etc/dhcp/dhcpd.conf</span></span><br><span class="line"><span class="section"># vim /etc/dhcp/dhcpd.conf</span></span><br><span class="line"></span><br><span class="line">log-facility local7;</span><br><span class="line"></span><br><span class="line">next-server 192.168.1.99;</span><br><span class="line">filename "/var/lib/tftpboot/pxelinux.0";</span><br><span class="line">allow bootp;</span><br><span class="line">allow booting;</span><br><span class="line"></span><br><span class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.1.50 192.168.1.100;</span><br><span class="line">  option domain-name-servers 192.168.1.1;</span><br><span class="line">  option routers 192.168.1.1;</span><br><span class="line">  option broadcast-address 192.168.1.255;</span><br><span class="line">  default-lease-time 600;</span><br><span class="line">  max-lease-time 7200;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section"># /etc/init.d/dhcpd restart</span></span><br></pre></td></tr></table></figure><ul><li>第五步，配置kickstart</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install system-config-kickstart   安装kickstart的图形配置工具</span></span><br><span class="line"><span class="section"># system-config-kickstart   运行该命令生成ks.cfg文件</span></span><br></pre></td></tr></table></figure><p>这里说明一点：如果系统中没有安装图形，是不能运行system-config-kickstart的。</p><p>生成ks.cfg文件之后，将其放到Apache的数据目录，以便在安装系统时，可以下载到。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mkdir /var/www/html/ks/</span></span><br><span class="line"><span class="section"># ks.cfg /var/www/html/ks/</span></span><br></pre></td></tr></table></figure><ul><li>第六步，安装</li></ul><p>服务器启动时，选择网络启动方式优先。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux下使用kickstart进行自动批量安装系统。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下远程拷贝时无需输入密码</title>
    <link href="https://dsxlinux.github.io/2018/06/13/linux-nopass-copy/"/>
    <id>https://dsxlinux.github.io/2018/06/13/linux-nopass-copy/</id>
    <published>2018-06-13T08:27:20.000Z</published>
    <updated>2018-06-13T16:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux系统中，远程拷贝文件时无需输入密码来拷贝的一种简单办法。<br><a id="more"></a><br>我们在远程拷贝文件时，尤其是不同地区的服务器之间拷贝数据，一般是使用scp或者rsync来拷贝。这两个命令都需要输入密码。<br>一般来说，有三种办法来实现无密码拷贝。<br>(1)SSH等效性建立信任关系<br>(2)使用expect脚本来自动输入密码<br>(3)使用sshpass工具来自动输入密码<br>本文重点介绍sshpass工具来实现，这个工具比较简单。</p><h4 id="1-sshpass命令"><a href="#1-sshpass命令" class="headerlink" title="1. sshpass命令"></a>1. sshpass命令</h4><p>如果系统中没有sshpass命令，则通过如下命令可以安装：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum -y install sshpass</span></span><br></pre></td></tr></table></figure></p><p>sshpass命令的使用方法：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># sshpass -p 123456 ssh 192.168.1.100                     -p参数是服务器192.168.1.100的密码，这样就可以直接登录了</span></span><br><span class="line"><span class="section"># sshpass -f password.txt ssh 192.168.1.100   -f参数是file，密码文件，默认读取文件的第一行作为密码</span></span><br></pre></td></tr></table></figure></p><h4 id="2-sshpass实现远程拷贝"><a href="#2-sshpass实现远程拷贝" class="headerlink" title="2. sshpass实现远程拷贝"></a>2. sshpass实现远程拷贝</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># sshpass -f password.txt scp -r /opt/packs/xxx.iso  root@192.168.1.100:/root/packs/</span></span><br><span class="line"><span class="section"># sshpass -f password.txt rsync -a /opt/packs/xxx.iso  root@192.168.1.100:/root/packs/</span></span><br><span class="line"><span class="section"># nohup sshpass -f password.txt rsync -a /opt/packs/xxx.iso  root@192.168.1.100:/root/packs/ &amp;也可以使用nohup在后台跑</span></span><br></pre></td></tr></table></figure><p>这里建议使用sshpass的-f参数来存放密码，然后执行<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># chmod 600 password.txt</span></span><br></pre></td></tr></table></figure></p><p>这样只有root才可以读写，保证了安全性。-p直接在命令行输入密码不安全。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux系统中，远程拷贝文件时无需输入密码来拷贝的一种简单办法。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统备份与还原</title>
    <link href="https://dsxlinux.github.io/2018/06/12/linux-system-backup/"/>
    <id>https://dsxlinux.github.io/2018/06/12/linux-system-backup/</id>
    <published>2018-06-12T08:22:05.000Z</published>
    <updated>2018-06-12T18:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍centos系统的备份和还原。<br><a id="more"></a><br>我们在使用Windows时，可以使用ghost工具对系统进行备份，那么Linux系统是如何备份的呢</p><h4 id="1-备份系统"><a href="#1-备份系统" class="headerlink" title="1. 备份系统"></a>1. 备份系统</h4><p>在linux系统中，有一句话叫做一切都是文件，既然是文件，我们就可以通过打包的方式来备份。</p><p>使用root身份登录系统，进行打包操作。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># tar cvpzf /backup.tgz –exclude=/proc –exclude=/lost+found –exclude=/backup.tgz –exclude=/mnt –exclude=/sys –exclude=/sys  /</span></span><br><span class="line">参数说明：</span><br><span class="line">c按照man手册，直译创建一个新的存档，意思是打包文件backup.tgz不存在，需要创建</span><br><span class="line">v显示打包过程和细节</span><br><span class="line">p保留文件的权限</span><br><span class="line">zgzip格式压缩，和windows上的rar格式或zip格式差不多</span><br><span class="line">f文件，cf一起的意思是创建文件</span><br><span class="line">exclude是排除那些文件不打包进去</span><br></pre></td></tr></table></figure><p>上面的命令将/下的所有东西打成一个包，有些系统上动态的文件可以不用打包，排除出去，比如：/proc，/sys。也可以把不用备份的文件排除出去。</p><h4 id="2-系统还原"><a href="#2-系统还原" class="headerlink" title="2. 系统还原"></a>2. 系统还原</h4><p>在进行恢复系统的操作时一定要小心！如果你不清楚自己在做什么，那么你有可能把重要的数据弄丢，请务必小心！ </p><p>切换到root用户，并把文件“backup.tgz”拷贝到分区的根目录下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># tar xvpfz /backup.tgz -C /</span></span><br></pre></td></tr></table></figure><p>恢复命令结束时，你的工作还没完成，别忘了重新创建那些在备份时被排除在外的目录： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mkdir proc</span></span><br><span class="line"><span class="section"># mkdir lost+found</span></span><br><span class="line"><span class="section"># mkdir mnt</span></span><br><span class="line"><span class="section"># mkdir sys</span></span><br></pre></td></tr></table></figure><p>保险起见，最好是执行一下如下命令：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># restorecon -Rv /</span></span><br></pre></td></tr></table></figure><p>restorecon命令是用来恢复文件的SELinux配置信息的。</p><p>最后重启服务器，重新启动时观察一下，有没有服务没有起来。</p><h4 id="3-还原到其他的Linux中"><a href="#3-还原到其他的Linux中" class="headerlink" title="3. 还原到其他的Linux中"></a>3. 还原到其他的Linux中</h4><p>有时候会出现这种情况，备份的Linux系统已经损坏，比如硬盘坏了，上面的备份文件还有，那么是否可以恢复呢，答案是肯定的。</p><p>重新准备一台服务器，最好是分区、系统版本和损坏的服务器是一致的，安装好相同版本的Linux系统。将备份文件backup.tgz拷贝到新的服务器中。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># mkdir /mnt/backup/</span></span><br><span class="line"><span class="section"># awk 'BEGIN &#123; cmd="cp -ari /mnt/backup/*  /"; print "n" |cmd; &#125;'</span></span><br></pre></td></tr></table></figure><p>上面的命令是”cp -ari /mnt/backup/*  /“，意思是拷贝所有的备份文件，将/下的目录进行覆盖。print “n”的意思是同名文件不覆盖。这样做就是将老系统中的文件复制到新系统，不覆盖已经存在的文件。</p><p>那么为什么不能覆盖呢？每个Linux系统中有一些唯一的信息不能覆盖，否则系统会坏掉。比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># blkid</span></span><br><span class="line">/dev/sda5: UUID="5d938847-6503-40cf-845d-a85777d4d1e1" TYPE="ext4" </span><br><span class="line">/dev/sda1: UUID="86215e74-789c-4a32-ad2a-7d2a1a06a587" TYPE="ext4" </span><br><span class="line">/dev/sda2: UUID="1031afbe-2bf8-474c-9d3f-93a77d5751df" TYPE="ext4" </span><br><span class="line">/dev/sda3: UUID="83898300-4d9d-41de-951a-62896cde5025" TYPE="ext4" </span><br><span class="line">/dev/sda6: UUID="381b6c24-de6a-4d01-8382-9b3bb3a9ecc3" TYPE="ext4" </span><br><span class="line">/dev/sda7: UUID="c0793320-2302-4018-8482-130fbc4dca06" TYPE="swap"</span><br></pre></td></tr></table></figure><p>每个系统的分区都有一个UUID，这个是唯一的，覆盖之后就会出问题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># cat /etc/fstab </span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section"># /etc/fstab</span></span><br><span class="line"><span class="section"># Created by anaconda on Tue Dec 22 15:16:37 2015</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line"><span class="section"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class="line"><span class="section"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="section">#</span></span><br><span class="line">UUID=5d938847-6503-40cf-845d-a85777d4d1e1 /                       ext4    defaults        1 1</span><br><span class="line">UUID=1031afbe-2bf8-474c-9d3f-93a77d5751df /appslog                ext4    defaults        1 2</span><br><span class="line">UUID=86215e74-789c-4a32-ad2a-7d2a1a06a587 /boot                   ext4    defaults        1 2</span><br><span class="line">UUID=83898300-4d9d-41de-951a-62896cde5025 /opt                    ext4    defaults        1 2</span><br><span class="line">UUID=381b6c24-de6a-4d01-8382-9b3bb3a9ecc3 /usr                    ext4    defaults        1 2</span><br><span class="line">UUID=c0793320-2302-4018-8482-130fbc4dca06 swap                    swap    defaults        0 0</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br></pre></td></tr></table></figure><p>系统中的fstab中用到了UUID，覆盖了文件会导致系统启动不了。</p><p>然后执行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># restorecon -Rv /</span></span><br></pre></td></tr></table></figure><p>这一步是必须的，否则重启系统会报错。</p><p>最后就是观察重启系统时，是否有服务没启动，需要手动将其启动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍centos系统的备份和还原。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络工具</title>
    <link href="https://dsxlinux.github.io/2018/06/10/linux-net-tools/"/>
    <id>https://dsxlinux.github.io/2018/06/10/linux-net-tools/</id>
    <published>2018-06-10T10:14:00.000Z</published>
    <updated>2018-06-22T01:43:13.714Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux系统中常用的网络工具。<br><a id="more"></a></p><h4 id="1-curl命令"><a href="#1-curl命令" class="headerlink" title="1. curl命令"></a>1. curl命令</h4><p>curl                        命令行访问URL的工具</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># curl http://www.baidu.com直接将百度网页的源码输出到屏幕上</span></span><br><span class="line"><span class="section"># curl http://www.baidu.com –o baidu.html 将百度网页的源码保存起来</span></span><br><span class="line"><span class="section"># curl -O http://www.linux.com/hello.sh将hello.sh文件下载下来</span></span><br><span class="line"><span class="section"># curl -# -O http://www.linux.com/dodo1.JPG显示下载进度条</span></span><br><span class="line"><span class="section"># curl -C -O http://www.linux.com/dodo1.JPG断点续传</span></span><br><span class="line"><span class="section"># curl -o /dev/null -s -w %&#123;http_code&#125; www.baidu.com测试网页返回值，非常有用</span></span><br><span class="line"><span class="section"># curl -o /dev/null -s -w %&#123;http_code&#125;:%&#123;http_connect&#125;:%&#123;content_type&#125;:%&#123;time_namelookup&#125;:%&#123;time_redirect&#125;:%&#123;time_pretransfer&#125;:%&#123;time_connect&#125;:%&#123;time_starttransfer&#125;:%&#123;time_total&#125;:%&#123;speed_download&#125; digdeeply.org</span></span><br><span class="line"><span class="section"># curl -x 192.168.100.100:1080 http://www.linux.com-x参数是设置代理的</span></span><br><span class="line"><span class="section"># curl -I http://static.futunn.com/passport/images/global/logo_futunn-b9fab8d8f683775e9c3c5ade78e822ec.png -x 211.162.36.175:80</span></span><br><span class="line"><span class="section"># curl -I www.sina.com.cn -x 124.42.245.30:80</span></span><br><span class="line"><span class="section"># curl -I 124.42.245.30</span></span><br><span class="line"><span class="section"># curl -I 124.42.245.30 -H 'host:www.sina.com.cn'</span></span><br><span class="line"></span><br><span class="line"><span class="section"># curl -s -D header.txt http://www.linux.com -o /dev/null保存访问网站的header信息</span></span><br><span class="line"><span class="section"># curl -I http://www.linux.com在屏幕上显示header信息</span></span><br><span class="line"><span class="section"># curl -c cookie.txt  http://www.linux.com保存访问网站的cookie信息</span></span><br><span class="line"><span class="section"># curl -A "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)" http://www.linux.com模仿浏览器</span></span><br><span class="line"><span class="section"># curl -e "www.abc.com" http://mail.linux.com伪造referer</span></span><br><span class="line"><span class="section"># curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/上传文件</span></span><br><span class="line"><span class="section"># curl ip.cn</span></span><br><span class="line"><span class="section"># curl myip.ipip.net</span></span><br><span class="line"><span class="section"># curl ip.cip.cc</span></span><br></pre></td></tr></table></figure><h4 id="2-nmap命令"><a href="#2-nmap命令" class="headerlink" title="2. nmap命令"></a>2. nmap命令</h4><p>Nmap 是一款开放源代码的 网络探测和安全审核的工具。 它的设计目标是快速地扫描大型网络 。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># nmap -sP 192.168.1.0/24使用ping检测192.168.1.0/24这个网段</span></span><br><span class="line"><span class="section"># nmap --iflist</span></span><br><span class="line"><span class="section"># nmap -e eth0 192.168.1.5扫描ip开放的端口</span></span><br><span class="line"><span class="section"># nmap 192.168.1.1 -p 1-500自定义扫描端口</span></span><br><span class="line"><span class="section"># nmap -sn 192.168.1.0/2只进行主机发现，不进行端口扫描</span></span><br><span class="line"><span class="section"># nmap 192.168.1.1 -P0端口扫描(Pn)</span></span><br><span class="line"><span class="section"># nmap 192.168.1.1-100 多个ip</span></span><br><span class="line"><span class="section"># nmap -F 192.168.1.*    多个ip，-F 快速扫描</span></span><br><span class="line"><span class="section"># nmap -sS 192.168.1.153Tcp SYN Scan (sS)</span></span><br><span class="line"><span class="section"># nmap -sT 192.168.1.153Tcp connect() scan(sT)</span></span><br><span class="line"><span class="section"># nmap -sU 192.168.1.153Udp scan(sU)</span></span><br><span class="line"><span class="section"># nmap -sF 192.168.1.153FINscan(sF)</span></span><br><span class="line"><span class="section"># nmap -sV 192.168.1.153版本检测(sV)</span></span><br><span class="line"><span class="section"># nmap 192.168.1.153  -p U:22,80,T:21-25,80,139,8080 TCP、UDP端口扫描</span></span><br><span class="line"><span class="section"># nmap --traceroute www.baidu.com路由跟踪</span></span><br><span class="line"><span class="section"># nmap -O 192.168.1.153操作系统</span></span><br><span class="line"><span class="section"># nmap -A 192.168.1.153激进方式扫描，扫描端口和os</span></span><br><span class="line"><span class="section"># nmap -sV -p 22 -oG grep-output.txt 192.168.1.0/24输出格式，可检索的</span></span><br><span class="line"><span class="section"># nmap -sV -p 22 -oA grep-output.txt 192.168.1.0/24输出格式，-oA所有，可检索的、常规的和XML文件</span></span><br><span class="line"><span class="section"># nmap -sV -p 22 -oX grep-output.txt 192.168.1.0/24输出格式，XML</span></span><br><span class="line"><span class="section"># nmap -sV -p 22 -oN grep-output.txt 192.168.1.0/24输出格式，常规格式</span></span><br></pre></td></tr></table></figure><h4 id="3-nc命令"><a href="#3-nc命令" class="headerlink" title="3. nc命令"></a>3. nc命令</h4><blockquote><p>(1) 安装</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install -y nc</span></span><br></pre></td></tr></table></figure><blockquote><p>(2) 远程拷贝文件</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server1：</span><br><span class="line"><span class="section"># nc -l 1234 &gt; test.txt</span></span><br><span class="line">server2：</span><br><span class="line"><span class="section"># nc 192.168.1.3 &lt; test.txt</span></span><br></pre></td></tr></table></figure><blockquote><p>(3) 传输目录</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server1：</span><br><span class="line"><span class="section"># nc -l 1234 | tar xzv-</span></span><br><span class="line">server2：</span><br><span class="line"><span class="section"># tar czv- nginx | nc 192.168.48.47 1234</span></span><br></pre></td></tr></table></figure><blockquote><p>(4) 简单聊天工具</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在192.168.1.2上： </span><br><span class="line"><span class="section"># nc -l 1234</span></span><br><span class="line">在192.168.1.3上： </span><br><span class="line"><span class="section"># nc 192.168.1.2 1234</span></span><br></pre></td></tr></table></figure><blockquote><p>(5) 端口扫描</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># nc -v -w 2 192.168.2.34 -z 21-24</span></span><br></pre></td></tr></table></figure><blockquote><p>(6) 克隆硬盘或分区</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># nc -l -p 1234 | dd of=/dev/sda</span></span><br><span class="line"><span class="section"># dd if=/dev/sda | nc 192.168.228.222 1234</span></span><br></pre></td></tr></table></figure><h4 id="4-wget命令"><a href="#4-wget命令" class="headerlink" title="4. wget命令"></a>4. wget命令</h4><p>wget是一个下载文件的工具 。</p><p>命令格式：<br>    wget [参数]  [URL地址 ]</p><blockquote><p><strong>wget下载单个文件</strong> </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>下载并以不同的文件名保存</strong> </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz -o wget.tgz</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>限速下载</strong> </p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget --limit-rate=300k http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>断点续传</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget -c http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>后台下载</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget -b http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>测试下载链接</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget --spider http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>复制整个网站（镜像）</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget --mirror --convert-links http://exampledomain.com</span></span><br></pre></td></tr></table></figure><blockquote><p>访问需要认证的HTTP或FTP页面</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget --user username --password pass URL</span></span><br></pre></td></tr></table></figure><blockquote><p>指定目录下载</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget -P /home/download http://ftp.gnu.org/gnu/wget/wget-1.16.2.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>下载目录中的所有文件</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># wget -r -np -nd http://mirrors.163.com/centos/6/isos/x86_64/</span></span><br><span class="line"><span class="section"># wget -r -p -np -k http://mirrors.163.com/centos/6/isos/x86_64/</span></span><br><span class="line">参数说明：</span><br><span class="line">-r,  --recursive  递归下载</span><br><span class="line">-k,  --convert-links  让下载得到的 HTML 或 CSS 中的链接指向本地文件</span><br><span class="line">-m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式</span><br><span class="line">-np, --no-parent          不追溯至父目录</span><br><span class="line">-nd, --no-directories     不创建目录</span><br><span class="line">-l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)</span><br><span class="line">-c,  --continue           断点续传下载文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux系统中常用的网络工具。&lt;br&gt;
    
    </summary>
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/categories/linux-basic/"/>
    
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/tags/linux-basic/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统相关命令</title>
    <link href="https://dsxlinux.github.io/2018/06/10/linux-system/"/>
    <id>https://dsxlinux.github.io/2018/06/10/linux-system/</id>
    <published>2018-06-10T09:25:00.000Z</published>
    <updated>2018-06-10T10:10:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux系统相关命令，比如关机，查看硬件信息等。<br><a id="more"></a></p><h4 id="1-关机命令"><a href="#1-关机命令" class="headerlink" title="1. 关机命令"></a>1. 关机命令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># shutdown -h now关机</span></span><br><span class="line"><span class="section"># init 0 关机</span></span><br><span class="line"><span class="section"># telinit 0 关机</span></span><br><span class="line"><span class="section"># # shutdown -h hours:minutes &amp; 按预定时间关机</span></span><br><span class="line"><span class="section"># shutdown -c 取消按预定时间关闭系统</span></span><br><span class="line"><span class="section"># shutdown -r now重启 </span></span><br><span class="line"><span class="section"># reboot重启 </span></span><br><span class="line"><span class="section"># logout 注销</span></span><br></pre></td></tr></table></figure><h4 id="2-硬件相关"><a href="#2-硬件相关" class="headerlink" title="2. 硬件相关"></a>2. 硬件相关</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># dmidecode -q硬件相关信息 </span></span><br><span class="line"><span class="section"># hdparm -tT /dev/sda在磁盘上执行测试性读取操作 </span></span><br><span class="line"><span class="section"># lscpu查看CPU</span></span><br><span class="line"><span class="section"># lspci查看主板</span></span><br><span class="line"><span class="section"># lsblk查看磁盘分区</span></span><br></pre></td></tr></table></figure><h4 id="3-网络命令"><a href="#3-网络命令" class="headerlink" title="3. 网络命令"></a>3. 网络命令</h4><ul><li><p>ifconfig命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ifconfig 显示一个以太网卡的配置，常用选项：</span></span><br><span class="line"><span class="section"># ifconfig eth0</span></span><br><span class="line"><span class="section"># ifconfig eth0 down</span></span><br><span class="line"><span class="section"># ifconfig eth0 up</span></span><br><span class="line"><span class="section"># ifconfig eth0 192.168.1.99 broadcast 192.168.1.255 netmask 255.255.255.0</span></span><br><span class="line"><span class="section"># ifconfig eth0:0 192.168.1.100 netmask 255.255.255.0添加虚拟网卡</span></span><br><span class="line"><span class="section"># ifup eth0 启用一个 'eth0' 网络设备 </span></span><br><span class="line"><span class="section"># ifdown eth0 禁用一个 'eth0' 网络设备</span></span><br></pre></td></tr></table></figure></li><li><p>ip命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ip网络配置工具，常用选项：</span></span><br><span class="line"><span class="section"># ip a</span></span><br><span class="line"><span class="section"># ip addr show</span></span><br><span class="line"><span class="section"># ip addr show dev eth0查看服务器ip地址</span></span><br><span class="line"><span class="section"># ip -s link list</span></span><br><span class="line"><span class="section"># ip -s link ls eth0查看接口统计(ethtool -S eth0)</span></span><br><span class="line"><span class="section"># ip route list查看路由表</span></span><br><span class="line"><span class="section"># ip neigh list查看邻居表（arp -an）</span></span><br><span class="line"><span class="section"># ip addr add 192.168.0.215/24 label eth0:1 dev eth0添加虚拟网卡</span></span><br><span class="line"><span class="section"># ip addr del 192.168.0.215/24 label eth0:1 dev eth0删除虚拟网卡</span></span><br></pre></td></tr></table></figure></li><li><p>netstat命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># netstat -an | grep LISTEN-a 显示所有socket，包括正在监听的, -n 以网络IP地址代替名称</span></span><br><span class="line"><span class="section"># netstat -ntlup查看系统网络的状态信息，t=tcp，u=udp，p=程序名称，l=监听</span></span><br><span class="line"><span class="section"># netstat -s按照各个协议分别显示其统计数据</span></span><br><span class="line"><span class="section"># netstat -i显示网卡接口信息</span></span><br><span class="line"><span class="section"># netstat –r显示关于路由表的信息(rount -n)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-系统监控和性能分析命令"><a href="#4-系统监控和性能分析命令" class="headerlink" title="4. 系统监控和性能分析命令"></a>4. 系统监控和性能分析命令</h4><ul><li><p>iostat命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># iostat直接运行，显示所有设备负载情况</span></span><br><span class="line"><span class="section"># iostat 2 3每2秒显示一次，总共显示3次</span></span><br><span class="line"><span class="section"># iostat -c查看cpu</span></span><br><span class="line"><span class="section"># iostat -d查看磁盘</span></span><br><span class="line"><span class="section"># iostat -d -x 1 x参数是详细信息</span></span><br></pre></td></tr></table></figure></li><li><p>vmstat命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># vmstat 虚拟内存统计</span></span><br><span class="line"><span class="section"># vmstat 2 2每2秒显示一次，总共显示2次</span></span><br><span class="line"><span class="section"># vmstat 2 2 -S m-S参数是单位，可以是k、m等</span></span><br></pre></td></tr></table></figure></li><li><p>free命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># free查看内存</span></span><br><span class="line"><span class="section"># free -m-m是单位</span></span><br><span class="line"><span class="section"># free -m -s 2-s是时间，每2秒查看一次</span></span><br></pre></td></tr></table></figure></li><li><p>dstat命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># dstat信息统计工具</span></span><br><span class="line"><span class="section"># dstat -nn是net</span></span><br><span class="line"><span class="section"># dstat -dd是disk</span></span><br><span class="line"><span class="section"># dstat -mm是memory</span></span><br><span class="line"><span class="section"># dstat -ll是load average 显示系统负载情况</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux系统相关命令，比如关机，查看硬件信息等。&lt;br&gt;
    
    </summary>
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/categories/linux-basic/"/>
    
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/tags/linux-basic/"/>
    
  </entry>
  
  <entry>
    <title>Linux文本文件处理(4)</title>
    <link href="https://dsxlinux.github.io/2018/06/10/linux-sed/"/>
    <id>https://dsxlinux.github.io/2018/06/10/linux-sed/</id>
    <published>2018-06-09T16:14:00.000Z</published>
    <updated>2018-06-09T16:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍sed命令的用法。<br><a id="more"></a></p><h4 id="1-awk简介"><a href="#1-awk简介" class="headerlink" title="1. awk简介"></a>1. awk简介</h4><p>Sed：Stream Editor  流式编辑器 又称行编辑器，每次只编辑一行。</p><h4 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...</span></span><br></pre></td></tr></table></figure><p>选项与参数：<br>-n：只显示sed匹配到的行。其余行不显示。<br>-i：可以直接操作原文件。默认情况下sed不会改变原文件，但是-i选项可以修改原文件，此选项应慎用。<br>-r：可以使用标准正则表达式。默认情况下sed只支持基本正则表达式，但是加上-r选项后则支持扩展正则表达式<br>-e：可以同时执行多个命令<br>常用格式：<br>(1)Sed [options] ‘script’ input_file……<br>(2)Sed [options] -f script_file input_file……<br>(3)Sed [options] ‘ADDR1,ADDR2command’ input_file……<br>(4)Sed [options] ‘/PATTERN/command’ input_file……<br>(5)Sed ‘/PATTERN1/,/PATTERN2/command’ input_file……</p><p>常用命令(command)如下：</p><ul><li>打印p</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># sed -n '3p' /etc/passwd--打印第3行</span></span><br><span class="line"><span class="section"># sed -n '1,3p' /etc/passwd--打印第1到第3行</span></span><br><span class="line"><span class="section"># sed -n '1,$p' /etc/passwd</span></span><br><span class="line"><span class="section"># nl /etc/passwd | sed -n '5,7p'--打印第5到第7行</span></span><br><span class="line"><span class="section"># head  -5 /etc/passwd |sed -ne '1p;4p'--打印第1行和第4行</span></span><br><span class="line"></span><br><span class="line"><span class="section"># nl /etc/passwd | sed -n '/root/p'--查找包含root的行</span></span><br><span class="line"><span class="section"># cat /etc/passwd | sed -n '/^root/p'</span></span><br><span class="line"></span><br><span class="line"><span class="section"># ifconfig eth1 | sed -n '2p' | awk -F: '&#123;print $2&#125;' | awk '&#123;print $1&#125;'--截取ip</span></span><br><span class="line"></span><br><span class="line"><span class="section"># head  -5 /etc/passwd |sed -ne '/^[[:upper:]]/p;/^[a-z]/p'--分别打印大写字母开头的行和小写字母开头的行</span></span><br><span class="line"><span class="section"># head  -5 /etc/passwd |sed -ne '/^[[:upper:]]/,/^[a-z]/p' --用正则表达式实现范围打印</span></span><br><span class="line"><span class="section"># head  -5 /etc/passwd |sed -ne '/^[[:upper:]]/,/nologin$/p'</span></span><br><span class="line"><span class="section"># head -5 /etc/passwd |sed -n '/^[^[:blank:]]/p' --打印非空格开头的行</span></span><br><span class="line"></span><br><span class="line">下面三条都是把有Accepted关键字的行打印出来</span><br><span class="line"><span class="section"># awk '$0~"Accepted" &#123;print $0&#125;' /var/log/ssh.log </span></span><br><span class="line"><span class="section"># sed -n '/Accepted/p' /var/log/ssh.log  </span></span><br><span class="line"><span class="section"># cat /var/log/ssh.log  | grep Accepted</span></span><br><span class="line"></span><br><span class="line">比较awk</span><br><span class="line"><span class="section"># head -5 /etc/passwd |cat -n | sed -n '1,4p'</span></span><br><span class="line"><span class="section"># head -5 /etc/passwd |cat -n | awk 'NR&lt;5 &#123;print $0&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="section"># head -5 /etc/passwd |cat -n | sed -n '1p;3p;5p'</span></span><br><span class="line"><span class="section"># head -5 /etc/passwd |cat -n | awk 'NR==1 || NR==3 || NR==5 &#123;print $0&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="section"># head -5 /etc/passwd |cat -n | sed -n '/root/p;/daemon/p;/lp/p'</span></span><br><span class="line"><span class="section"># head -5 /etc/passwd |cat -n | awk '$0~"root" || $0~"daemon" || $0~"lp" &#123;print $0&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>删除e<br>sed删除语法：<br>sed ‘范围d’ file<br>以行为单位删除，如果不指定范围，默认范围是整个文件。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># sed '1d' /etc/passwd 删除第一行，第二行2d，第三行3d，以此类推，最后一行$d</span></span><br><span class="line"><span class="section"># sed '1,3d' /etc/passwd 删除第1行到第3行，中间是逗号</span></span><br><span class="line"><span class="section"># sed '1d;3d' /etc/passwd删除第1行和第3行，中间是分号</span></span><br><span class="line"><span class="section"># sed -e '1d' -e '3d' /etc/passwd 删除第1行和第3行</span></span><br><span class="line"><span class="section"># sed --expression='1d' --expression='3d' /etc/passwd</span></span><br><span class="line"><span class="section"># sed '/^root/d' /etc/passwd使用正则表达式，要加双斜杠</span></span><br><span class="line"><span class="section"># sed '/root/,/sync/d' /etc/passwd 删除包含root到sync的行</span></span><br><span class="line"><span class="section"># sed '/root/!d' /etc/passwd!表示后面的命令对所有没有被选定的行发生作用</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># head -n 5 /etc/passwd |cat -n |sed  '2d'  指定删除第二行</span></span><br><span class="line"><span class="section"># head -n 5 /etc/passwd |cat -n |sed  '2,3d'    删除第二行到第三行，中间为逗号，表示范围</span></span><br><span class="line"><span class="section"># head -n 5 /etc/passwd |cat -n |sed  '1d;5d'   删除第一行和第五行，中间为分号，表示单独操作</span></span><br><span class="line"><span class="section"># head -n 5 /etc/passwd |cat -n |sed  '1d;5d;3d'</span></span><br><span class="line"><span class="section"># head -n 5 /etc/passwd |cat -n |sed  '1,3d;5d'</span></span><br><span class="line"><span class="section"># head -5 /etc/passwd |sed '/daemon/d'</span></span><br><span class="line"></span><br><span class="line">删除vsftpd.conf里所有的注释和空行</span><br><span class="line"><span class="section"># sed '/^#/d;/^$/d' /etc/vsftpd/vsftpd.conf</span></span><br></pre></td></tr></table></figure><ul><li>替换<br>sed替换语法：<br>sed ‘范围 s/老字符/新字符/标记’ file<br>sed ‘范围 s#老字符#新字符#标记’ file<br>如果不指定范围，默认范围是整个文件。<br>sed ‘y/老字符/新字符/‘</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># head -5 /etc/passwd | nl |sed '1,4s/nologin/NOLOGIN/g'</span></span><br><span class="line"><span class="section"># sed 's#nologin#NOLOGIN#g' /etc/passwdg是标记，表示全部，也可以使用数字，1,2,3等进行替换，#号只有替换的时候才能用</span></span><br><span class="line"><span class="section"># sed 's/nologin/NOLOGIN/g' /etc/passwd</span></span><br><span class="line"><span class="section"># sed '1s/root/--&amp;--/2' /etc/passwd老字符支持正则表达式，新字符不支持正则表达式，除了"\n\&amp;"，这里的"&amp;"表示前面的关键字</span></span><br><span class="line"><span class="section"># sed '1&#123;s/root/ROOT/;s/bin/BIN/&#125;' /etc/passwd  多次替换使用花括号和分号</span></span><br><span class="line"><span class="section"># sed 'y/abc/xyz/' file     y也是替换，a-&gt;x b-&gt;y c-&gt;z</span></span><br><span class="line"><span class="section"># cat /etc/sysconfig/network-scripts/ifcfg-eth0 | sed '/^onboot/c\onboot=yes'将onboot开头的行替换成onboot=yes，行替换</span></span><br><span class="line"><span class="section"># cat /etc/sysconfig/network-scripts/ifcfg-eth0 | sed 's/ONBOOT="no"/ONBOOT="yes"/'</span></span><br></pre></td></tr></table></figure><ul><li>修改之后保存</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># sed -i '/^root/a\the first line' file--修改源文件的操作要谨慎</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍sed命令的用法。&lt;br&gt;
    
    </summary>
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/categories/linux-basic/"/>
    
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/tags/linux-basic/"/>
    
  </entry>
  
  <entry>
    <title>Linux进程管理</title>
    <link href="https://dsxlinux.github.io/2018/06/10/linux-process/"/>
    <id>https://dsxlinux.github.io/2018/06/10/linux-process/</id>
    <published>2018-06-09T16:14:00.000Z</published>
    <updated>2018-06-15T06:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Linux进程相关的命令，ps、kill、top等。<br><a id="more"></a></p><h4 id="1-ps命令"><a href="#1-ps命令" class="headerlink" title="1. ps命令"></a>1. ps命令</h4><p>ps常规用法</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ps aux查看所有进程</span></span><br><span class="line"><span class="section"># ps -ef查看所有进程</span></span><br><span class="line"><span class="section"># ps -f -u apache查看某个用户的进程</span></span><br><span class="line"><span class="section"># ps -f -C httpd通过进程名显示进程</span></span><br><span class="line"><span class="section"># ps -f -p 3150,7298,6544通过进程id显示进程</span></span><br><span class="line"><span class="section"># ps aux --sort=-pcpu,+pmem以cpu使用量排序，如果cpu使用量相同，则以内存使用量排序</span></span><br><span class="line"><span class="section"># ps -f --forest -C httpd显示ASCII进程树</span></span><br><span class="line"><span class="section"># ps -o pid,uname,comm -C httpd显示父进程的子进程</span></span><br><span class="line"><span class="section"># ps -o pid,uname,comm --ppid 3438</span></span><br><span class="line"><span class="section"># ps -e -o pid,comm,etime  显示进程已运行的时间</span></span><br><span class="line"><span class="section"># watch -n 1 'ps -e -o pid,uname,cmd,pmem,pcpu --sort=-pmem,-pcpu | head -15'</span></span><br><span class="line"></span><br><span class="line">还有一个pstree命令</span><br><span class="line"><span class="section"># pstree</span></span><br><span class="line"><span class="section"># pstree -a</span></span><br><span class="line"><span class="section"># pstree -p apache</span></span><br></pre></td></tr></table></figure><h4 id="2-top相关命令"><a href="#2-top相关命令" class="headerlink" title="2. top相关命令"></a>2. top相关命令</h4><ul><li><p>top命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># top</span></span><br><span class="line"><span class="section"># top -b -n 1</span></span><br><span class="line"><span class="section"># top -b -n 1 -p 1</span></span><br></pre></td></tr></table></figure></li><li><p>htop命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install htop -y没有htop命令就安装</span></span><br><span class="line"><span class="section"># htop</span></span><br><span class="line"><span class="section"># htop -d 22秒刷新一次</span></span><br><span class="line"><span class="section"># htop -C 没有颜色</span></span><br><span class="line"><span class="section"># htop -u apacheu=user</span></span><br><span class="line"><span class="section"># htop -p xxx，xxxp=pid</span></span><br></pre></td></tr></table></figure></li><li><p>dstat 命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># dstat直接运行</span></span><br><span class="line"><span class="section"># dstat -nn是net</span></span><br><span class="line"><span class="section"># dstat -dd是disk</span></span><br><span class="line"><span class="section"># dstat -mm是memory</span></span><br><span class="line"><span class="section"># dstat -ll是load average 显示系统负载情况</span></span><br></pre></td></tr></table></figure></li><li><p>glances命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># yum install epel-release -y</span></span><br><span class="line"><span class="section"># yum install glances -y没有glances命令就安装</span></span><br><span class="line"><span class="section"># glances</span></span><br><span class="line"><span class="section"># glances -t 2刷新频率2秒，默认是1秒</span></span><br><span class="line"><span class="section"># yum install python-jinja2 -y</span></span><br><span class="line"><span class="section"># glances -o csv -f glances.csv输出为csv格式</span></span><br><span class="line"><span class="section"># glances -o HTML -f /var/www/html/输出为html格式</span></span><br><span class="line"><span class="section"># glances -s -B 192.168.1.153 -p 4000 -P123在服务器端启动</span></span><br><span class="line"><span class="section"># glances -c 192.168.1.153 -p 4000 -P123 再客户端连接</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-kill命令"><a href="#3-kill命令" class="headerlink" title="3. kill命令"></a>3. kill命令</h4><p>发送指定的信号到相应进程。 </p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># kill -l查看有那些信号</span></span><br><span class="line"><span class="section"># kill -9 xxx给xxx进程发生9号信号</span></span><br></pre></td></tr></table></figure><p>查找进程PID的命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ps -ef | grep httpd</span></span><br><span class="line"><span class="section"># pstree -p apache</span></span><br><span class="line"><span class="section"># pidof httpd</span></span><br><span class="line"><span class="section"># pgrep httpd</span></span><br><span class="line"><span class="section"># lsof /usr/sbin/httpd</span></span><br></pre></td></tr></table></figure><p>杀死进程的命令</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># kill -9 pid</span></span><br><span class="line"><span class="section"># killall httpd</span></span><br><span class="line"><span class="section"># pkill httpd</span></span><br><span class="line"><span class="section"># skill httpd</span></span><br></pre></td></tr></table></figure><p>lsof命令<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lsof 打开文件列表</span><br><span class="line">lsof /usr/sbin/httpd查找某个文件相关的进程</span><br><span class="line">lsof -c mysql查找某个程序进程所打开的文件信息</span><br><span class="line">lsof -c mysql -c apache多个</span><br><span class="line">lsof -p 1通过某个进程号显示该进行打开的文件</span><br><span class="line">lsof -p 1,2,3多个</span><br><span class="line">lsof -i列出所有的网络连接</span><br><span class="line">lsof -i tcp列出所有的tcp连接</span><br><span class="line">lsof -i udp列出所有的udp连接</span><br><span class="line">lsof -i :3306列出谁在使用某个端口</span><br></pre></td></tr></table></figure></p><h4 id="4-前台进程和后台进程"><a href="#4-前台进程和后台进程" class="headerlink" title="4 . 前台进程和后台进程"></a>4 . 前台进程和后台进程</h4><p>(1)command &amp;让进程在后台运行<br>(2) jobs –l 查看后台运行的进程<br>(3)fg %n 让后台运行的进程n到前台来<br>(4)bg %n 让进程n到后台去<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># glances -s -B 127.0.0.1 &amp;</span></span><br><span class="line"><span class="section"># glances -s -B 127.0.0.1暂停程序运行CTRL+Z</span></span><br><span class="line"><span class="section"># jobs -l查看暂停的程序</span></span><br><span class="line"><span class="section"># bg %1切换程序至后台</span></span><br><span class="line"><span class="section"># fg %1切换程序至前台</span></span><br><span class="line"><span class="section"># kill %1终止后台程序</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Linux进程相关的命令，ps、kill、top等。&lt;br&gt;
    
    </summary>
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/categories/linux-basic/"/>
    
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/tags/linux-basic/"/>
    
  </entry>
  
  <entry>
    <title>Linux文本文件处理(3)</title>
    <link href="https://dsxlinux.github.io/2018/06/09/linux-awk/"/>
    <id>https://dsxlinux.github.io/2018/06/09/linux-awk/</id>
    <published>2018-06-09T15:16:00.000Z</published>
    <updated>2018-06-09T15:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍awk命令的用法。<br><a id="more"></a></p><h4 id="1-awk简介"><a href="#1-awk简介" class="headerlink" title="1. awk简介"></a>1. awk简介</h4><p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk。<br>awk名字来源于三位创造者Aho、Weinberger和Kernighan统称。<br>awk擅长处理文本数据。</p><h4 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h4><p>awk [-Ffs] [-v var=value] [program | -f progfile …] [file …]<br>选项与参数：<br>-F 指定域分隔符，例如：-F “|”，即以|作为域分隔符，默认分隔符为一个或多个空格或TAB，即”[[:space:]][[:space:]]*”。<br>-v 定义变量，从shell给awk传递变量，如-vDATE=$DATE，即将shell中$DATE变量值传递给awk变量DATE。<br>-f 指定脚本文件，例如-f progfile。<br>program 操作模块</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># awk -F ":" '&#123;print $1,$2&#125;' /etc/passwd     -F 分隔符 $1是第一列 $2是第二列</span></span><br><span class="line"><span class="section"># awk '&#123;print $0&#125;' /etc/passwd打印所有列</span></span><br><span class="line"><span class="section"># awk -F: '&#123;print $1&#125;' /etc/passwd 打印第一列</span></span><br><span class="line"><span class="section"># awk -F: '&#123;print $1"\thaha\t"$3&#125;' /etc/passwd  打印第一，三列</span></span><br><span class="line"><span class="section"># awk -F":" '&#123;print $1" 的uid是 "$3&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># echo "haha,hehe.heihei" |awk -F"[,.]" '&#123;print $1&#125;'   分隔符可以有多个</span></span><br></pre></td></tr></table></figure><ul><li>模式匹配<br>格式：awk ‘/patten/ {action} ‘ filename<br> //纯字符匹配<br> !//纯字符不匹配<br> ~//字段值匹配<br> !~//字段值不匹配<br> ~/a1|a2/字段值匹配a1或a2</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># awk '/mysql/' /etc/passwd</span></span><br><span class="line"><span class="section"># awk '/mysql/&#123;print &#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk '/mysql/&#123;print $0&#125;' /etc/passwd                   --三条指令结果一样</span></span><br><span class="line"><span class="section"># awk '!/mysql/&#123;print $0&#125;' /etc/passwd                  --输出不匹配mysql的行</span></span><br><span class="line"><span class="section"># awk '/mysql|mail/&#123;print&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk '/mysql|postfix|root/' /etc/passwd</span></span><br><span class="line"><span class="section"># awk '!/mysql|mail/&#123;print&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk '/mail/,/mysql/&#123;print&#125;' /etc/passwd             --区间匹配</span></span><br><span class="line"><span class="section"># awk '/^root/,/^mail/' /etc/passwd  --区间匹配</span></span><br><span class="line"><span class="section"># awk '/[2][7][7]*/&#123;print $0&#125;' /etc/passwd              --匹配包含27为数字开头的行，如27，277，2777...</span></span><br><span class="line"><span class="section"># awk -F: '$1~/mail/&#123;print $1&#125;' /etc/passwd             --$1匹配指定内容才显示</span></span><br><span class="line"><span class="section"># awk -F: '$3~/^0$/&#123;print $1&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk -F: '&#123;if($1~/mail/) print $1&#125;' /etc/passwd       --与上面相同</span></span><br><span class="line"><span class="section"># awk -F: '$1!~/mail/&#123;print $1&#125;' /etc/passwd            --不匹配</span></span><br><span class="line"><span class="section"># awk -F: '$1!~/mail|mysql/&#123;print $1&#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure><ul><li>操作模块</li></ul><p>awk  [-Ffs]   ‘BEGIN {处理文件前执行的代码块} ｛处理文件过程中执行的代码块} END {处理文件后执行的代码块}’   filename</p><p>BEGIN｛<br>｝<br>｛</p><p>｝<br>END｛<br>｝</p><p>BEGIN和END只执行一次。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># awk -F: '&#123;print "用户名\t\tUID"&#125;&#123;print $1"\t"$3&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk -F: 'BEGIN&#123;print "用户名\t\tUID"&#125;&#123;print $1"\t"$3&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="section"># head -1 /etc/passwd |awk -F: '&#123;print $7":"$6":"$5":"$4":"$3":"$2":"$1&#125;'</span></span><br><span class="line"><span class="section"># head -1 /etc/passwd |awk -F: 'BEGIN &#123;OFS=":"&#125;&#123;print $7,$6,$5,$4,$3,$2,$1&#125;'</span></span><br><span class="line"><span class="section"># head -1 /etc/passwd | awk 'BEGIN&#123;FS=":"&#125;&#123;OFS="@"; print $7,$6,$5,$4,$3,$2,$1&#125;'</span></span><br><span class="line"><span class="section"># head -1 /etc/passwd | awk 'BEGIN&#123;FS=":";OFS="#"&#125;&#123;print $7,$6,$5,$4,$3,$2,$1&#125;'</span></span><br><span class="line"></span><br><span class="line">awk可以用做小数（浮点数）的运算</span><br><span class="line"><span class="section"># echo $[1.23*2]--错误做法</span></span><br><span class="line"><span class="section"># echo |awk '&#123;print 1.23*2&#125;'--正确做法</span></span><br><span class="line"><span class="section"># echo 1.23*2 | bc--正确做法</span></span><br><span class="line"><span class="section"># awk 'BEGIN&#123;print 1.23*2&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>内置变量</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>$0</td><td>当前记录行，代表一行记录</td></tr><tr><td>$1到n</td><td>当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td>FS</td><td>输入字段分隔符，默认是空格或tab</td></tr><tr><td>NF</td><td>当前记录中的字段个数，就是有多少列，一般取最后一列字段</td></tr><tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始</td></tr><tr><td>RS</td><td>输入的记录分隔符，默认为换行符</td></tr><tr><td>OFS</td><td>输出字段分隔符，默是空格</td></tr><tr><td>ORS</td><td>输出的记录分隔符，默认为换行符</td></tr></tbody></table><p>示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">打印第五行</span><br><span class="line"><span class="section"># head -5 /etc/passwd |tail -1</span></span><br><span class="line"><span class="section"># awk 'NR==5  &#123;print $0&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk '&#123;if (NR==5) print $0&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">打印第五行和第六行</span><br><span class="line"><span class="section"># awk 'NR==5 || NR==6 &#123;print $0&#125;' /etc/passwd</span></span><br><span class="line"><span class="section"># awk 'NR&gt;=5 &amp;&amp; NR&lt;=6 &#123;print $0&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">打印五到十行，并在前面加上行号</span><br><span class="line"><span class="section"># awk 'NR&lt;=10 &amp;&amp; NR&gt;=5 &#123;print FNR,$0&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">打印奇数行 (删除偶数行)</span><br><span class="line"><span class="section"># awk 'NR%2==1 &#123;print FNR,$0&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">打印偶数行 (删除奇数行)</span><br><span class="line"><span class="section"># awk 'NR%2==0 &#123;print FNR,$0&#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍awk命令的用法。&lt;br&gt;
    
    </summary>
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/categories/linux-basic/"/>
    
    
      <category term="linux-basic" scheme="https://dsxlinux.github.io/tags/linux-basic/"/>
    
  </entry>
  
</feed>
