<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech2k18</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dsxlinux.github.io/"/>
  <updated>2018-09-05T06:38:40.000Z</updated>
  <id>https://dsxlinux.github.io/</id>
  
  <author>
    <name>Dong Shouxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python数据库编程</title>
    <link href="https://dsxlinux.github.io/2018/09/05/python09/"/>
    <id>https://dsxlinux.github.io/2018/09/05/python09/</id>
    <published>2018-09-05T06:28:02.000Z</published>
    <updated>2018-09-05T06:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python数据库编程相关知识。<br><a id="more"></a></p><h4 id="1-安装MySQL和MySQL驱动"><a href="#1-安装MySQL和MySQL驱动" class="headerlink" title="1.安装MySQL和MySQL驱动"></a>1.安装MySQL和MySQL驱动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install gcc python-devel mysql-devel zlib-devel openssl-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pip install MySQL-python</span></span><br></pre></td></tr></table></figure><h4 id="2-数据库连接"><a href="#2-数据库连接" class="headerlink" title="2.数据库连接"></a>2.数据库连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/pyton</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line">conn = MySQLdb.connect(user=<span class="string">'root'</span>,passwd=<span class="string">''</span>,host=<span class="string">'localhost'</span>)//连接数据库</span><br><span class="line">cur = conn.curson()//创建连接游标</span><br><span class="line">conn.select_db(<span class="string">'test'</span>)//选择数据库</span><br><span class="line">cur.execute(<span class="string">'create table info(id tinyint)'</span>)//执行sql语句</span><br><span class="line">cur.execute(<span class="string">'insert into info values(1),(2),(3)'</span>)//执行sql语句</span><br><span class="line">cur.execute(<span class="string">'select * from info'</span>)//执行sql语句</span><br><span class="line">cur.fetchone()//执行sql语句</span><br><span class="line">cur.scroll(<span class="number">0</span>,<span class="string">'absolute'</span>)</span><br><span class="line">cur.fetchmany(<span class="number">3</span>)</span><br><span class="line">cur.fetchmany(cur.execute(<span class="string">'select * from info'</span>))</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python数据库编程相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python协程</title>
    <link href="https://dsxlinux.github.io/2018/09/05/python08/"/>
    <id>https://dsxlinux.github.io/2018/09/05/python08/</id>
    <published>2018-09-05T06:10:45.000Z</published>
    <updated>2018-09-05T06:20:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python协程相关知识。<br><a id="more"></a></p><h4 id="1-关于协程"><a href="#1-关于协程" class="headerlink" title="1.关于协程"></a>1.关于协程</h4><p>线程和进程都是系统帮咱们开辟的，不管是thread还是process他内部都是调用的系统的API,而对于协程来说它和系统毫无关系;<br>协程不同于线程的是，线程是抢占式的调度，而协程是协同式的调度，也就是说，协程需要自己做调度。</p><p>优点：<br>无需线程上下文切换的开销，协程避免了无意义的调度，由此可以提高性能<br>无需原子操作锁定及同步的开销<br>方便切换控制流，简化编程模型<br>高并发+高扩展性+低成本</p><h4 id="2-实现协程"><a href="#2-实现协程" class="headerlink" title="2.实现协程"></a>2.实现协程</h4><ul><li><p>yield实现协程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"要开始啃骨头了..."</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"\033[31;1m[consumer] %s\033[0m "</span> % name)</span><br><span class="line">        bone = <span class="keyword">yield</span></span><br><span class="line">        print(<span class="string">"[%s] 正在啃骨头 %s"</span> % (name, bone))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(obj1, obj2)</span>:</span></span><br><span class="line">    obj1.send(None)    //启动obj1这个生成器,第一次必须用None  &lt;==&gt; obj1.__next__()</span><br><span class="line">    obj2.send(None)    //启动obj2这个生成器,第一次必须用None  &lt;==&gt; obj2.__next__()</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"\033[32;1m[producer]\033[0m 正在生产骨头 %s"</span> % n)</span><br><span class="line">        obj1.send(n)</span><br><span class="line">        obj2.send(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    con1 = consumer(<span class="string">"消费者A"</span>)</span><br><span class="line">    con2 = consumer(<span class="string">"消费者B"</span>)</span><br><span class="line">    producer(con1, con2)</span><br></pre></td></tr></table></figure></li><li><p>greenlet实现协程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="comment"># greenlet 其实就是手动切换；gevent是对greenlet的封装，可以实现自动切换</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"123"</span>)</span><br><span class="line">    gr2.switch()   <span class="comment"># 切换去执行test2</span></span><br><span class="line">    print(<span class="string">"456"</span>)</span><br><span class="line">    gr2.switch()   <span class="comment"># 切换回test2之前执行到的位置，接着执行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span>    </span><br><span class="line">    print(<span class="string">"789"</span>)</span><br><span class="line">    gr1.switch()   <span class="comment"># 切换回test1之前执行到的位置，接着执行</span></span><br><span class="line">    print(<span class="string">"666"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)   <span class="comment"># 启动一个协程 注意test1不要加()</span></span><br><span class="line">gr2 = greenlet(test2)   <span class="comment">#</span></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure></li><li><p>gevent 实现协程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"func1 running"</span>)</span><br><span class="line">    gevent.sleep(<span class="number">2</span>)             <span class="comment"># 内部函数实现io操作</span></span><br><span class="line">    print(<span class="string">"switch func1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"func2 running"</span>)</span><br><span class="line">    gevent.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"switch func2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"func3  running"</span>)</span><br><span class="line">    gevent.sleep(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">"func3 done.."</span>)</span><br><span class="line"></span><br><span class="line">gevent.joinall([gevent.spawn(func1),</span><br><span class="line">                gevent.spawn(func2),</span><br><span class="line">                gevent.spawn(func3),</span><br><span class="line">                ])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python协程相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python线程</title>
    <link href="https://dsxlinux.github.io/2018/09/05/python07/"/>
    <id>https://dsxlinux.github.io/2018/09/05/python07/</id>
    <published>2018-09-05T03:33:20.000Z</published>
    <updated>2018-09-05T06:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python线程相关知识。<br><a id="more"></a></p><h4 id="1-开启线程"><a href="#1-开启线程" class="headerlink" title="1.开启线程"></a>1.开启线程</h4><ul><li><p>利用threading.Thread()类实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'%s say hello'</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">'egon'</span>,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过继承Thread类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sayhi</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"%s say hello"</span> %self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    t = Sayhi(<span class="string">"egon"</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">"主线程"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>join和setDaemon<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'%s say hello'</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">'egon'</span>,))</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>) <span class="comment">#设置为守护线程，主线程结束，子线程也跟着线束。</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join()  <span class="comment">#主线程等待子线程运行结束</span></span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br><span class="line">    print(t.is_alive())</span><br></pre></td></tr></table></figure></p><h4 id="2-锁机制"><a href="#2-锁机制" class="headerlink" title="2.锁机制"></a>2.锁机制</h4><ul><li><p>同步锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">100</span>   <span class="comment">#设定一个共享变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNum</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        temp = num</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        num = temp<span class="number">-1</span>    <span class="comment">#对此公共变量进行-1操作</span></span><br><span class="line"></span><br><span class="line">thread_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = threading.Lock()   <span class="comment">#由于同一个进程内的线程共享此进程的资源，所以不需要给每个线程传这把锁就可以直接用。</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = threading.Thread(target=addNum)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:  <span class="comment">#等待所有线程执行完毕</span></span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">"result: "</span>,num)</span><br></pre></td></tr></table></figure></li><li><p>死锁与递归锁<br>所谓死锁：是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态，或系统产生了死锁。这此永远在互相等待的进程称死锁进程。<br>锁提供如下方法：<br>(1)Lock.acquire([blocking])<br>(2)Lock.release()<br>(3)threading.Lock() 加载线程的锁对象，是一个基本的锁对象，一次只能一个锁定，其余锁请求，需等待锁释放后才能获取<br>(4)threading.RLock() 多重锁，在同一线程中可用被多次acquire。如果使用RLock，那么acquire和release必须成对出现，<br>调用了n次acquire锁请求，则必须调用n次的release才能在线程中释放锁对象</p></li></ul><p>无锁：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    num +=i</span><br><span class="line">    <span class="keyword">print</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s thread start!'</span>%(time.ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">       t =threading.Thread(target=sum_num,args=(i,))</span><br><span class="line">       t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt,e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"you stop the threading"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s thread end!'</span>%(time.ctime())</span><br></pre></td></tr></table></figure></p><p>引入锁：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span><span class="params">(i)</span>:</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    num +=i</span><br><span class="line">    <span class="keyword">print</span> num</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s thread start!'</span>%(time.ctime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   lock=threading.Lock()</span><br><span class="line">   list = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">       t =threading.Thread(target=sum_num,args=(i,))</span><br><span class="line">       list.append(t)</span><br><span class="line">       t.start()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> threadinglist <span class="keyword">in</span> list:</span><br><span class="line">        threadinglist.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt,e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"you stop the threading"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s thread end!'</span>%(time.ctime())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python线程相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python进程</title>
    <link href="https://dsxlinux.github.io/2018/09/04/python06/"/>
    <id>https://dsxlinux.github.io/2018/09/04/python06/</id>
    <published>2018-09-04T08:37:42.000Z</published>
    <updated>2018-09-05T03:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python进程相关知识。<br><a id="more"></a></p><h4 id="1-python并发编程"><a href="#1-python并发编程" class="headerlink" title="1.python并发编程"></a>1.python并发编程</h4><ul><li><p>multiprocessing模块介绍<br>multiprocessing模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。</p></li><li><p>Process类的介绍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process(group=<span class="keyword">None</span>, target=<span class="keyword">None</span>, name=<span class="keyword">None</span>, args=(), kwargs=&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>参数介绍：<br>group 参数未使用，留作未来扩展用，值始终为None<br>target 参数指定子进程要执行的任务，是一个可调用对象，一般为函数。<br>args 表示调用对象的位置参数元组，如args=(1,2,”egon”,)<br>kwargs 表示调用对象的字典，kwargs={“name”:”egon”,”age”:18}<br>name 为子进程的名称</p><p>方法介绍：<br>p.daemon：默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为True后，p不能创建自己的新进程；必须在p.start()之前设置。<br>p.name：进程的名称<br>p.pid：进程的pid<br>p.exitcode：进程在运行时为None，如果为-N，表示被信号N结束。（了解即可）<br>p.authkey：进程的身份验证键，默认是由os.urandom()随机生成的32字符的字符串。<br>p.terminate() 关闭进程，不会立即关闭，因为cpu会有延迟。<br>p.is_alive() 判断进程是否存活，True或False<br>p.daemon=True 默认为False，设置p为守护进程，禁止创建子进程，并且父进程死了，p跟着一起死。注意：一定要在p.start()前设置。<br>p.join(x) 主进程等待p运行完毕，等待x秒就不再等了。</p><ul><li>Process类的使用<br>方法一：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'%s function beging'</span> %name)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    print(<span class="string">'%s function end'</span> %name)</span><br><span class="line"></span><br><span class="line">p1=Process(target=fun,args=(<span class="string">'a1'</span>,))</span><br><span class="line">p2=Process(target=fun,args=(<span class="string">'a2'</span>,))</span><br><span class="line">p3=Process(target=fun,args=(<span class="string">'a3'</span>,))</span><br><span class="line">p4=Process(target=fun,args=(<span class="string">'a4'</span>,))</span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line">print(<span class="string">"主进程"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>方法二：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sing</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super(sing, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s is singing."</span> % self.name)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">"%s is sing end."</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = sing(<span class="string">"egon"</span>)</span><br><span class="line">    p2 = sing(<span class="string">"alex"</span>)</span><br><span class="line">    p3 = sing(<span class="string">"lisi"</span>)</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    print(<span class="string">"主进程"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python进程相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python网络编程</title>
    <link href="https://dsxlinux.github.io/2018/09/04/python05/"/>
    <id>https://dsxlinux.github.io/2018/09/04/python05/</id>
    <published>2018-09-04T08:10:44.000Z</published>
    <updated>2018-09-04T08:30:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python网络编程相关知识。<br><a id="more"></a></p><h4 id="1-什么是Socket"><a href="#1-什么是Socket" class="headerlink" title="1.什么是Socket"></a>1.什么是Socket</h4><p>Socket又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p><p>socket()函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.socket([family[, type[, proto]]])</span><br></pre></td></tr></table></figure></p><p>参数说明：<br>family: 套接字家族可以使AF_UNIX或者AF_INET<br>type: 套接字类型可以根据是面向连接的还是非连接分为SOCK_STREAM或SOCK_DGRAM<br>protocol: 一般不填默认为0.</p><p>Socket对象(内建)方法</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>服务器端套接字</td><td></td></tr><tr><td>s.bind()</td><td>绑定地址（host,port）到套接字， 在AF_INET下,以元组（host,port）的形式表示地址。</td></tr><tr><td>s.listen()</td><td>开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</td></tr><tr><td>s.accept()</td><td>被动接受TCP客户端连接,(阻塞式)等待连接的到来</td></tr><tr><td>客户端套接字</td><td></td></tr><tr><td>s.connect()</td><td>主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td></tr><tr><td>s.connect_ex()</td><td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr><tr><td>公共用途的套接字函数</td><td></td></tr><tr><td>s.recv()</td><td>接收TCP数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</td></tr><tr><td>s.send()</td><td>发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</td></tr><tr><td>s.sendall()</td><td>完整发送TCP数据，完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td></tr><tr><td>s.recvfrom()</td><td>接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</td></tr><tr><td>s.sendto()</td><td>发送UDP数据，将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td></tr><tr><td>s.close()</td><td>关闭套接字</td></tr><tr><td>s.getpeername()</td><td>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td></tr><tr><td>s.getsockname()</td><td>返回套接字自己的地址。通常是一个元组(ipaddr,port)</td></tr><tr><td>s.setsockopt(level,optname,value)</td><td>设置给定套接字选项的值。</td></tr><tr><td>s.getsockopt(level,optname[.buflen])</td><td>返回套接字选项的值。</td></tr><tr><td>s.settimeout(timeout)</td><td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td></tr><tr><td>s.gettimeout()</td><td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td></tr><tr><td>s.fileno()</td><td>返回套接字的文件描述符。</td></tr><tr><td>s.setblocking(flag)</td><td>如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td></tr><tr><td>s.makefile()</td><td>创建一个与该套接字相关连的文件</td></tr></tbody></table><h4 id="2-socket程序实例"><a href="#2-socket程序实例" class="headerlink" title="2.socket程序实例"></a>2.socket程序实例</h4><ul><li>示例一<br>服务器端：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">sock.bind((host,port))</span><br><span class="line">sock.listen(<span class="number">2</span>)</span><br><span class="line">conn,addr = sock.accept()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'建立链接'</span>,addr</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">data = conn.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:<span class="keyword">break</span></span><br><span class="line">conn.sendall(data)</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li></ul><p>客户端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">sock.connect((host,port))</span><br><span class="line"></span><br><span class="line">sock.sendall(<span class="string">'Hello Server'</span>)</span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">sock.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> repr(data)</span><br></pre></td></tr></table></figure></p><ul><li>示例二<br>服务器端：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPHandler</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        self.data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                        self.request.sendall(self.data.upper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">        host,port = <span class="string">"localhost"</span>,<span class="number">9999</span></span><br><span class="line">        server = SocketServer.TCPServer((host,port),MyTCPHandler)</span><br><span class="line"><span class="comment"># server = SocketServer.ThreadingTCPServer((host,port),MyTCPHandler)</span></span><br><span class="line">        server.serve_forever()</span><br></pre></td></tr></table></figure></li></ul><p>客户端：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">sock.connect((host,port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        data = raw_input(<span class="string">'Input:'</span>)</span><br><span class="line">        sock.sendall(data)</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">print</span> repr(data)</span><br><span class="line"></span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python网络编程相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python异常处理</title>
    <link href="https://dsxlinux.github.io/2018/09/04/python04/"/>
    <id>https://dsxlinux.github.io/2018/09/04/python04/</id>
    <published>2018-09-04T07:17:23.000Z</published>
    <updated>2018-09-04T08:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python异常处理相关知识。<br><a id="more"></a></p><h4 id="1-错误和异常"><a href="#1-错误和异常" class="headerlink" title="1.错误和异常"></a>1.错误和异常</h4><ul><li><p>语法错误<br>这种错误过不了Python解释器的语法检测，必须在程序执行前就改正。</p></li><li><p>逻辑错误<br>比如：除数为0，输入的数据类型不匹配等。</p></li></ul><h4 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2.异常处理"></a>2.异常处理</h4><ul><li><p>如何进行异常处理？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>中的代码一旦检测到异常类型<span class="number">1</span>，就执行这个位置的逻辑</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">2</span>：</span><br><span class="line">    <span class="keyword">try</span>中的代码一旦检测到异常类型<span class="number">2</span>，就执行这个位置的逻辑</span><br><span class="line"><span class="keyword">finally</span>：</span><br><span class="line">    无论是否有异常，都会执行这个位置的逻辑，通常是进行清理工作</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li><li><p>assert 断言<br>python assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。可以理解assert断言语句为raise-if-not，用来测试表示式，其返回值为假，就会触发异常。<br>下面做一些assert用法的语句供参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span>==<span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span>+<span class="number">2</span>==<span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> len([<span class="string">'my boy'</span>,<span class="number">12</span>])&lt;<span class="number">10</span></span><br><span class="line"><span class="keyword">assert</span> range(<span class="number">4</span>)==[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><p>如何为assert断言语句添加异常参数?<br>assert的异常参数，其实就是在断言表达式后添加字符串信息，用来解释断言并更好的知道是哪里出了问题。格式如下：<br>assert expression [, arguments]<br>assert 表达式 [, 参数]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> len(lists) &gt;=<span class="number">5</span>,<span class="string">'列表元素个数小于5'</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span>==<span class="number">1</span>,<span class="string">'2不等于1'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python异常处理相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象</title>
    <link href="https://dsxlinux.github.io/2018/09/04/python03/"/>
    <id>https://dsxlinux.github.io/2018/09/04/python03/</id>
    <published>2018-09-04T02:43:55.000Z</published>
    <updated>2018-09-04T07:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python面向对象相关知识。<br><a id="more"></a></p><h4 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1.类和对象"></a>1.类和对象</h4><p>(1)类的定义</p><ul><li><p>经典类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span>:</span></span><br><span class="line">statements</span><br></pre></td></tr></table></figure></li><li><p>新型类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span><span class="params">(object)</span>:</span></span><br><span class="line">statements</span><br></pre></td></tr></table></figure></li><li><p>对象的创建<br>object = class_name()</p></li></ul><p>(2)属性和方法</p><ul><li><p>类的属性<br>类的属性分为公有属性和私有属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></span><br><span class="line">pub = <span class="number">0</span>//公有属性</span><br><span class="line">__pri = <span class="number">0</span>//私有属性</span><br></pre></td></tr></table></figure></li><li><p>类的方法<br>类的方法也分为公有方法和私有方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pub</span><span class="params">(self)</span>:</span>//公有方法</span><br><span class="line"><span class="keyword">print</span> <span class="string">'pubilic function'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__pri</span><span class="params">(self)</span>:</span>//私有方法</span><br><span class="line"><span class="keyword">print</span> <span class="string">'private function'</span></span><br></pre></td></tr></table></figure></li><li><p>内部类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">inner</span>:</span></span><br><span class="line">pub = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'inner class'</span></span><br></pre></td></tr></table></figure></li></ul><p>(3)类的内置方法</p><table><thead><tr><th>内置方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>init</strong>(self,…)</td><td>初始化对象，在创建新对象时调用</td></tr><tr><td><strong>del</strong>(self)</td><td>释放对象，在对象被删除之前调用</td></tr><tr><td><strong>new</strong>(cls,*args,**kwd)</td><td>实例的生成操作</td></tr><tr><td><strong>str</strong>(self)</td><td>在使用print语句时调用</td></tr><tr><td><strong>getitem</strong>(self,key)</td><td>获取序列的索引key对应的值，等价于seq[key]</td></tr><tr><td><strong>len</strong>(self)</td><td>在调用内联函数len()时被调用</td></tr><tr><td><strong>cmp</strong>(src,dst)</td><td>比较两个对象src和dst</td></tr><tr><td><strong>getattr</strong>(s,name)</td><td>获取属性的值</td></tr><tr><td><strong>setattr</strong>(s,name,val)</td><td>设置属性的值</td></tr><tr><td><strong>delattr</strong>(s,name)</td><td>删除name属性</td></tr><tr><td><strong>getattribute</strong>()</td><td>与<strong>getattr</strong>(s,name)类似</td></tr><tr><td><strong>gt</strong>(self,other)</td><td>判断self对象是否大于other对象</td></tr><tr><td><strong>lt</strong>(self,other)</td><td>判断self对象是否小于other对象</td></tr><tr><td><strong>ge</strong>(self,other)</td><td>判断self对象是否大于或等于other对象</td></tr><tr><td><strong>le</strong>(self,other)</td><td>判断self对象是否小于或等于other对象</td></tr><tr><td><strong>eq</strong>(self,other)</td><td>判断self对象是否等于other对象</td></tr><tr><td><strong>call</strong>(self,* args)</td><td>把实例对象作为函数调用</td></tr></tbody></table><h4 id="2-继承与派生"><a href="#2-继承与派生" class="headerlink" title="2.继承与派生"></a>2.继承与派生</h4><p>(1)关于继承<br>继承是一种创建新类的方式，在python中，新建的类可以继承一个或多个父类，父类又可以称为基类或超类，新建的类称为派生类或子类。<br>python中类的继承分为：<br>  单继承：子类只继承一个父类<br>  多继承：子类继承多个父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass1</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass2</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass1</span><span class="params">(ParentClass1)</span>:</span></span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span><span class="params">(ParentClass1,ParentClass2)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>查看子类继承了哪些父类<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubClass1.__bases__</span><br><span class="line">(&lt;class '__main__.ParentClass1'&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubClass2.__bases__</span><br><span class="line">(&lt;class '__main__.ParentClass1'&gt;, &lt;class '__main__.ParentClass2'&gt;)</span><br></pre></td></tr></table></figure></p><p>如果没有指定基类（或叫父类），python的类会默认继承object类，object是所有python类的基类，它提供了一些常见方法（如<strong>str</strong>）的实现。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ParentClass1.__bases__</span><br><span class="line">(&lt;class 'object'&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ParentClass2.__bases__</span><br><span class="line">(&lt;class 'object'&gt;,)</span><br></pre></td></tr></table></figure></p><p>(2)继承顺序<br>   当类是经典类时，多继承情况下，会按照深度优先方式查找<br>   当类是新式类时，多继承情况下，会按照广度优先方式查找<br>   只有Python2中才有新式类和经典类之分，Python3中统一都是新式类</p><p>(3)继承原理<br>对于你定义的每一个类，python都会计算出一个方法解析顺序（MRO）列表，这个MRO列表就是一个简单的所有蕨类的线性顺序列表，例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>F.mro() <span class="comment">#等同于F.__mro__ </span></span><br><span class="line">[&lt;class '__main__.F'&gt;, &lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.E'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;]</span><br></pre></td></tr></table></figure></p><p>(4)子类中调用父类的方法<br>方法一： 父类名.父类方法()<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Parentclass:</span><br><span class="line">        def __init__(self,name,age)</span><br><span class="line">                self.name = name</span><br><span class="line">                self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Subclass(Parentclass):</span><br><span class="line">        def __init__(self,name,age,sex)</span><br><span class="line">                Parentclass.__init__(self,name,age)</span><br><span class="line">                self.sex = sex</span><br></pre></td></tr></table></figure></p><p>方法二：利用super()函数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Parentclass:</span><br><span class="line">        def __init__(self,name,age)</span><br><span class="line">                self.name = name</span><br><span class="line">                self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Subclass(Parentclass):</span><br><span class="line">        def __init__(self,name,age,sex)</span><br><span class="line">                super().__init__(name,age)</span><br><span class="line">                self.sex = sex</span><br></pre></td></tr></table></figure></p><h4 id="3-多态与多态性"><a href="#3-多态与多态性" class="headerlink" title="3.多态与多态性"></a>3.多态与多态性</h4><p>多态指的是一类事物有多种形态。一个抽象类有多个子类，因而多态的概念依赖于继承。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"正在叫"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span><span class="params">(animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"say hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pig</span><span class="params">(animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"哼哼哼"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span><span class="params">(animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"汪汪汪"</span>)</span><br><span class="line"></span><br><span class="line">peo = people()</span><br><span class="line">pig1 = pig()</span><br><span class="line">dog1 = dog()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(obj)</span>:</span></span><br><span class="line">    obj.talk()</span><br><span class="line"></span><br><span class="line">func(peo)</span><br><span class="line">func(pig1)</span><br><span class="line">func(dog1)</span><br></pre></td></tr></table></figure></p><h4 id="4-封装"><a href="#4-封装" class="headerlink" title="4.封装"></a>4.封装</h4><p>封装数据的主要原因是：保护隐私<br>封装方法的主要原因是：隔离复杂度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'姓名:%s,年龄:%s'</span> %(self.__name,self.__age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_info</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(name,str):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'姓名必须是字符串类型'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(age,int):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'年龄必须是整型'</span>)</span><br><span class="line">    self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line">t=Teacher(<span class="string">'egon'</span>,<span class="number">18</span>)</span><br><span class="line">t.get_info()</span><br><span class="line"></span><br><span class="line">t.set_info(<span class="string">'egon'</span>,<span class="number">19</span>)</span><br><span class="line">t.get_info()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python面向对象相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数、文件IO和正则表达式</title>
    <link href="https://dsxlinux.github.io/2018/09/04/python02/"/>
    <id>https://dsxlinux.github.io/2018/09/04/python02/</id>
    <published>2018-09-04T02:00:43.000Z</published>
    <updated>2018-09-04T02:43:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python基础入门级语法。<br><a id="more"></a></p><h4 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h4><ul><li><p>函数的定义<br>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  函数名（参数列表）：</span></span><br><span class="line"><span class="function">函数体</span></span><br><span class="line"><span class="function"><span class="title">return</span> 返回值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">普通函数</span></span><br><span class="line"><span class="function">&gt;&gt;&gt; <span class="title">def</span> <span class="title">myAdd</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x+y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myAdd(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="number">30</span></span><br><span class="line"></span><br><span class="line">函数参数默认值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mySub</span><span class="params">(x=<span class="number">100</span>,y=<span class="number">10</span>)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x-y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySub()</span><br><span class="line"><span class="number">90</span></span><br><span class="line"></span><br><span class="line">缺省参数</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mySub</span><span class="params">(x=<span class="number">100</span>,y=<span class="number">10</span>)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x-y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySub(y=<span class="number">20</span>)//x的值默认，y的值为<span class="number">20</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="number">10</span>)</span>:</span>//x没有值，y有默认值是可以的</span><br><span class="line"><span class="keyword">return</span> x-y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x=<span class="number">10</span>,y)</span>:</span>//x有值，y没有值是不允许的</span><br><span class="line"><span class="keyword">return</span> x-y</span><br><span class="line">SyntaxError: non-default argument follows default argument</span><br></pre></td></tr></table></figure></li><li><p>lambda函数(匿名函数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x*y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="keyword">lambda</span> x,y:x*y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(g)</span><br><span class="line">&lt;type <span class="string">'function'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> g</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x02CE4B70</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>generator函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line"><span class="keyword">yield</span> i</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> fun(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = fun(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> r.next()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> r.next()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> r.next()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>模块和包<br>模块名就是文件名。<br>导入模块方式：import、import xxx as yyy、from xxx import yyy<br>调用模块里的函数：xxx.yyy                # xxx为模块名，yyy为函数名</p><p>多个模块放一起就是包，包里必须包含一个文件：<strong>init</strong>.py文件，内容为空也可以。<br>包的使用：import xxx.yyy                #xxx为包名，yyy为模块名</p></li></ul><h4 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2.文件操作"></a>2.文件操作</h4><p>Python提供了os、os.path、shutil等模块用于处理文件。 </p><ul><li><p>文件的打开或创建<br>文件的打开或创建可以使用file()函数。<br>file(name,mode,buffer)<br>参数说明：<br>name：文件名<br>mode：打开文件的模式<br>buffer：设置缓存模式。0表示不缓存；1表示缓存；大于1表示缓冲区大小，单位字节。<br>文件打开模式：</p><p>| 参数 | 说明                                                     |<br>| —- | ——————————————————– |<br>| r    | 以只读方式打开文件。                                     |<br>| w    | 以写入方式打开文件。若文件存在，则覆盖；不存在，则创建。 |<br>| a    | 以写入方式打开文件。若文件存在，则追加；不存在，则创建。 |<br>| r+   | 以读写方式打开文件。                                     |<br>| w+   | 以读写方式打开文件。若文件存在，则覆盖；不存在，则创建。 |<br>| a+   | 以读写方式打开文件。若文件存在，则追加；不存在，则创建。 |<br>| b    | 以二进制方式打开。可与rwa+结合使用                       |<br>| U    | 支持所有的换行符号。’\r’、’\n’都表示换行                 |</p><p>注意：图片、视频等文件必须使用b模式读写。</p><p>file类的属性和方法：,</p><p>| 属性和方法         | 说明                               |<br>| —————— | ———————————- |<br>| Closed             | 判断文件是否关闭。如果关闭返回True |<br>| Encoding           | 显示文件的编码类型                 |<br>| Mode               | 显示文件的打开模式                 |<br>| Name               | 显示文件的名称                     |<br>| Newlines           | 文件使用的换行模式                 |<br>| file()             | file(name,mode,buffer)             |<br>| flush()            | 将缓冲区的内容写入磁盘             |<br>| close()            | 关闭文件                           |<br>| read()             | 从文件读，返回值为读到的内容       |<br>| readline()         | 从文件读一行                       |<br>| Readlines()        | 从文件读所有行                     |<br>| seek(offset,where) | Offset为位置，where是参考点        |<br>| tell()             | 返回文件指针的位置                 |<br>| next()             | 返回下一行的内容                   |<br>| truncat()          | 删除内容                           |<br>| write()            | 写入内容                           |<br>| writelines()       | 写入内容                           |</p></li><li><p>文件读取<br>(1) 按单行读取方式readline()<br>(2) 按多行读取方式readlines()<br>(3) 按一次性读取方式read()</p></li><li><p>文件写入<br>使用write()，writelines()方法写入。</p></li><li><p>文件读写实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">文件写入</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = file(<span class="string">'tmp.txt'</span>,<span class="string">'w+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'This is temp file\n'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.flush()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"></span><br><span class="line">文件读取</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = file(<span class="string">'tmp.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">'This is temp file\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">'This is temp file\n'</span></span><br></pre></td></tr></table></figure></li><li><p>文件删除<br>文件删除需要使用os模块和os.path模块。<br>os模块常用的文件处理函数</p><p>| 函数                      | 说明                                             |<br>| ————————- | ———————————————— |<br>| access(path,mode)         | 按照mode指定的权限访问文件                       |<br>| chmod(path,mode)          | 修改文件的访问权限。mode使用unix系统中的权限     |<br>| open(name,flag,mode)      | 按照mode指定的权限访问文件                       |<br>| remove(path)              | 删除path指定的文件                               |<br>| rename(old,new)           | 重命名文件或目录                                 |<br>| stat(path)                | 返回path指定文件的所有属性                       |<br>| fstat(path)               | 返回打开文件的所有属性                           |<br>| lseek(fd,pos,how)         | 设置文件的当前位置，返回当前位置的字节数         |<br>| startfile(path,operation) | 启动关联程序打开文件。例如，1.html，将启动浏览器 |<br>| tmpfile()                 | 在系统的临时目录创建一个临时文件                 |</p></li></ul><p>注意：os模块的open函数与系统内建的file、open函数用法不一样</p><p>os.path模块常用的文件处理函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>abspath(path)</td><td>返回path所在的绝对路径</td></tr><tr><td>dirname(p)</td><td>返回目录的路径</td></tr><tr><td>exists(path)</td><td>判断文件是否存在</td></tr><tr><td>getatime(filename)</td><td>返回文件的访问时间</td></tr><tr><td>getctime(filename)</td><td>返回文件的创建时间</td></tr><tr><td>getmtime(filename)</td><td>返回文件的修改时间</td></tr><tr><td>getsize(filename)</td><td>返回文件的大小</td></tr><tr><td>isabs(s)</td><td>测试路径是否为绝对路径</td></tr><tr><td>isdir(path)</td><td>判断path是否为目录</td></tr><tr><td>isfile(path)</td><td>判断path是否为文件</td></tr><tr><td>split(p)</td><td>对路径进行分隔，并以列表的方式返回</td></tr><tr><td>splitext(p)</td><td>从路径中分隔文件的扩展名</td></tr><tr><td>splitdrive(p)</td><td>从路径中分离驱动器的名称</td></tr><tr><td>walk(top,func,arg)</td><td>遍历目录树</td></tr></tbody></table><ul><li><p>目录的基本操作<br>os模块常用的目录处理函数</p><p>| 函数                                | 说明                              |<br>| ———————————– | ——————————— |<br>| mkdir(path,mode)                    | 创建path指定的目录                |<br>| makedirs(name,mode)                 | 创建多级目录，name为’path1/path2’ |<br>| rmdir(path)                         | 删除path指定的目录                |<br>| removedirs(path)                    | 删除path指定的多级目录            |<br>| listdir(path)                       | 返回path指定目录下所有的文件名    |<br>| getcwd()                            | 返回当前的工作路径                |<br>| chdir(dir)                          | 将当前目录改为path指定的目录      |<br>| walk(top,topdown=True,onerror=None) | 遍历目录树                        |</p></li><li><p>文件流<br>sys模块提供了3种基本的流对象。<br>(1) stdin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdin = open(<span class="string">'tmp.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin.readlines():</span><br><span class="line"><span class="keyword">print</span> line</span><br></pre></td></tr></table></figure></li></ul><p>(2)stdout<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout = open(<span class="string">r'./tmp.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'goodboy'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.close()</span><br></pre></td></tr></table></figure></p><p>(3)stderr<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stderr = open(<span class="string">'tmp.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">r'./hello.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = time.strftime(<span class="string">'%Y-%m-%d%X'</span>,time.localtime())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>context = f.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> context:</span><br><span class="line">&gt;&gt;&gt;sys.stderr.write(t+<span class="string">' '</span>+context)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> Exception + <span class="string">'error msg'</span></span><br></pre></td></tr></table></figure></p><h4 id="3-RE模块"><a href="#3-RE模块" class="headerlink" title="3.RE模块"></a>3.RE模块</h4><p>RE模块常见函数。<br>re.compile 、re.match 、re.search 、re.sub 、re.subn 、re.split 、re.findall 、re.finditer、re.escape 、re.purge。<br>实例：<br>(1)第一个正则表达式<br>Python提供了两种不同的原始操作：match和search。match是从字符串的起点开始做匹配，而search（perl默认）是从字符串做任意匹配。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re//导入re模块</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa = re.compile(<span class="string">r'hello'</span>)//编译正则表达式，返回RegexObject对象，然后可以通过RegexObject对象调用match()和search()方法。r表示源字符串。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = pa.match(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.group()</span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.span()</span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>也可以不使用compile函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = re.match(<span class="string">r'hello'</span>,<span class="string">'hello world'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.group()</span><br><span class="line"><span class="string">'hello'</span></span><br></pre></td></tr></table></figure></p><p>使用search查找<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = re.search(<span class="string">r'hello'</span>,<span class="string">'hello world'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res.group()</span><br><span class="line"><span class="string">'hello'</span></span><br></pre></td></tr></table></figure></p><p>match和search区别：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = re.match(<span class="string">r'python'</span>,<span class="string">'I love python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res.group()  //报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#8&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    res.group()</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = re.search(<span class="string">r'hello'</span>,<span class="string">'hello world'</span>)//正确</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res.group()</span><br><span class="line"><span class="string">'hello'</span></span><br></pre></td></tr></table></figure></p><p>总结：match从开始位置匹配，search在整个字符串中查找。<br>其他函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r'\d+'</span>,<span class="string">'12ab34cd56ef78gh90'</span>)//查找所有的数字</span><br><span class="line">[<span class="string">'12'</span>, <span class="string">'34'</span>, <span class="string">'56'</span>, <span class="string">'78'</span>, <span class="string">'90'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">'[a-f]+'</span>, <span class="string">'0a3B9'</span>, flags=re.IGNORECASE)//分离字母</span><br><span class="line">[<span class="string">'0'</span>, <span class="string">'3'</span>, <span class="string">'9'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = re.finditer(<span class="string">r'\d+'</span>,<span class="string">'12ab34cd56ef78gh90'</span>)//查找字符串，返回迭代器</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> str <span class="keyword">in</span> it:</span><br><span class="line"><span class="keyword">print</span> str.group()</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">56</span></span><br><span class="line"><span class="number">78</span></span><br><span class="line"><span class="number">90</span></span><br></pre></td></tr></table></figure></p><p>综合练习：抓取某个网页中的所有图片。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>req = urllib2.urlopen(<span class="string">'http://sports.sina.com.cn/nba/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf = req.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listurl = re.findall(<span class="string">r'http:.+\.jpg'</span>,buf)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> url <span class="keyword">in</span> listurl:</span><br><span class="line">f = open(str(i)+<span class="string">'.jpg'</span>,<span class="string">'w'</span>)</span><br><span class="line">req = urllib2.urlopen(url)</span><br><span class="line">buf = req.read();</span><br><span class="line">f.write(buf)</span><br><span class="line">i+=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python基础入门级语法。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础语法</title>
    <link href="https://dsxlinux.github.io/2018/09/03/python01/"/>
    <id>https://dsxlinux.github.io/2018/09/03/python01/</id>
    <published>2018-09-03T08:00:49.000Z</published>
    <updated>2018-09-04T07:18:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍python基础入门级语法。<br><a id="more"></a></p><h4 id="1-安装Python2-7版"><a href="#1-安装Python2-7版" class="headerlink" title="1.安装Python2.7版"></a>1.安装Python2.7版</h4><p>下载地址：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar xf Python-2.7.9.tgz -C /usr/src/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /usr/src/Python-2.7.9/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./configure --prefix=/usr/<span class="built_in">local</span>/python27</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat ~/.bash_profile //将python2.7加入环境变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the aliases and <span class="built_in">functions</span></span></span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">. ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> User specific environment and startup programs</span></span><br><span class="line"></span><br><span class="line">PATH=/usr/local/python27/bin:$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/python27/bin/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm python python2 -f//删除软链接文件，避免影响系统自带python环境</span></span><br></pre></td></tr></table></figure></p><h4 id="2-第一个Python程序"><a href="#2-第一个Python程序" class="headerlink" title="2.第一个Python程序"></a>2.第一个Python程序</h4><p>Python的源代码以“py”作为文件后缀。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim helloworld.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/<span class="built_in">local</span>/python27/bin/python2.7</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    print "hello world"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> python2.7 helloworld.py </span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><h4 id="3-Python文件类型"><a href="#3-Python文件类型" class="headerlink" title="3.Python文件类型"></a>3.Python文件类型</h4><ul><li><p>源代码(py)</p></li><li><p>字节代码(pyc)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat compile.py</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/<span class="built_in">local</span>/python27/bin/python2.7</span></span><br><span class="line"></span><br><span class="line">import py_compile</span><br><span class="line">py_compile.compile('hello.py')</span><br></pre></td></tr></table></figure></li><li><p>优化代码(pyo)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python -O -m py_compile hello.py</span></span><br><span class="line">参数：-O表示生成优化代码。</span><br><span class="line">参数：-m表示导入模块。</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-Python编码规则"><a href="#4-Python编码规则" class="headerlink" title="4.Python编码规则"></a>4.Python编码规则</h4><ul><li><p>命名规则<br>变量名、包名、模块名、类名、对象名、函数名</p></li><li><p>代码缩进和冒号<br>python最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p></li><li><p>模块导入的规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> sys.path</span><br><span class="line"><span class="keyword">import</span> sys.argv</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br></pre></td></tr></table></figure></li><li><p>语句的分隔<br>Python可以使用分号作为分隔符。但是一般不写。</p></li><li><p>字符编码<br>python 2.x 默认编码是ASCII（不支持中文）<br>python 3.x 默认编码是UTF-8</p></li><li><p>多行语句<br>可以使用斜杠（ \）将一行的语句分为多行显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \ </span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure></li><li><p>引号<br>Python 接收单引号(‘ )，双引号(“ )，三引号(‘’’ “””) 来表示字符串，引号的开始与结束必须的相同类型的。<br>其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。</p></li><li><p>注释<br>python中单行注释采用 # 开头。<br>python没有块注释，所以现在推荐的多行注释也是采用的#</p></li><li><p>空行<br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<br>记住：空行也是程序代码的一部分。</p></li></ul><h4 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5.数据类型"></a>5.数据类型</h4><ul><li><p>变量<br>变量命名规则：变量名由字母、数字和下划线组成。变量名的首字符必须是字母或下划线。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">变量定义和变量地址查看</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> id(x)</span><br><span class="line"><span class="number">5614048</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> id(x)</span><br><span class="line"><span class="number">5614700</span></span><br><span class="line"></span><br><span class="line">变量值相等，变量名不一样，地址一样</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">5613384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">5613384</span></span><br></pre></td></tr></table></figure><p>变量分为：全局变量和局部变量</p></li><li><p>常量</p></li><li><p>数据类型<br>Python不需要显式的声明变量的类型。<br>Python有五个标准的数据类型：</p><ul><li>Numbers（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Dictionary（字典）</li></ul></li><li><p>数据类型转换</p></li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>long(x [,base] )</td><td>将x转换为一个长整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>unichr(x)</td><td>将一个整数转换为Unicode字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><h4 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6.运算符"></a>6.运算符</h4><p>算术运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加 两个对象相加</td><td>a+b输出30</td></tr><tr><td>-</td><td>号负或减 负数或是一个数减去另一个数</td><td>-a 或 a-b输出-10</td></tr><tr><td>*</td><td>乘 两个数相乘或返回一个被重复若干次的字符串</td><td>a*b输出200</td></tr><tr><td>/</td><td>除</td><td>b/a输出2</td></tr><tr><td>%</td><td>取模 返回除法的余数</td><td>b%a输出0</td></tr><tr><td>**</td><td>幂 返回x的y次幂</td><td>a**b为10的20次幂</td></tr><tr><td>//</td><td>取整 返回商的整数部分</td><td>9//2输出4，9.0//2.0输出4.0</td></tr></tbody></table><p>比较运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于 比较对象是否相等</td><td>（a==b）返回False</td></tr><tr><td>!=</td><td>不等于 比较两个对象是否不相等</td><td>（a!=b）返回True</td></tr><tr><td>&lt;&gt;</td><td>不等于 比较两个对象是否不相等</td><td>（a&lt;&gt;b）返回True</td></tr><tr><td>&gt;</td><td>大于 返回x是否大于y</td><td>（a&gt;b）返回False</td></tr><tr><td>&lt;</td><td>小于 返回x是否小于y</td><td>（a&lt;b）返回True</td></tr><tr><td>&gt;=</td><td>大于等于 返回x是否大于等于y</td><td>（a&gt;=b）返回False</td></tr><tr><td>&lt;+</td><td>小于等于 返回x是否小于等于y</td><td>（a&lt;b）返回True</td></tr></tbody></table><p>赋值运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c=a+b将a+b的运算结果赋值为c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c+=a 等效于 c= c+a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c-=a 等效于 c= c-a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c<em>=a 等效于 c= c</em>a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c/=a 等效于 c= c/a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c%=a 等效于 c= c%a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c<strong>=a 等效于 c= c</strong>a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c//=a 等效于 c= c//a</td></tr></tbody></table><p>逻辑运算</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔“与”，如果x为False, x and y 返回False,否则返回y的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><p>成员运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><p>身份运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is是判断两个标识符是不是引用自一个对象</td><td>x is y, 如果 id(x) 等于 id(y) , is 返回结果 1</td></tr><tr><td>is not</td><td>is not是判断两个标识符是不是引用自不同对象</td><td>x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1</td></tr></tbody></table><p>位运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>按位或</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td>(a按位或b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td><td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1</td><td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p>运算符优先级</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^ 按位或</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt; == !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not or and</td><td>逻辑运算符</td></tr></tbody></table><h4 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7.流程控制"></a>7.流程控制</h4><ul><li><p>单分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式):</span><br><span class="line">statement</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>多分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式):</span><br><span class="line">statement</span><br><span class="line"><span class="keyword">elif</span>(表达式):</span><br><span class="line">statement</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>分支嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式):</span><br><span class="line"><span class="keyword">if</span>(表达式):</span><br><span class="line">statement</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">statement</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">statement</span><br></pre></td></tr></table></figure></li><li><p>循环语句</p><ul><li>while循环<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式):</span><br><span class="line">statement</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">      statement</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合：</span><br><span class="line">statement</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">statement</span><br></pre></td></tr></table></figure><p>“集合”可以是字符串、元组、列表、range()函数等。</p></li><li><p>break和continue语句<br>break和continue用于循环跳出。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍python基础入门级语法。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux下磁盘分区表的备份和恢复</title>
    <link href="https://dsxlinux.github.io/2018/08/30/partition/"/>
    <id>https://dsxlinux.github.io/2018/08/30/partition/</id>
    <published>2018-08-30T03:55:35.000Z</published>
    <updated>2018-08-30T03:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍linux系统下磁盘分区表的备份和恢复方法。<br><a id="more"></a></p><h4 id="1-磁盘分区类型"><a href="#1-磁盘分区类型" class="headerlink" title="1.磁盘分区类型"></a>1.磁盘分区类型</h4><p>最常接触的磁盘分区类型： MBR(Master Boot Record), GPT(Globe Partition Table)和Apple Partition(Mixed分区）。</p><h4 id="2-MBR分区表"><a href="#2-MBR分区表" class="headerlink" title="2.MBR分区表"></a>2.MBR分区表</h4><ul><li>MBR简介</li></ul><p>MBR = Main Boot Record，主引导分区。</p><p>整个硬盘可分为MBR，DBR（Dos Boot Record，Dos引导记录），FAT（File Assign Table，文件分配表 ），BD（Boot Directory，根目录）和数据区。 </p><p>MBR分区表位于硬盘第一个物理扇区（绝对扇区）柱面0，磁头0，扇区1处 。</p><p>MBR的结构：</p><table><thead><tr><th>字节偏移（16进制）</th><th>字节数</th><th>描述</th></tr></thead><tbody><tr><td>00~1BD</td><td>446</td><td>引导代码</td></tr><tr><td>1BE~1CD</td><td>16</td><td>分区表项1</td></tr><tr><td>1CE~1DD</td><td>16</td><td>分区表项2</td></tr><tr><td>1DE~1ED</td><td>16</td><td>分区表项3</td></tr><tr><td>1EE~1FD</td><td>16</td><td>分区表项4</td></tr><tr><td>1FE-1FF</td><td>2</td><td>签名值’55AA’</td></tr></tbody></table><p>MBR总共512 = 446 + 64 + 2</p><ul><li>MBR备份和恢复</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">备份MBR</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/dev/sda of=/backup/mbr.backup  bs=1  count=512</span></span><br><span class="line">恢复MBR</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/backup/mbr.backup  of=/dev/sda</span></span><br></pre></td></tr></table></figure><ul><li>备份分区表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">备份分区表</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/dev/sda of=/backup/partition_table.bak bs=1 count=64 skip=446</span></span><br><span class="line">恢复分区表</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/backup/partition_table.bak of=/dev/sda bs=1 seek=446</span></span><br></pre></td></tr></table></figure><h4 id="3-GPT分区表"><a href="#3-GPT分区表" class="headerlink" title="3.GPT分区表"></a>3.GPT分区表</h4><ul><li>GPT简介</li></ul><p>GUID = Globally Unique Identifier，全局唯一标识符，一个随机生成的字符串。</p><p>GPT = GUID Partition Table，GUID分区表 </p><p>GPT是一种新的标准，并在逐渐取代MBR。 </p><p>支持几乎无限个分区数量，限制只在于操作系统——Windows支持最多128个GPT分区。</p><p>MBR磁盘上，分区和启动信息是保存在一起的。如果这部分数据被覆盖或破坏，一切就over了。</p><p>GPT在整个磁盘上保存多个这部分信息的副本， 并可以恢复被破坏的这部分信息。  </p><p>MBR和GPT分区对比：</p><table><thead><tr><th>Basic MBR Disk</th><th>Basic GPT Disk</th></tr></thead><tbody><tr><td>Master Boot Code</td><td>Master Boot Code</td></tr><tr><td>1st Partition Table Entry</td><td>1st Partition Table Entry</td></tr><tr><td>2nd Partition Table Entry</td><td>2nd Partition Table Entry</td></tr><tr><td>3rd Partition Table Entry</td><td>3rd Partition Table Entry</td></tr><tr><td>4th Partition Table Entry</td><td>4th Partition Table Entry</td></tr><tr><td>0x55 AA</td><td>0x55 AA</td></tr><tr><td></td><td>Primary GUID Partition Table Header</td></tr><tr><td></td><td>GUID Partition Entry 1</td></tr><tr><td></td><td>GUID Partition Entry 2</td></tr><tr><td></td><td>GUID Partition Entry n</td></tr><tr><td></td><td>GUID Partition Entry 128</td></tr><tr><td></td><td></td></tr><tr><td></td><td>GUID Partition Entry 1</td></tr><tr><td></td><td>GUID Partition Entry 2</td></tr><tr><td></td><td>GUID Partition Entry n</td></tr><tr><td></td><td>GUID Partition Entry 128</td></tr><tr><td></td><td>Backup GUID Partition Table Header</td></tr></tbody></table><ul><li>GPT备份和还原</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">备份Protective MBR</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/dev/sda of=gpt-mbr bs=512 count=1</span></span><br><span class="line">恢复Protective MBR</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=gpt-mbr of=/dev/sda bs=512 count=1</span></span><br><span class="line"></span><br><span class="line">备份完整的GPT分区表</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/dev/sda of=gpt-partition bs=512 count=34</span></span><br><span class="line">恢复完整的GPT分区表</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=gpt--partition of=/dev/sda bs=512 count=34</span></span><br><span class="line"></span><br><span class="line">仅备份GPT头和GPT分区</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=/dev/sda of=gpt-partition bs=512 skip=1 count=33</span></span><br><span class="line">恢复单独的GPT分区信息</span><br><span class="line"><span class="meta">#</span><span class="bash"> dd <span class="keyword">if</span>=gpt-partition of=/dev/sda bs=512 skip=1 seek=1 count=33</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍linux系统下磁盘分区表的备份和恢复方法。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos6搭建Gitlab服务</title>
    <link href="https://dsxlinux.github.io/2018/08/28/gitlab/"/>
    <id>https://dsxlinux.github.io/2018/08/28/gitlab/</id>
    <published>2018-08-28T02:57:42.000Z</published>
    <updated>2018-08-29T01:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Centos6.x搭建Gitlab服务并汉化。<br><a id="more"></a></p><h4 id="1-安装必要的依赖关系"><a href="#1-安装必要的依赖关系" class="headerlink" title="1.安装必要的依赖关系"></a>1.安装必要的依赖关系</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install curl openssh-server openssh-clients postfix cronie</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> service postfix start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig postfix on</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y install lokkit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lokkit -s http -s ssh</span></span><br></pre></td></tr></table></figure><h4 id="2-下载并安装"><a href="#2-下载并安装" class="headerlink" title="2.下载并安装"></a>2.下载并安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install gitlab-ce</span></span><br></pre></td></tr></table></figure><p>gitlab-ce是社区版，免费的<br>gitlab-ee是企业版，收费的</p><h4 id="3-配置和启动"><a href="#3-配置和启动" class="headerlink" title="3.配置和启动"></a>3.配置和启动</h4><p>安装完毕后配置URL，gitlab配置文件在/etc/gitlab/gitlab.rb。将external_url修改为你的ip和url。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/gitlab/gitlab.rb </span></span><br><span class="line">external_url 'http://192.168.1.xx/'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-ctl reconfigure</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-ctl restart</span></span><br></pre></td></tr></table></figure></p><h4 id="4-访问gitlab"><a href="#4-访问gitlab" class="headerlink" title="4.访问gitlab"></a>4.访问gitlab</h4><p>在浏览器打开上面配置的external_url地址。<br>第一次访问要先修改登录密码，默认用户是root。<br>进去之后和github的操作类似，可以创建项目。</p><h4 id="5-汉化"><a href="#5-汉化" class="headerlink" title="5.汉化"></a>5.汉化</h4><p>先查看gitlab版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span></span><br><span class="line">11.2.1</span><br></pre></td></tr></table></figure></p><p>下载中文补丁包，下载地址：<a href="https://gitlab.com/xhang/gitlab/tags" target="_blank" rel="noopener">https://gitlab.com/xhang/gitlab/tags</a><br>找到对应版本的下载下来。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls gitlab-v11.2.1-zh.tar.gz</span></span><br><span class="line">gitlab-v11.2.1-zh.tar.gz</span><br></pre></td></tr></table></figure></p><p>覆盖之前安装的gitlab，完成汉化<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp -r /opt/gitlab/embedded/service/gitlab-rails&#123;,.ori&#125;//先备份</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar xf gitlab-v11.2.1-zh.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> \cp -rf gitlab-ce-v11.2.1/* /opt/gitlab/embedded/service/gitlab-rails///覆盖</span></span><br><span class="line">cp: cannot overwrite non-directory `/opt/gitlab/embedded/service/gitlab-rails/log' with directory `gitlab-10-3-stable-zh/log'</span><br><span class="line">cp: cannot overwrite non-directory `/opt/gitlab/embedded/service/gitlab-rails/tmp' with directory `gitlab-10-3-stable-zh/tmp'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-ctl reconfigure//重新配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-ctl restart//重启</span></span><br></pre></td></tr></table></figure></p><p>再次使用浏览器访问：<a href="http://192.168.1.xx/" target="_blank" rel="noopener">http://192.168.1.xx/</a> 可以看到界面是中文的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Centos6.x搭建Gitlab服务并汉化。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="https://dsxlinux.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://dsxlinux.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python远程部署利器Fabric详解</title>
    <link href="https://dsxlinux.github.io/2018/08/27/fabric/"/>
    <id>https://dsxlinux.github.io/2018/08/27/fabric/</id>
    <published>2018-08-27T03:42:54.000Z</published>
    <updated>2018-08-27T08:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Centos6.x下Python远程部署利器Fabric的使用。<br>本文参考：<a href="http://python.jobbole.com/87241/" target="_blank" rel="noopener">http://python.jobbole.com/87241/</a><br><a id="more"></a></p><h4 id="1-安装Fabric"><a href="#1-安装Fabric" class="headerlink" title="1.安装Fabric"></a>1.安装Fabric</h4><p>前提是python版本必须是2.7以上。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python -V</span></span><br><span class="line">Python 2.7.13</span><br></pre></td></tr></table></figure></p><p>推荐用pip来安装，也可以从github上clone下来安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip install fabric==1.14.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> fab -V</span></span><br><span class="line">Fabric 1.14.0</span><br><span class="line">Paramiko 2.4.1</span><br></pre></td></tr></table></figure></p><h4 id="2-第一个例子"><a href="#2-第一个例子" class="headerlink" title="2.第一个例子"></a>2.第一个例子</h4><p>创建一个fabfile.py文件，然后写入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hello Fabric!"</span></span><br></pre></td></tr></table></figure></p><p>fabfile.py文件中每个函数就是一个任务，任务名即函数名，上例中是”hello”。</p><p>查看任务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab -l</span></span><br><span class="line">Available commands:</span><br><span class="line"></span><br><span class="line">    hello</span><br></pre></td></tr></table></figure></p><p>任务可以带参数，将hello函数改为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name, value)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hello Fabric! %s=%s"</span> % (name,value)</span><br></pre></td></tr></table></figure></p><p>此时执行hello任务时，就要传入参数值：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab hello:name=Year,value=2018</span></span><br></pre></td></tr></table></figure></p><p>Fabric的脚本建议写在”fabfile.py”文件中，如果想要想换文件名就要在”fab”命令中用”-f”指定：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab -f script.py hello</span></span><br></pre></td></tr></table></figure></p><h4 id="3-执行本地命令"><a href="#3-执行本地命令" class="headerlink" title="3.执行本地命令"></a>3.执行本地命令</h4><p>“fabric.api”包里的”local()”方法可以用来执行本地Shell命令。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> local</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    local(<span class="string">'ls -l /'</span>)</span><br></pre></td></tr></table></figure></p><p>“local()”方法有一个”capture”参数用来捕获标准输出，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> local</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    output = local(<span class="string">'echo Hello'</span>, capture=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> output</span><br></pre></td></tr></table></figure></p><h4 id="4-执行远程命令"><a href="#4-执行远程命令" class="headerlink" title="4.执行远程命令"></a>4.执行远程命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> run, env</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'192.168.0.213'</span>, <span class="string">'192.168.0.214'</span>]</span><br><span class="line"><span class="comment"># env.hosts = ['root@192.168.0.213', 'root@192.168.0.214']</span></span><br><span class="line">env.user = <span class="string">'root'</span></span><br><span class="line">env.password = <span class="string">'123456'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    run(<span class="string">'ls -l /home/'</span>)</span><br></pre></td></tr></table></figure><p>“fabric.api”包里的”run()”方法可以用来执行远程Shell命令。<br>如果不在env.hosts里面指定host的信息，可以在命令行上指定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab -H root@192.168.0.213,root@192.168.0.214 hello</span></span><br></pre></td></tr></table></figure><p>对于不同的服务器，我们想执行不同的任务，上面的方法似乎做不到，我们要对服务器定义角色：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, roles, run, execute, cd</span><br><span class="line"> </span><br><span class="line">env.roledefs = &#123;</span><br><span class="line">    <span class="string">'staging'</span>: [<span class="string">'bjhee@example1.com'</span>,<span class="string">'bjhee@example2.com'</span>],</span><br><span class="line">    <span class="string">'build'</span>: [<span class="string">'build@example3.com'</span>]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">env.passwords = &#123;</span><br><span class="line">    <span class="string">'staging'</span>: <span class="string">'11111'</span>,</span><br><span class="line">    <span class="string">'build'</span>: <span class="string">'123456'</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@roles('build')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'/home/build/myapp/'</span>):</span><br><span class="line">        run(<span class="string">'git pull'</span>)</span><br><span class="line">        run(<span class="string">'python setup.py'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@roles('staging')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">()</span>:</span></span><br><span class="line">    run(<span class="string">'tar xfz /tmp/myapp.tar.gz'</span>)</span><br><span class="line">    run(<span class="string">'cp /tmp/myapp /home/bjhee/www/'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">()</span>:</span></span><br><span class="line">    execute(build)</span><br><span class="line">    execute(deploy)</span><br></pre></td></tr></table></figure></p><p>执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab task</span></span><br></pre></td></tr></table></figure></p><p>如果某一任务上没有指定某个角色，但是你又想让这个角色的服务器也能运行该任务，你可以通过”-R”来指定角色名，多个角色用逗号分隔：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab -R build deploy</span></span><br></pre></td></tr></table></figure></p><h4 id="5-SSH功能函数"><a href="#5-SSH功能函数" class="headerlink" title="5.SSH功能函数"></a>5.SSH功能函数</h4><ul><li>get(remote, local): 从远程机器上下载文件到本地</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> get, env</span><br><span class="line"></span><br><span class="line">env.hosts = [<span class="string">'192.168.0.213'</span>]</span><br><span class="line">env.user = <span class="string">'root'</span></span><br><span class="line">env.password = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    get(<span class="string">'/root/boot.log'</span>, <span class="string">'/root/'</span>)</span><br></pre></td></tr></table></figure><ul><li>put(local, remote): 从本地上传文件到远程机器上</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> put, env</span><br><span class="line"></span><br><span class="line">env.hosts = [<span class="string">'192.168.0.213'</span>]</span><br><span class="line">env.user = <span class="string">'root'</span></span><br><span class="line">env.password = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    put(<span class="string">'/root/install.log'</span>, <span class="string">'/var/log/'</span>)</span><br></pre></td></tr></table></figure><ul><li>prompt: 提示输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, get, prompt</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example.com'</span>,]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    filename = prompt(<span class="string">'Please input file name: '</span>)</span><br><span class="line"><span class="comment"># port = prompt('Please input port number: ', default=8080, validate=int)</span></span><br><span class="line">    get(<span class="string">'/var/log/myapp.log'</span>, <span class="string">'%s.log'</span> % filename)</span><br></pre></td></tr></table></figure><ul><li>reboot: 重启服务器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, reboot</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example.com'</span>,]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">()</span>:</span></span><br><span class="line">    reboot(wait=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><h4 id="6-上下文管理器"><a href="#6-上下文管理器" class="headerlink" title="6.上下文管理器"></a>6.上下文管理器</h4><ul><li>cd: 设置远程机器的当前工作目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, cd, put</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'/var/www/'</span>):</span><br><span class="line">        put(<span class="string">'/tmp/myapp-0301.tar.gz'</span>, <span class="string">'myapp.tar.gz'</span>)</span><br></pre></td></tr></table></figure><ul><li>lcd: 设置本地工作目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, cd, lcd, put</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'/var/www/'</span>):</span><br><span class="line">        <span class="keyword">with</span> lcd(<span class="string">'/tmp/'</span>):</span><br><span class="line">            put(<span class="string">'myapp-0301.tar.gz'</span>, <span class="string">'myapp.tar.gz'</span>)</span><br></pre></td></tr></table></figure><ul><li>path: 添加远程机的PATH路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, run, path</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> path(<span class="string">'/home/bjhee/tmp'</span>):</span><br><span class="line">        run(<span class="string">'echo $PATH'</span>)</span><br><span class="line">    run(<span class="string">'echo $PATH'</span>)</span><br></pre></td></tr></table></figure><ul><li>settings: 设置Fabric环境变量参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, run, settings</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="keyword">True</span>):</span><br><span class="line">        run(<span class="string">'echo $USER'</span>)</span><br></pre></td></tr></table></figure><ul><li>shell_env: 设置Shell环境变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, run, local, shell_env</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> shell_env(JAVA_HOME=<span class="string">'/opt/java'</span>):</span><br><span class="line">        run(<span class="string">'echo $JAVA_HOME'</span>)</span><br><span class="line">        local(<span class="string">'echo $JAVA_HOME'</span>)</span><br></pre></td></tr></table></figure><ul><li>prefix: 设置命令执行前缀</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, run, local, shell_env</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> shell_env(JAVA_HOME=<span class="string">'/opt/java'</span>):</span><br><span class="line">        run(<span class="string">'echo $JAVA_HOME'</span>)</span><br><span class="line">        local(<span class="string">'echo $JAVA_HOME'</span>)</span><br></pre></td></tr></table></figure><h4 id="7-错误处理"><a href="#7-错误处理" class="headerlink" title="7.错误处理"></a>7.错误处理</h4><p>默认情况下，Fabric在任务遇到错误时就会退出，如果我们希望捕获这个错误而不是退出任务的话，就要开启”warn_only”参数。<br>在上面介绍”settings()”上下文管理器时，我们已经看到了临时开启”warn_only”的方法了，如果要全局开启，有两个办法：<br>1.在命令行添加<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab -w hello</span></span><br></pre></td></tr></table></figure></p><p>2.设置”env.warn_only”环境参数为True<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env</span><br><span class="line"></span><br><span class="line">env.warn_only = <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>如何捕捉错误？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, cd, put</span><br><span class="line"> </span><br><span class="line">env.hosts = [<span class="string">'bjhee@example1.com'</span>, ]</span><br><span class="line">env.password = <span class="string">'111111'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'/var/www/'</span>):</span><br><span class="line">        upload = put(<span class="string">'/tmp/myapp-0301.tar.gz'</span>, <span class="string">'myapp.tar.gz'</span>)</span><br><span class="line">        <span class="keyword">if</span> upload.failed:</span><br><span class="line">            sudo(<span class="string">'rm myapp.tar.gz'</span>)</span><br><span class="line">            put(<span class="string">'/tmp/myapp-0301.tar.gz'</span>, <span class="string">'myapp.tar.gz'</span>, use_sudo=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><h4 id="8-并行执行"><a href="#8-并行执行" class="headerlink" title="8.并行执行"></a>8.并行执行</h4><p>怎么开启并行执行呢？办法有两个<br>1.在命令行加参数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fab -P hello</span></span><br></pre></td></tr></table></figure></p><p>2.设置”env.parallel”环境参数为True<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env</span><br><span class="line"> </span><br><span class="line">env.parallel = <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>如果只想对某一任务做并行的话，我们可以在任务函数上加上”@parallel”装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> parallel</span><br><span class="line"> </span><br><span class="line"><span class="meta">@parallel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runs_in_parallel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runs_serially</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h4 id="9-补充"><a href="#9-补充" class="headerlink" title="9.补充"></a>9.补充</h4><ul><li><p>终端输出带颜色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> green(<span class="string">"Successful"</span>)</span><br><span class="line">    <span class="keyword">print</span> yellow(<span class="string">"Warning"</span>)</span><br><span class="line">    <span class="keyword">print</span> red(<span class="string">"Error"</span>)</span><br></pre></td></tr></table></figure></li><li><p>限制任务只能被执行一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> execute, runs_once</span><br><span class="line"> </span><br><span class="line"><span class="meta">@runs_once</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Hello Fabric!"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    execute(hello)</span><br><span class="line">    execute(hello)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Centos6.x下Python远程部署利器Fabric的使用。&lt;br&gt;本文参考：&lt;a href=&quot;http://python.jobbole.com/87241/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://python.jobbole.com/87241/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dsxlinux.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://dsxlinux.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>自动化运维之SaltStack实践</title>
    <link href="https://dsxlinux.github.io/2018/08/22/SaltStack/"/>
    <id>https://dsxlinux.github.io/2018/08/22/SaltStack/</id>
    <published>2018-08-22T02:24:28.000Z</published>
    <updated>2018-08-23T01:24:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍自动化运维工具SaltStack的使用方法。<br><a id="more"></a></p><h4 id="1-saltstack简介"><a href="#1-saltstack简介" class="headerlink" title="1.saltstack简介"></a>1.saltstack简介</h4><p>saltstack是基于python开发的一套C/S架构配置管理工具，它的底层使用ZeroMQ消息队列pub/sub方式通信，使用SSL证书签发的方式进行认证管理。ZeroMQ使SaltStack能快速在成千上万台机器上进行各种操作，之前已经介绍过了puppet mco的框架，比较类似。而且采用RSA Key方式确认身份，传输采用AES加密，使传输的安全性得到保障。</p><h4 id="2-SaltStack安装"><a href="#2-SaltStack安装" class="headerlink" title="2.SaltStack安装"></a>2.SaltStack安装</h4><p>在SaltsStack架构中服务端叫作Master，客户端叫作Minion。我们使用2台服务器来来实验。<br>配置主机名<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/hosts</span><br><span class="line">192.168.0.213rzx213</span><br><span class="line">192.168.0.214rzx214</span><br></pre></td></tr></table></figure></p><ul><li><p>服务端安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> yum install -y epel-release</span><br><span class="line"><span class="meta">#</span> yum install -y salt-master salt-minion</span><br></pre></td></tr></table></figure></li><li><p>客户端安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> yum install -y epel-release</span><br><span class="line"><span class="meta">#</span> yum install -y salt-minion</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-SaltStack配置"><a href="#3-SaltStack配置" class="headerlink" title="3.SaltStack配置"></a>3.SaltStack配置</h4><p>分别在服务端和客户端中打开/etc/salt/minion文件，做如下修改：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /etc/salt/minion</span><br><span class="line">master: 192.168.0.213//在文件第16行，打开注释，指定master的ip地址。</span><br></pre></td></tr></table></figure></p><h4 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h4><ul><li><p>服务端启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt-master start &amp;</span><br><span class="line"><span class="meta">#</span> salt-minion start &amp;</span><br></pre></td></tr></table></figure></li><li><p>客户端启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt-minion start &amp;</span><br></pre></td></tr></table></figure></li></ul><p>minion在第一次启动时，会在/etc/salt/pki/minion/（该路径在/etc/salt/minion里面设置）下自动生成minion.pem（private key）和 minion.pub（public key），然后将 minion.pub发送给master。master在接收到minion的public key后，通过salt-key命令accept minion public key，这样在master的/etc/salt/pki/master/minions下的将会存放以minion id命名的 public key，然后master就能对minion发送指令了。</p><h4 id="5-配置认证"><a href="#5-配置认证" class="headerlink" title="5.配置认证"></a>5.配置认证</h4><p>在服务端进行如下操作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt-key -a rzx213</span><br><span class="line"><span class="meta">#</span> salt-key -a rzx214</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt-key</span><br><span class="line">Accepted Keys:</span><br><span class="line">rzx213</span><br><span class="line">rzx214</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure></p><p>上面操作是手动配置认证，大规模部署Minion的时候，可以自动接受指定等待认证的 key。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cp /etc/salt/master /etc/salt/master.bak</span><br><span class="line"><span class="meta">#</span> vim /etc/salt/master</span><br><span class="line">auto_accept: True//215行，注释打开，修改为True</span><br></pre></td></tr></table></figure></p><p>测试验证<br>先重新启动salt服务端和客户端，再执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt '*' cmd.run   'df -h'//在服务端执行，其中*表示认证过的服务器</span><br></pre></td></tr></table></figure></p><h4 id="6-管理对象"><a href="#6-管理对象" class="headerlink" title="6.管理对象"></a>6.管理对象</h4><ul><li><p>正则匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt 'rzx*' network.ip_addrs</span><br><span class="line">rzx214:</span><br><span class="line">    - 192.168.0.214</span><br><span class="line">rzx213:</span><br><span class="line">    - 192.168.0.213</span><br></pre></td></tr></table></figure></li><li><p>列表匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt -L rzx213,rzx214 test.ping//-L, –list 列表匹配</span><br><span class="line">rzx213:</span><br><span class="line">    True</span><br><span class="line">rzx214:</span><br><span class="line">    True</span><br></pre></td></tr></table></figure></li><li><p>Grians匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt -G 'os:CentOS' test.ping//os:CentOS，这里的对象是一组键值对， 这里用到了Minion的Grains的键值对。</span><br></pre></td></tr></table></figure></li><li><p>组匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /etc/salt/master</span><br><span class="line"><span class="meta">#</span>####         Node Groups           #####</span><br><span class="line"><span class="meta">#</span>#########################################</span><br><span class="line"><span class="meta">#</span> Node groups allow for logical groupings of minion nodes. A group consists of a group</span><br><span class="line"><span class="meta">#</span> name and a compound target.</span><br><span class="line"><span class="meta">#</span>nodegroups:</span><br><span class="line"><span class="meta">#</span>  group1: 'L@foo.domain.com,bar.domain.com,baz.domain.com and bl*.domain.com'</span><br><span class="line"><span class="meta">#</span>  group2: 'G@os:Debian and foo.domain.com'</span><br></pre></td></tr></table></figure></li></ul><p>L@ 和G@ 分别表示minion和grain信息 L@开通的是指定的以逗号分隔的多个minionId</p><table><thead><tr><th>Letter</th><th>Match Type</th><th>Example</th><th>Alt Delimiter?</th></tr></thead><tbody><tr><td>G</td><td>Grains glob</td><td>G@os:Ubuntu</td><td>Yes</td></tr><tr><td>E</td><td>PCRE Minion ID</td><td>`E@web\d+.(dev</td><td>qa</td></tr><tr><td>P</td><td>Grains PCRE</td><td>P@os:(RedHat</td><td>Fedora</td></tr><tr><td>L</td><td>List of minions</td><td><a href="mailto:L@minion1.example.com" target="_blank" rel="noopener">L@minion1.example.com</a>,minion3.domain.com or bl*.domain.com</td><td>No</td></tr><tr><td>I</td><td>Pillar glob</td><td>I@pdata:foobar</td><td>Yes</td></tr><tr><td>J</td><td>Pillar PCRE</td><td>`J@pdata:^(foo</td><td>bar)$`</td></tr><tr><td>S</td><td>Subnet/IP address</td><td><a href="mailto:S@192.168.1.0" target="_blank" rel="noopener">S@192.168.1.0</a>/24 or <a href="mailto:S@192.168.1.100" target="_blank" rel="noopener">S@192.168.1.100</a></td><td>No</td></tr><tr><td>R</td><td>Range cluster</td><td>R@%foo.bar</td><td>No</td></tr></tbody></table><p>修改group1为:<br>nodegroups:                                //打开注释<br>    group1: ‘L@rzx213,rzx214’            //修改配置，注意前面有空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt -N group1 test.ping//-N, –nodegroup 组匹配</span><br></pre></td></tr></table></figure><h4 id="7-管理对象属性"><a href="#7-管理对象属性" class="headerlink" title="7.管理对象属性"></a>7.管理对象属性</h4><ul><li>通过Minion配置文件定义Grains<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /etc/salt/minion</span><br><span class="line">rzx213:</span><br><span class="line">  role:</span><br><span class="line">    - webserver</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx213' grains.item role</span><br><span class="line"><span class="meta">#</span> salt -G role:webserver cmd.run 'hostname'</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-pillar"><a href="#8-pillar" class="headerlink" title="8.pillar"></a>8.pillar</h4><p>在服务端配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /etc/salt/master//打开注释</span><br><span class="line">pillar_roots:</span><br><span class="line">    base:</span><br><span class="line">    - /srv/pillar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> mkdir /srv/pillar</span><br><span class="line"><span class="meta">#</span> vim /srv/pillar/test.sls</span><br><span class="line">conf: /etc/test123.conf</span><br><span class="line">myname: hadron</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/pillar/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> /etc/init.d/salt-master restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx213' pillar.items</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt -I 'conf:/etc/test123.conf' test.ping</span><br><span class="line"><span class="meta">#</span> salt -I 'conf:/etc/test123.conf' cmd.run 'w'</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>名称</th><th>存储位置</th><th>数据类型</th><th>数据采集更新方式</th><th>应用</th></tr></thead><tbody><tr><td>Grains</td><td>minion端</td><td>静态数据</td><td>minion启动时收集，也可以使用saltutil.sync_grains进行刷新。</td><td>存储minion基本数据，比如用于匹配minion,自身数据可以用来做资产管理等。</td></tr><tr><td>Pillar</td><td>master端</td><td>动态数据</td><td>在master端定义，指定给对应的minion，可以使用saltutil.refresh_pillar刷新</td><td>存储Master指定的数据，只有指定的minion可以看到，用于敏感数据保存。</td></tr></tbody></table><h4 id="9-配置管理安装Apache"><a href="#9-配置管理安装Apache" class="headerlink" title="9.配置管理安装Apache"></a>9.配置管理安装Apache</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /etc/salt/master</span><br><span class="line">file_roots:</span><br><span class="line">  base:</span><br><span class="line">    - /srv/salt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> mkdir /srv/salt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - apache</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/apache.sls</span><br><span class="line">apache-service:</span><br><span class="line">  pkg.installed:</span><br><span class="line">    - names:</span><br><span class="line">      - httpd</span><br><span class="line">      - httpd-devel</span><br><span class="line">  service.running:</span><br><span class="line">    - name: httpd</span><br><span class="line">    - enable: True</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> /etc/init.d/salt-minion restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx213' state.highstate</span><br><span class="line">rzx213:</span><br><span class="line">----------</span><br><span class="line">          ID: apache-service</span><br><span class="line">    Function: pkg.installed</span><br><span class="line">        Name: httpd</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: Package httpd is already installed.</span><br><span class="line">     Started: 15:50:59.361911</span><br><span class="line">    Duration: 2092.768 ms</span><br><span class="line">     Changes:   </span><br><span class="line">----------</span><br><span class="line">          ID: apache-service</span><br><span class="line">    Function: pkg.installed</span><br><span class="line">        Name: httpd-devel</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: Package httpd-devel is already installed.</span><br><span class="line">     Started: 15:51:01.454917</span><br><span class="line">    Duration: 0.615 ms</span><br><span class="line">     Changes:   </span><br><span class="line">----------</span><br><span class="line">          ID: apache-service</span><br><span class="line">    Function: service.running</span><br><span class="line">        Name: httpd</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: Service httpd is already enabled, and is in the desired state</span><br><span class="line">     Started: 15:51:01.456326</span><br><span class="line">    Duration: 43.071 ms</span><br><span class="line">     Changes:   </span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">------------</span><br><span class="line">Succeeded: 3</span><br><span class="line">Failed:    0</span><br><span class="line">------------</span><br><span class="line">Total states run:     3</span><br></pre></td></tr></table></figure><h4 id="9-states文件"><a href="#9-states文件" class="headerlink" title="9.states文件"></a>9.states文件</h4><p>salt states的核心是sls文件，该文件使用YAML语法定义了一些k/v的数据。<br>sls文件存放根路径在master配置文件中定义，默认为/srv/salt,该目录在操作系统上不存在，需要手动创建。<br>在salt中可以通过salt://代替根路径，例如你可以通过salt://top.sls访问/srv/salt/top.sls。<br>在states中top文件也由master配置文件定义，默认为top.sls，该文件为states的入口文件。  一个简单的sls文件如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apache:</span><br><span class="line"> pkg.installed</span><br><span class="line"> service.running</span><br><span class="line">   - require:</span><br><span class="line">     - pkg: apache</span><br></pre></td></tr></table></figure></p><p>说明：此SLS数据确保叫做”apache”的软件包(package)已经安装,并且”apache”服务(service)正在运行中。</p><h4 id="10-文件目录管理"><a href="#10-文件目录管理" class="headerlink" title="10.文件目录管理"></a>10.文件目录管理</h4><ul><li><p>文件管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">服务端配置：</span><br><span class="line"><span class="meta">#</span> vim /srv/salt/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - apache</span><br><span class="line">  'rzx214':</span><br><span class="line">    - filetest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/filetest.sls</span><br><span class="line">file-test:</span><br><span class="line">  file.managed:</span><br><span class="line">    - name: /tmp/filetest.txt</span><br><span class="line">    - source: salt://test/123/1.txt</span><br><span class="line">    - user: root</span><br><span class="line">    - group: root</span><br><span class="line">    - mode: 644</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> mkdir -p /srv/salt/test/123/</span><br><span class="line"><span class="meta">#</span> echo "file test" &gt; /srv/salt/test/123/1.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx214' state.highstate</span><br><span class="line">rzx214:</span><br><span class="line">----------</span><br><span class="line">          ID: file-test</span><br><span class="line">    Function: file.managed</span><br><span class="line">        Name: /tmp/filetest.txt</span><br><span class="line">      Result: True</span><br><span class="line">     Comment: File /tmp/filetest.txt updated</span><br><span class="line">     Started: 15:59:04.959125</span><br><span class="line">    Duration: 65.433 ms</span><br><span class="line">     Changes:   </span><br><span class="line">              ----------</span><br><span class="line">              diff:</span><br><span class="line">                  New file</span><br><span class="line">              mode:</span><br><span class="line">                  0644</span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">------------</span><br><span class="line">Succeeded: 1 (changed=1)</span><br><span class="line">Failed:    0</span><br><span class="line">------------</span><br><span class="line">Total states run:     1</span><br><span class="line"></span><br><span class="line">客户端验证：</span><br><span class="line"><span class="meta">#</span> cat /tmp/filetest.txt </span><br><span class="line">file test</span><br></pre></td></tr></table></figure></li><li><p>目录管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">服务端配置：</span><br><span class="line"><span class="meta">#</span> vim /srv/salt/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - apache</span><br><span class="line">  'rzx214':</span><br><span class="line">    - filedir</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/filedir.sls</span><br><span class="line">file-dir:</span><br><span class="line">  file.recurse:</span><br><span class="line">    - name: /tmp/testdir</span><br><span class="line">    - source: salt://test/123</span><br><span class="line">    - user: root</span><br><span class="line">    - file_mode: 644</span><br><span class="line">    - dir_mode: 755</span><br><span class="line">    - mkdir: True</span><br><span class="line">    - clean: True</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ls /srv/salt/test/123</span><br><span class="line"><span class="meta">#</span> salt 'rzx214' state.highstate</span><br><span class="line"></span><br><span class="line">客户端验证:</span><br><span class="line"><span class="meta">#</span> ls /tmp/testdir/</span><br></pre></td></tr></table></figure></li><li><p>测试增删功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">服务端配置：</span><br><span class="line"><span class="meta">#</span> cd /srv/salt/test/123</span><br><span class="line"><span class="meta">#</span> mkdir newDir</span><br><span class="line"><span class="meta">#</span> echo "Hello" &gt; newDir/a</span><br><span class="line"><span class="meta">#</span> rm -rf 1.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx214' state.highstate</span><br><span class="line">客户端验证:</span><br><span class="line"><span class="meta">#</span> ls /tmp/testdir/</span><br></pre></td></tr></table></figure></li></ul><h4 id="11-远程执行"><a href="#11-远程执行" class="headerlink" title="11.远程执行"></a>11.远程执行</h4><ul><li><p>远程执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /srv/salt/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - cmdtest</span><br><span class="line">  'rzx214':</span><br><span class="line">    - filedir</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/cmdtest.sls</span><br><span class="line">cmd-test:  </span><br><span class="line">  cmd.run:</span><br><span class="line">    - onlyif: test -f /tmp/1.txt</span><br><span class="line">    - names:</span><br><span class="line">      - touch /tmp/cmdtest.txt</span><br><span class="line">      - mkdir /tmp/cmdtest</span><br><span class="line">    - user: root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> echo "hello" &gt; /tmp/1.txt</span><br><span class="line"><span class="meta">#</span> salt 'rzx123' state.highstate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ll /tmp|grep cmd</span><br></pre></td></tr></table></figure></li><li><p>远程执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">服务端配置：</span><br><span class="line"><span class="meta">#</span> vim /srv/salt/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - cmdtest</span><br><span class="line">  'rzx214':</span><br><span class="line">    - shelltest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/shelltest.sls</span><br><span class="line">shell-test:</span><br><span class="line">  cmd.script:</span><br><span class="line">    - source: salt://test/1.sh</span><br><span class="line">    - user: root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/test/1.sh</span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">touch /tmp/shelltest.txt</span><br><span class="line">if [ -d /tmp/shelltest ]</span><br><span class="line">then</span><br><span class="line">    rm -rf /tmp/shelltest</span><br><span class="line">else</span><br><span class="line">    mkdir /tmp/shelltest</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span> salt 'rzx214' state.highstate</span><br><span class="line"></span><br><span class="line">客户端验证:</span><br><span class="line"><span class="meta">#</span> ll /tmp|grep shell</span><br></pre></td></tr></table></figure></li></ul><h4 id="12-管理任务计划"><a href="#12-管理任务计划" class="headerlink" title="12.管理任务计划"></a>12.管理任务计划</h4><ul><li><p>建立 cron</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">服务端配置：</span><br><span class="line"><span class="meta">#</span> vim /srv/salt/top.sls</span><br><span class="line">base:</span><br><span class="line">  'rzx213':</span><br><span class="line">    - crontest</span><br><span class="line">  'rzx214':</span><br><span class="line">    - shelltest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> vim /srv/salt/crontest.sls</span><br><span class="line">cron-test:</span><br><span class="line">  cron.present:</span><br><span class="line">    - name: /bin/touch /tmp/111.txt</span><br><span class="line">    - user: root</span><br><span class="line">    - minute: '*'</span><br><span class="line">    - hour: 20</span><br><span class="line">    - daymonth: 1-10</span><br><span class="line">    - month: '3,5'</span><br><span class="line">    - dayweek: '*'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx213' state.highstate</span><br><span class="line"></span><br><span class="line">客户端验证：</span><br><span class="line"><span class="meta">#</span> crontab -l</span><br></pre></td></tr></table></figure></li><li><p>删除cron</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> 服务端配置：</span><br><span class="line"><span class="meta">#</span> vim /srv/salt/crontest.sls</span><br><span class="line">cron-test:</span><br><span class="line">  cron.absent:</span><br><span class="line">    - name: /bin/touch /tmp/111.txt</span><br><span class="line">    - user: root</span><br><span class="line">    - minute: '*'</span><br><span class="line">    - hour: 20</span><br><span class="line">    - daymonth: 1-10</span><br><span class="line">    - month: '3,5'</span><br><span class="line">    - dayweek: '*'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx213' state.highstate</span><br><span class="line"></span><br><span class="line">客户端验证:</span><br><span class="line"><span class="meta">#</span> crontab -l</span><br></pre></td></tr></table></figure></li></ul><h4 id="13-Saltstack常用命令"><a href="#13-Saltstack常用命令" class="headerlink" title="13.Saltstack常用命令"></a>13.Saltstack常用命令</h4><ul><li><p>拷贝文件到客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt 'rzx213' cp.get_file salt://apache.sls /tmp/cp.txt</span><br></pre></td></tr></table></figure></li><li><p>拷贝目录到客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt 'rzx213' cp.get_dir salt://test /tmp</span><br></pre></td></tr></table></figure></li><li><p>显示存活的客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> salt-run manage.up</span><br></pre></td></tr></table></figure></li><li><p>命令下执行服务端的脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /srv/salt/test/shell.sh</span><br><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">echo "hadron.cn" &gt; /tmp/shell.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> salt 'rzx214' cmd.script salt://test/shell.sh</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍自动化运维工具SaltStack的使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下搭建Jenkins服务器</title>
    <link href="https://dsxlinux.github.io/2018/08/20/jenkins/"/>
    <id>https://dsxlinux.github.io/2018/08/20/jenkins/</id>
    <published>2018-08-20T08:59:47.000Z</published>
    <updated>2018-08-20T09:10:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Centos6.x搭建Jenkins服务器。<br><a id="more"></a></p><h4 id="1-卸载OpenJDK"><a href="#1-卸载OpenJDK" class="headerlink" title="1.卸载OpenJDK"></a>1.卸载OpenJDK</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -qa|grep java</span></span><br><span class="line">tzdata-java-2018d-1.el6.noarch</span><br><span class="line">javassist-3.9.0-6.el6.noarch</span><br><span class="line">java-1.7.0-openjdk-1.7.0.171-2.6.13.0.el6_9.x86_64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum remove java java-* -y</span></span><br></pre></td></tr></table></figure><h4 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.安装JDK"></a>2.安装JDK</h4><p>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -ivh jdk-8u101-linux-x64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/profile</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_101</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> java -version</span></span><br><span class="line">java version "1.8.0_101"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_101-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)</span><br></pre></td></tr></table></figure></p><h4 id="3-安装Tomcat"><a href="#3-安装Tomcat" class="headerlink" title="3.安装Tomcat"></a>3.安装Tomcat</h4><p>Tomcat下载地址：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tar xf  apache-tomcat-9.0.10.tar.gz -C /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mv apache-tomcat-9.0.10 tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -l</span></span><br><span class="line">    bin             --启动命令目录</span><br><span class="line">    conf           --配置文件目录</span><br><span class="line">    lib             --库文件目录</span><br><span class="line">    logs           --日志文件目录</span><br><span class="line">    temp--临时缓存文件</span><br><span class="line">    webapps  --web应用家目录</span><br><span class="line">    work         --工作缓存目录</span><br><span class="line"></span><br><span class="line">环境变量</span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /usr/<span class="built_in">local</span>/tomcat/bin/startup.sh              --tomcat的启动程序</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /usr/<span class="built_in">local</span>/tomcat/bin/shutdown.sh             --tomcat的关闭程序</span></span><br><span class="line">加入如下内容：</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_101</span><br><span class="line">export TOMCAT_HOME=/usr/local/tomcat</span><br><span class="line">export CATALINA_HOME=/usr/local/tomcat</span><br><span class="line">export CLASS_PATH=$JAVA_HOME/bin/lib:$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tool.jar</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$TOMCAT_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">启动Tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/<span class="built_in">local</span>/tomcat/bin/startup.sh</span></span><br></pre></td></tr></table></figure></p><h4 id="4-安装Jenkins"><a href="#4-安装Jenkins" class="headerlink" title="4.安装Jenkins"></a>4.安装Jenkins</h4><p>从官网下载jenkins的war包，地址<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a><br>下载后可以直接运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jenkins.war --httpPort=8080</span><br></pre></td></tr></table></figure></p><p>把下载的包放到如下目录：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls /usr/<span class="built_in">local</span>/tomcat/webapps/ROOT</span></span><br></pre></td></tr></table></figure></p><p>解压war包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> jar xf jenkins.war</span></span><br></pre></td></tr></table></figure></p><p>使用浏览器访问：<a href="http://ip:8080/" target="_blank" rel="noopener">http://ip:8080/</a>   进入安装界面即可完成安装。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Centos6.x搭建Jenkins服务器。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下搭建http代理服务器(TinyProxy)</title>
    <link href="https://dsxlinux.github.io/2018/08/20/tiny-proxy/"/>
    <id>https://dsxlinux.github.io/2018/08/20/tiny-proxy/</id>
    <published>2018-08-20T08:21:30.000Z</published>
    <updated>2018-08-20T08:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Centos6.x搭建TinyProxy服务器。<br><a id="more"></a></p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install epel-release -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install tinyproxy -y</span></span><br></pre></td></tr></table></figure><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>配置文件：/etc/opt/ss5/ss5.conf<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> egrep -v <span class="string">'#|^$'</span> /etc/tinyproxy/tinyproxy.conf//默认配置内容如下</span></span><br><span class="line">User tinyproxy</span><br><span class="line">Group tinyproxy</span><br><span class="line">Port 8888</span><br><span class="line">Timeout 600</span><br><span class="line">DefaultErrorFile "/usr/share/tinyproxy/default.html"</span><br><span class="line">StatFile "/usr/share/tinyproxy/stats.html"</span><br><span class="line">LogFile "/var/log/tinyproxy/tinyproxy.log"</span><br><span class="line">LogLevel Info</span><br><span class="line">PidFile "/var/run/tinyproxy/tinyproxy.pid"</span><br><span class="line">MaxClients 100</span><br><span class="line">MinSpareServers 5</span><br><span class="line">MaxSpareServers 20</span><br><span class="line">StartServers 10</span><br><span class="line">MaxRequestsPerChild 0</span><br><span class="line">Allow 127.0.0.1</span><br><span class="line">ViaProxyName "tinyproxy"</span><br><span class="line">ConnectPort 443</span><br><span class="line">ConnectPort 563</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">Port是监听的端口</span><br><span class="line">Allow IP服务限制。如果不想限制，可以注释掉</span><br></pre></td></tr></table></figure></p><h4 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> service tinyproxy start</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig --level 35 tinyproxy on</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -ntlp | grep tinyproxy</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Centos6.x搭建TinyProxy服务器。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下搭建SS5(SOCKS5)代理服务器</title>
    <link href="https://dsxlinux.github.io/2018/08/20/socks5-proxy/"/>
    <id>https://dsxlinux.github.io/2018/08/20/socks5-proxy/</id>
    <published>2018-08-20T07:31:10.000Z</published>
    <updated>2018-08-20T08:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Centos6.x搭建SOCKS5代理服务器。<br><a id="more"></a></p><h4 id="1-从官网下载源码"><a href="#1-从官网下载源码" class="headerlink" title="1.从官网下载源码"></a>1.从官网下载源码</h4><p>官网：<a href="http://ss5.sourceforge.net/software.htm" target="_blank" rel="noopener">http://ss5.sourceforge.net/software.htm</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget https://nchc.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span></span><br></pre></td></tr></table></figure></p><h4 id="2-解决依赖"><a href="#2-解决依赖" class="headerlink" title="2.解决依赖"></a>2.解决依赖</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum -y install gcc automake make</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y install pam-devel openldap-devel cyrus-sasl-devel openssl-devel</span></span><br></pre></td></tr></table></figure><h4 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3.编译安装"></a>3.编译安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tar xvf ss5-3.8.9-8.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> ss5-3.8.9/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h4><p>配置文件：/etc/opt/ss5/ss5.conf<br>第一步：修改认证方式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/opt/ss5/ss5.conf</span></span><br><span class="line">87  auth    0.0.0.0/0               -               u//将第87行注释打开，最后修改成u</span><br><span class="line">203 permit u    0.0.0.0/0   -   0.0.0.0/0   -   -   -   -   -//将第203行注释打开，中间加一个u，表示用户认证</span><br></pre></td></tr></table></figure></p><p>第二步：添加用户名及密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/opt/ss5/ss5.passwd</span></span><br><span class="line">rzx rzx@1218</span><br></pre></td></tr></table></figure></p><p>第三步：修改端口<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/sysconfig/ss5</span></span><br><span class="line">SS5_OPTS=" -u root -b 0.0.0.0:10808"//默认是1080端口，修改成10808</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod 755 /etc/rc.d/init.d/ss5</span></span><br></pre></td></tr></table></figure></p><h4 id="5-启动"><a href="#5-启动" class="headerlink" title="5.启动"></a>5.启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod +x /etc/rc.d/init.d/ss5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/rc.d/init.d/ss5 restart</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -an | grep 10808</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> more /var/<span class="built_in">log</span>/ss5/ss5.log</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig --add ss5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig --level 345 ss5 on</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Centos6.x搭建SOCKS5代理服务器。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>inotify-tools使用方法介绍</title>
    <link href="https://dsxlinux.github.io/2018/08/15/inotify/"/>
    <id>https://dsxlinux.github.io/2018/08/15/inotify/</id>
    <published>2018-08-15T09:19:04.000Z</published>
    <updated>2018-08-15T09:47:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍inotify-tools工具套件的使用方法。<br><a id="more"></a></p><h4 id="1-关于inotify"><a href="#1-关于inotify" class="headerlink" title="1.关于inotify"></a>1.关于inotify</h4><p>Inotify是一种文件变化通知机制，Linux内核从2.6.13开始引入。<br>inotify-tools提供两种工具，一是inotifywait，它是用来监控文件或目录的变化，二是inotifywatch，它是用来统计文件系统访问的次数。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grep INOTIFY_USER /boot/config-$(uname -r)</span></span><br></pre></td></tr></table></figure></p><p>如果输出(‘CONFIG_INOTIFY_USER=y’)，表示支持Inotify机制。</p><h4 id="2-安装inotify-tools"><a href="#2-安装inotify-tools" class="headerlink" title="2.安装inotify-tools"></a>2.安装inotify-tools</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install epel-release -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install inotify-tools -y</span></span><br></pre></td></tr></table></figure><h4 id="3-inotifywait使用"><a href="#3-inotifywait使用" class="headerlink" title="3.inotifywait使用"></a>3.inotifywait使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> inotifywait -h</span></span><br><span class="line"></span><br><span class="line">参数说明:</span><br><span class="line">inotifywait [-hcmrq] [-e ] [-t ] [–format ] [–timefmt ] [ … ]</span><br><span class="line">-h,–help</span><br><span class="line">输出帮助信息</span><br><span class="line">@</span><br><span class="line">排除不需要监视的文件，可以是相对路径，也可以是绝对路径。</span><br><span class="line">–fromfile</span><br><span class="line">从文件读取需要监视的文件或排除的文件，一个文件一行，排除的文件以@开头。</span><br><span class="line">-m, –monitor</span><br><span class="line">接收到一个事情而不退出，无限期地执行。默认的行为是接收到一个事情后立即退出。</span><br><span class="line">-d, –daemon</span><br><span class="line">跟–monitor一样，除了是在后台运行，需要指定–outfile把事情输出到一个文件。也意味着使用了–syslog。</span><br><span class="line">-o, –outfile</span><br><span class="line">输出事情到一个文件而不是标准输出。</span><br><span class="line">-s, –syslog</span><br><span class="line">输出错误信息到系统日志</span><br><span class="line">-r, –recursive</span><br><span class="line">监视一个目录下的所有子目录。</span><br><span class="line">-q, –quiet</span><br><span class="line">指定一次，不会输出详细信息，指定二次，除了致命错误，不会输出任何信息。</span><br><span class="line">–exclude</span><br><span class="line">正则匹配需要排除的文件，大小写敏感。</span><br><span class="line">–excludei</span><br><span class="line">正则匹配需要排除的文件，忽略大小写。</span><br><span class="line">-t , –timeout</span><br><span class="line">设置超时时间，如果为0，则无限期地执行下去。</span><br><span class="line">-e , –event</span><br><span class="line">指定监视的事件。</span><br><span class="line">-c, –csv</span><br><span class="line">输出csv格式。</span><br><span class="line">–timefmt</span><br><span class="line">指定时间格式，用于–format选项中的%T格式。</span><br><span class="line">–format</span><br><span class="line">指定输出格式。</span><br><span class="line"><span class="meta">%</span><span class="bash">w 表示发生事件的目录</span></span><br><span class="line"><span class="meta">%</span><span class="bash">f 表示发生事件的文件</span></span><br><span class="line"><span class="meta">%</span><span class="bash">e 表示发生的事件</span></span><br><span class="line"><span class="meta">%</span><span class="bash">Xe 事件以“X”分隔</span></span><br><span class="line"><span class="meta">%</span><span class="bash">T 使用由–timefmt定义的时间格式</span></span><br></pre></td></tr></table></figure><p>可监听事件</p><table><thead><tr><th>access</th><th>文件读取</th></tr></thead><tbody><tr><td>modify</td><td>文件更改。</td></tr><tr><td>attrib</td><td>文件属性更改，如权限，时间戳等。</td></tr><tr><td>close_write</td><td>以可写模式打开的文件被关闭，不代表此文件一定已经写入数据。</td></tr><tr><td>close_nowrite</td><td>以只读模式打开的文件被关闭。</td></tr><tr><td>close</td><td>文件被关闭，不管它是如何打开的。</td></tr><tr><td>open</td><td>文件打开。</td></tr><tr><td>moved_to</td><td>一个文件或目录移动到监听的目录，即使是在同一目录内移动，此事件也触发。</td></tr><tr><td>moved_from</td><td>一个文件或目录移出监听的目录，即使是在同一目录内移动，此事件也触发。</td></tr><tr><td>move</td><td>包括moved_to和 moved_from</td></tr><tr><td>move_self</td><td>文件或目录被移除，之后不再监听此文件或目录。</td></tr><tr><td>create</td><td>文件或目录创建</td></tr><tr><td>delete</td><td>文件或目录删除</td></tr><tr><td>delete_self</td><td>文件或目录移除，之后不再监听此文件或目录</td></tr><tr><td>unmount</td><td>文件系统取消挂载，之后不再监听此文件系统。</td></tr></tbody></table><p>案例：</p><p>通过ftp上传了两种不同的文件（ftp一直在工作中），比如：xxx.zip文件和xxx.dat文件，需要将xxx.dat文件移动到其他目录进行单独处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat inotify.sh </span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/bin/inotifywait -mrq -e modify,attrib,close,moved_to,create,delete /test/ |while read files</span><br><span class="line">do</span><br><span class="line">mv /test/*.dat /test2/ &amp;&gt;/dev/null</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="4-inotifywatch使用"><a href="#4-inotifywatch使用" class="headerlink" title="4.inotifywatch使用"></a>4.inotifywatch使用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> inotifywatch -h</span></span><br><span class="line">inotifywatch [-hvzrqf] [-e ] [-t ] [-a ] [-d ] [ … ]</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">-h, –help</span><br><span class="line">输出帮助信息</span><br><span class="line">-v, –verbose</span><br><span class="line">输出详细信息</span><br><span class="line">@</span><br><span class="line">排除不需要监视的文件，可以是相对路径，也可以是绝对路径。</span><br><span class="line">–fromfile</span><br><span class="line">从文件读取需要监视的文件或排除的文件，一个文件一行，排除的文件以@开头。</span><br><span class="line">-z, –zero</span><br><span class="line">输出表格的行和列，即使元素为空</span><br><span class="line">–exclude</span><br><span class="line">正则匹配需要排除的文件，大小写敏感。</span><br><span class="line">–excludei</span><br><span class="line">正则匹配需要排除的文件，忽略大小写。</span><br><span class="line">-r, –recursive</span><br><span class="line">监视一个目录下的所有子目录。</span><br><span class="line">-t , –timeout</span><br><span class="line">设置超时时间</span><br><span class="line">-e , –event</span><br><span class="line">只监听指定的事件。</span><br><span class="line">-a , –ascending</span><br><span class="line">以指定事件升序排列。</span><br><span class="line">-d , –descending</span><br><span class="line">以指定事件降序排列。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> inotifywatch -r -v -e modify,attrib,close,moved_to,create,delete /<span class="built_in">test</span>/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍inotify-tools工具套件的使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://dsxlinux.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dsxlinux.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主键和外键</title>
    <link href="https://dsxlinux.github.io/2018/08/12/mysql-key/"/>
    <id>https://dsxlinux.github.io/2018/08/12/mysql-key/</id>
    <published>2018-08-12T10:57:43.000Z</published>
    <updated>2018-08-13T07:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍MySQL主键和外键。<br><a id="more"></a></p><h4 id="1-主键"><a href="#1-主键" class="headerlink" title="1.主键"></a>1.主键</h4><ul><li><p>什么是主键<br>主键是能确定一条记录的唯一标识。比如：一条记录包括身份正号，姓名，年龄。身份证号是唯一能确定你这个人的，其他都可能有重复，所以身份证号是主键。 </p></li><li><p>声明主键的方法<br>不设置主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE t1(</span><br><span class="line"> id int not null,</span><br><span class="line"> name char(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>  带主键的<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE t1(</span><br><span class="line"> id int not null primary key,</span><br><span class="line"> name char(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>  复合主键<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE t1(</span><br><span class="line"> id int not null,</span><br><span class="line"> name char(20),</span><br><span class="line"> primary key (id,name)</span><br><span class="line">);</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">主键自增的</span><br><span class="line"> ```mysql</span><br><span class="line">mysql&gt; create table dd(  </span><br><span class="line">  id int primary key not null auto_increment,  </span><br><span class="line">  name varchar(20),  </span><br><span class="line">  time timestamp default current_timestamp  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>  创建完后再决定主键<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table t(</span><br><span class="line">  id int not null,</span><br><span class="line">  name varchar(200) not null,</span><br><span class="line">  time timestamp default current_timestamp</span><br><span class="line">);</span><br><span class="line">mysql&gt; alter table t add primary key (id);</span><br><span class="line">mysql&gt; alter table t drop primary key (id);</span><br></pre></td></tr></table></figure></p><h4 id="2-外键"><a href="#2-外键" class="headerlink" title="2.外键"></a>2.外键</h4><ul><li><p>什么是外键<br>一张表中有一个非主键的字段指向了别一张表中的主键，该字段叫做外键。<br>一张表中可以有多个外键。</p></li><li><p>外键作用<br>对子表(外键所在的表)的作用：子表在进行写操作的时候，如果外键字段在父表中找不到对应的匹配，操作就会失败。<br>对父表的作用：对父表的主键字段进行删和改时，如果对应的主键在子表中被引用，操作就会失败。</p></li><li><p>外键条件<br>表储存引擎必须是innodb，否则创建的外键无约束效果。<br>外键的列类型必须与父表的主键类型完全一致。<br>外键的名字不能重复。<br>已经存在数据的字段被设为外键时，必须保证字段中的数据与父表的主键数据对应起来。</p></li><li><p>新增外键<br>在创建时增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table province(</span><br><span class="line">pId int primary key auto_increment,</span><br><span class="line">pName varchar(20)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">   mysql&gt; create table user(</span><br><span class="line">userId int primary key auto_increment,</span><br><span class="line">userName varchar(40),</span><br><span class="line">pid int,</span><br><span class="line">foreign key(pid) references province(pId)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; create table city(</span><br><span class="line">cityId int primary key auto_increment,</span><br><span class="line">cName varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在创建好的表中增加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table user add cityId int;</span><br><span class="line">mysql&gt; alter table user add foreign key(cityId) references city(cityId);</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table city add pid int;</span><br><span class="line">mysql&gt; alter table city add foreign key(pid) references province(pId);</span><br></pre></td></tr></table></figure></li></ul><ul><li>删除外键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table tablename drop foreign key 外键名字;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍MySQL主键和外键。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://dsxlinux.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://dsxlinux.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据类型</title>
    <link href="https://dsxlinux.github.io/2018/08/12/mysql-datatype/"/>
    <id>https://dsxlinux.github.io/2018/08/12/mysql-datatype/</id>
    <published>2018-08-12T10:21:19.000Z</published>
    <updated>2018-08-12T10:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍MySQL各数据类型的、大小及长度。<br><a id="more"></a></p><h4 id="1-数字型"><a href="#1-数字型" class="headerlink" title="1.数字型"></a>1.数字型</h4><table><thead><tr><th><strong>类型</strong></th><th><strong>大小</strong></th><th><strong>范围（有符号）</strong></th><th><strong>范围（无符号）</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>TINYINT</td><td>1 字节</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 字节</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 字节</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 字节</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 字节</td><td>(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 字节</td><td>(-3.402 823 466 E+38，1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度 浮点数值</td></tr><tr><td>DOUBLE</td><td>8 字节</td><td>(1.797 693 134 862 315 7 E+308，2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度 浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table><h4 id="2-字符类型"><a href="#2-字符类型" class="headerlink" title="2.字符类型"></a>2.字符类型</h4><table><thead><tr><th>CHAR</th><th>0-255字节</th><th>定长字符串</th></tr></thead><tbody><tr><td>VARCHAR</td><td>0-255字节</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>LOGNGBLOB</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr></tbody></table><h4 id="3-时间类型"><a href="#3-时间类型" class="headerlink" title="3.时间类型"></a>3.时间类型</h4><table><thead><tr><th><strong>类型</strong></th><th><strong>大小(字节)</strong></th><th><strong>范围</strong></th><th><strong>格式</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>8</td><td>1970-01-01 00:00:00/2037 年某时</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h4 id="4-枚举集合"><a href="#4-枚举集合" class="headerlink" title="4.枚举集合"></a>4.枚举集合</h4><table><thead><tr><th>类型</th><th>范围</th><th>大小</th></tr></thead><tbody><tr><td>ENUM</td><td>最多65535个成员</td><td>64KB</td></tr><tr><td>SET</td><td>最多64个成员</td><td>64KB</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍MySQL各数据类型的、大小及长度。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://dsxlinux.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://dsxlinux.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库备份</title>
    <link href="https://dsxlinux.github.io/2018/08/10/mysql-backup/"/>
    <id>https://dsxlinux.github.io/2018/08/10/mysql-backup/</id>
    <published>2018-08-10T08:46:01.000Z</published>
    <updated>2018-09-13T08:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍MySQL数据库备份的方法。<br><a id="more"></a></p><h4 id="mysqldump备份方法"><a href="#mysqldump备份方法" class="headerlink" title="mysqldump备份方法"></a>mysqldump备份方法</h4><p>mysqldump备份提供三种级别的备份：表级，库级和全库级。<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">建立一个存放备份的目录</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mkdir /tmp/mysqlbackup</span></span><br><span class="line">改权限</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysql.mysql /tmp/mysqlbackup/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> man mysqldump</span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump [options] db_name [tables]<span class="comment"># 表级</span></span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump [options] --database DB1 [DB2 DB3...]<span class="comment"># 库级</span></span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump [options] --all-databases<span class="comment"># 全库级</span></span></span><br><span class="line"></span><br><span class="line">全库备份：</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump -uroot -p123456 --all-databases &gt; /tmp/mysqlbackup/all.sql</span></span><br><span class="line">全库还原：</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysql_install_db --datadir=/data --user=mysql    <span class="comment"># 可能需要重新初始化，具体的要看情况</span></span></span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysql -u root -p &lt; /tmp/mysqlbackup/all.sql</span></span><br><span class="line"></span><br><span class="line">库级备份：</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump -uroot -p123456 --database db1 &gt; /tmp/mysqlbackup/db1.sql</span></span><br><span class="line">库级还原:</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysql -u root -p &lt; /tmp/mysqlbackup/db1.sql </span></span><br><span class="line"></span><br><span class="line">表级备份：</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump -uroot -p123456 db1 emp &gt; /tmp/mysqlbackup/emp.sql</span></span><br><span class="line">表级还原：</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysql -uroot -p123456 db1 &lt; /tmp/mysqlbackup/emp.sql</span></span><br><span class="line"></span><br><span class="line">只备份表结构：</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump -uroot -p123456 --no-data db1 emp&gt; /tmp/mysqlbackup/emp.sql</span></span><br><span class="line"></span><br><span class="line">某些表不备份</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash"> mysqldump -uroot -p123456 --ignore-table=db1.emp1 --ignore-table=db1.emp2 db1 emp&gt; /tmp/mysqlbackup/emp.sql</span></span><br><span class="line"></span><br><span class="line">跨主机备份:</span><br><span class="line"><span class="meta">shell&gt;</span><span class="bash">  mysqldump -uroot -p123456 --opt --database db1 | mysql -h 192.168.0.214 -uroot -p123456 -C db1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程数据库上要存在db1这个库才能备份过去，否则会报错。</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍MySQL数据库备份的方法。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://dsxlinux.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://dsxlinux.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
